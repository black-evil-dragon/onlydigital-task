/*! For license information please see main.bundle.js.LICENSE.txt */
(()=>{"use strict";var e={935:(e,t,n)=>{n.d(t,{A:()=>u});var r=n(354),i=n.n(r),a=n(314),l=n.n(a),s=n(455),o=l()(i());o.push([e.id,"@import url(https://fonts.googleapis.com/css2?family=Bebas+Neue&family=PT+Sans:ital,wght@0,400;0,700;1,400;1,700&display=swap);"]),o.i(s.A),o.push([e.id,'*{margin:0;padding:0;box-sizing:border-box;font-family:"PT Sans",sans-serif;font-weight:400;font-style:normal}',"",{version:3,sources:["webpack://./src/app/styles/index.scss"],names:[],mappings:"AAKA,EACI,QAAA,CACA,SAAA,CACA,qBAAA,CAEA,gCAAA,CACA,eAAA,CACA,iBAAA",sourcesContent:["@import url('https://fonts.googleapis.com/css2?family=Bebas+Neue&family=PT+Sans:ital,wght@0,400;0,700;1,400;1,700&display=swap');\r\n\r\n@import url('./mixins.scss');\r\n\r\n\r\n* {\r\n    margin: 0;\r\n    padding: 0;\r\n    box-sizing: border-box;\r\n\r\n    font-family: \"PT Sans\", sans-serif;\r\n    font-weight: 400;\r\n    font-style: normal;\r\n}\r\n\r\n.app {\r\n    &-header {}\r\n\r\n    &-body {\r\n        \r\n    }\r\n\r\n    &-footer {}\r\n}"],sourceRoot:""}]);const u=o},69:(e,t,n)=>{n.d(t,{A:()=>s});var r=n(354),i=n.n(r),a=n(314),l=n.n(a)()(i());l.push([e.id,'.interval-slider{background-color:#f4f5f9;padding:0 calc(0.0875*100vw + -8px) 0 calc(0.1875*100vw + -40px)}.interval-slider__content{position:relative;max-height:max-content;padding-bottom:calc(0.054375*100vw + -4.4px);color:#42567a;user-select:none}@media(min-width: 768px){.interval-slider__content{border-right:1px solid rgba(66,86,122,.1);border-left:1px solid rgba(66,86,122,.1)}.interval-slider__content::before{content:"";position:absolute;right:0;left:0;background:#42567a;opacity:.1;width:1px;height:100%;margin:0 auto}}.interval-slider__title{width:min-content;padding-top:calc(0.069375*100vw + 36.8px);margin-bottom:calc(0.01875*100vw + 140px)}.interval-slider__title--text{position:relative;font-size:calc(0.0225*100vw + 12.8px);font-weight:700;line-height:calc(0.0275*100vw + 15.2px)}@media(min-width: 768px){.interval-slider__title--text{padding-left:calc(0.05*100vw + -16px)}.interval-slider__title--text::before{content:"";position:absolute;top:0;left:0;width:5px;height:100%;background:linear-gradient(180deg, #5d5fef, #ef5da8)}}.interval-slider_wrapper{position:relative;display:flex;justify-content:center;align-items:center;flex-direction:column;width:100%;pointer-events:none;margin-bottom:calc(0.073125*100vw + 76.6px)}@media(max-width: 768px){.interval-slider_wrapper{margin-bottom:calc(0.003125*100vw + 211px)}}.interval-slider_wrapper::after{position:absolute;width:100%;height:1px}@media(min-width: 768px){.interval-slider_wrapper::after{content:"";position:absolute;background:#42567a;opacity:.1}}@media(max-width: 768px){.interval-slider_pagination{display:flex;align-items:center;gap:10px;margin-left:calc(0.025*100vw + 32px)}.interval-slider_pagination .swiper-pagination-bullet{display:inline-block;width:6px;height:6px;background-color:#42567a;border-radius:50%;opacity:.4;transition:opacity .5s ease-in-out}.interval-slider_pagination .swiper-pagination-bullet-active{opacity:1}}.interval-slider_navigation{display:flex;padding-left:calc(0.05*100vw + -16px);margin-bottom:calc(0.035*100vw + -11.2px)}.interval-slider_navigation__wrapper{display:flex;flex-direction:column;gap:20px}.interval-slider_navigation__controls{display:flex;gap:20px}.interval-slider_navigation__controls--arrow{cursor:pointer;display:flex;justify-content:center;align-items:center;width:calc(0.01875*100vw + 14px);height:calc(0.01875*100vw + 14px);border-radius:50%;border:1px solid rgba(66,86,122,.5);opacity:1;transition:opacity .1s ease-in-out}.interval-slider_navigation__controls--arrow svg{stroke:#42567a}@media(max-width: 768px){.interval-slider_navigation__controls--arrow svg{width:25%}}.interval-slider_navigation__controls--arrow.--next svg{transform:rotate(180deg)}.interval-slider_navigation__controls--arrow.--disable{opacity:.5}.interval-slider_slider{pointer-events:all;position:relative;display:flex;width:100%;padding:0 calc(0.1*100vw + -32px) 0 calc(0.05*100vw + -16px);transform:translateY(0);opacity:1;transition:all .1s ease-in-out}@media(max-width: 768px){.interval-slider_slider{position:absolute;top:calc(0.025*100vw + 12px);flex-direction:column}.interval-slider_slider--title{font-size:calc(0.005625*100vw + 14.2px);font-weight:700;line-height:calc(0.00625*100vw + 18px);padding-bottom:15px;margin-bottom:20px;border-bottom:1px solid #c7cdd9}}.interval-slider_slider.--hide{transform:translateY(5px);opacity:0}.interval-slider_slider__container{width:100%}.interval-slider_slider__arrow{position:absolute;bottom:50%;left:20px;display:flex;justify-content:center;align-items:center;width:40px;height:40px;box-shadow:0px 0px 15px 0px rgba(56,119,238,.1);border-radius:50%;opacity:1;background-color:#fff;transition:opacity .1s ease-in-out}.interval-slider_slider__arrow svg{stroke:#3877ee}.interval-slider_slider__arrow.--next{left:auto;right:40px;transform:rotate(180deg)}.interval-slider_slider__arrow.swiper-button-disabled{opacity:0}@media(max-width: 768px){.interval-slider_slider__arrow{display:none}}.interval-slider_slider__slide{display:flex;flex-direction:column;gap:15px;height:135px}.interval-slider_slider__slide--title{font-family:"Bebas Neue";font-size:calc(0.005625*100vw + 14.2px);line-height:calc(0.00625*100vw + 18px);color:#3877ee;width:fit-content}.interval-slider_slider__slide--text{font-size:calc(0.00375*100vw + 12.8px);line-height:calc(0.00625*100vw + 18px);width:fit-content}.interval-slider_spinner{position:absolute;pointer-events:none;display:flex;justify-content:center;align-items:center;height:100%}@media(max-width: 1600px){.interval-slider_spinner{scale:.8}}@media(max-width: 1600px)and (max-width: 1400px){.interval-slider_spinner{scale:.7}}@media(max-width: 1600px)and (max-width: 1400px)and (max-width: 1024px){.interval-slider_spinner{scale:.65}}@media(max-width: 1600px)and (max-width: 1400px)and (max-width: 1024px)and (max-width: 768px){.interval-slider_spinner{scale:1;bottom:calc(0.014375*100vw + 52.4px)}}.interval-slider_spinner__container{display:none;position:absolute;width:530px;height:530px}@media(min-width: 768px){.interval-slider_spinner__container{display:block}.interval-slider_spinner__container::before{content:"";position:absolute;width:100%;height:100%;border-radius:50%;border:1px solid rgba(66,86,122,.2)}}.interval-slider_spinner__point{display:flex;justify-content:center;position:absolute;width:101%;height:101%;z-index:10}.interval-slider_spinner__point-wrapper{position:relative;display:flex;justify-content:center;align-items:center;width:56px;height:56px;top:-26px}.interval-slider_spinner__point--title{position:absolute;width:max-content;top:10px;left:70px;transform-origin:0 50%;font-size:20px;font-weight:700;line-height:30px;opacity:0;transition:opacity .25s ease-in-out}.interval-slider_spinner__point--title.--active{opacity:1}.interval-slider_spinner__point--index{position:relative;top:-2px;overflow:hidden;display:flex;justify-content:center;align-items:center;transform-origin:50% 50%;height:9px;width:9px;background-color:#42567a;color:#42567a;border:1px solid rgba(48,62,88,.5);border-radius:50%;pointer-events:all;z-index:11;transition:all .25s ease-in-out,transform}.interval-slider_spinner__point--index:hover,.interval-slider_spinner__point--index.--active{width:56px;height:56px;background-color:#f5f6fa}.interval-slider_spinner__interval{z-index:5}.interval-slider_spinner__interval,.interval-slider_spinner__interval span{font-size:calc(0.0625*100vw + 80px);font-weight:700;line-height:calc(0.025*100vw + 112px);letter-spacing:-0.02em}@media(max-width: 768px){.interval-slider_spinner__interval,.interval-slider_spinner__interval span{font-size:calc(0.09*100vw + 27.2px);line-height:calc(0.055*100vw + 54.4px)}}.interval-slider_spinner__interval--start{color:#5d5fef}.interval-slider_spinner__interval--end{color:#ef5da8}',"",{version:3,sources:["webpack://./src/widgets/IntervalSlider/styles/interval-slider.scss"],names:[],mappings:"AAEA,iBAEI,wBAAA,CACA,gEAAA,CAEA,0BACI,iBAAA,CAEA,sBAAA,CAEA,4CAAA,CAEA,aAAA,CAEA,gBAAA,CAEA,yBAXJ,0BAYQ,yCAAA,CACA,wCAAA,CAEA,kCACI,UAAA,CACA,iBAAA,CACA,OAAA,CACA,MAAA,CAEA,kBAAA,CACA,UAAA,CAEA,SAAA,CACA,WAAA,CAEA,aAAA,CAAA,CAOZ,wBACI,iBAAA,CAEA,yCAAA,CACA,yCAAA,CAEA,8BACI,iBAAA,CAEA,qCAAA,CACA,eAAA,CACA,uCAAA,CAGA,yBARJ,8BASQ,qCAAA,CACA,sCACI,UAAA,CACA,iBAAA,CACA,KAAA,CACA,MAAA,CACA,SAAA,CACA,WAAA,CACA,oDAAA,CAAA,CAShB,yBACI,iBAAA,CAEA,YAAA,CACA,sBAAA,CACA,kBAAA,CACA,qBAAA,CAEA,UAAA,CAEA,mBAAA,CAEA,2CAAA,CAEA,yBAdJ,yBAeQ,0CAAA,CAAA,CAGJ,gCACI,iBAAA,CACA,UAAA,CACA,UAAA,CAEA,yBALJ,gCAMQ,UAAA,CACA,iBAAA,CACA,kBAAA,CACA,UAAA,CAAA,CAOR,yBADJ,4BAEQ,YAAA,CACA,kBAAA,CACA,QAAA,CAEA,oCAAA,CAEA,sDACI,oBAAA,CACA,SAAA,CACA,UAAA,CAEA,wBAAA,CACA,iBAAA,CAEA,UAAA,CACA,kCAAA,CAEA,6DACI,SAAA,CAAA,CAMhB,4BACI,YAAA,CAGA,qCAAA,CACA,yCAAA,CAEA,qCACI,YAAA,CACA,qBAAA,CAEA,QAAA,CAKJ,sCACI,YAAA,CAEA,QAAA,CAEA,6CACI,cAAA,CAEA,YAAA,CACA,sBAAA,CACA,kBAAA,CAEA,gCAAA,CACA,iCAAA,CAEA,iBAAA,CACA,mCAAA,CAEA,SAAA,CACA,kCAAA,CAEA,iDACI,cAAA,CAEA,yBAHJ,iDAIQ,SAAA,CAAA,CAKJ,wDACI,wBAAA,CAIR,uDACI,UAAA,CAUhB,wBACI,kBAAA,CAEA,iBAAA,CACA,YAAA,CAEA,UAAA,CAEA,4DAAA,CAEA,uBAAA,CACA,SAAA,CAEA,8BAAA,CAEA,yBAfJ,wBAgBQ,iBAAA,CACA,4BAAA,CACA,qBAAA,CAIA,+BACI,uCAAA,CACA,eAAA,CACA,sCAAA,CAEA,mBAAA,CACA,kBAAA,CACA,+BAAA,CAAA,CAIR,+BACI,yBAAA,CACA,SAAA,CAGJ,mCACI,UAAA,CAGJ,+BACI,iBAAA,CACA,UAAA,CACA,SAAA,CAEA,YAAA,CACA,sBAAA,CACA,kBAAA,CAEA,UAAA,CACA,WAAA,CAEA,+CAAA,CACA,iBAAA,CACA,SAAA,CACA,qBAAA,CAEA,kCAAA,CAGA,mCACI,cAAA,CAGJ,sCACI,SAAA,CACA,UAAA,CAEA,wBAAA,CAGJ,sDACI,SAAA,CAGJ,yBAnCJ,+BAoCQ,YAAA,CAAA,CAIR,+BACI,YAAA,CACA,qBAAA,CAEA,QAAA,CAEA,YAAA,CAIA,sCACI,wBAAA,CACA,uCAAA,CAEA,sCAAA,CAEA,aAAA,CACA,iBAAA,CAGJ,qCACI,sCAAA,CACA,sCAAA,CAEA,iBAAA,CAOZ,yBACI,iBAAA,CACA,mBAAA,CAEA,YAAA,CACA,sBAAA,CACA,kBAAA,CAEA,WAAA,CAEA,0BAVJ,yBAWQ,QAAA,CAAA,CACA,iDAZR,yBAaY,QAAA,CAAA,CACA,wEAdZ,yBAegB,SAAA,CAAA,CACA,8FAhBhB,yBAiBoB,OAAA,CACA,oCAAA,CAAA,CAOhB,oCACI,YAAA,CAEA,iBAAA,CAEA,WAAA,CACA,YAAA,CAEA,yBARJ,oCASQ,aAAA,CACA,4CACI,UAAA,CACA,iBAAA,CAEA,UAAA,CACA,WAAA,CAEA,iBAAA,CACA,mCAAA,CAAA,CAKZ,gCAEI,YAAA,CACA,sBAAA,CAEA,iBAAA,CAEA,UAAA,CACA,WAAA,CAEA,UAAA,CAEA,wCACI,iBAAA,CAEA,YAAA,CACA,sBAAA,CACA,kBAAA,CAEA,UAAA,CACA,WAAA,CACA,SAAA,CAIJ,uCACI,iBAAA,CACA,iBAAA,CACA,QAAA,CACA,SAAA,CAEA,sBAAA,CAEA,cAAA,CACA,eAAA,CACA,gBAAA,CAEA,SAAA,CACA,mCAAA,CAEA,gDACI,SAAA,CAKR,uCACI,iBAAA,CACA,QAAA,CACA,eAAA,CAEA,YAAA,CACA,sBAAA,CACA,kBAAA,CAEA,wBAAA,CAEA,UAAA,CACA,SAAA,CAGA,wBAAA,CACA,aAAA,CAEA,kCAAA,CACA,iBAAA,CAEA,kBAAA,CACA,UAAA,CAEA,yCAAA,CAEA,6FAEI,UAAA,CACA,WAAA,CAEA,wBAAA,CAMZ,mCACI,SAAA,CACA,2EACI,mCAAA,CACA,eAAA,CACA,qCAAA,CACA,sBAAA,CAEA,yBANJ,2EAOQ,mCAAA,CACA,sCAAA,CAAA,CAIR,0CACI,aAAA,CAEJ,wCACI,aAAA",sourcesContent:['@use \'@app/styles/mixins.scss\' as *;\r\n\r\n.interval-slider {\r\n\r\n    background-color: #f4f5f9;\r\n    padding: 0 calcFluid(20px, 160px) 0 calcFluid(20px, 320px);\r\n\r\n    &__content {\r\n        position: relative;\r\n        \r\n        max-height: max-content;\r\n\r\n        padding-bottom: calcFluid(13px, 100px);\r\n\r\n        color: rgba(66, 86, 122, 1);\r\n\r\n        user-select: none;\r\n    \r\n        @media (min-width: 768px) {\r\n            border-right: 1px solid rgba(66, 86, 122, .1);\r\n            border-left: 1px solid rgba(66, 86, 122, .1);\r\n\r\n            &::before {\r\n                content: "";\r\n                position: absolute;\r\n                right: 0;\r\n                left: 0;\r\n        \r\n                background: rgba(66, 86, 122, 1);\r\n                opacity: .1;\r\n        \r\n                width: 1px;\r\n                height: 100%;\r\n        \r\n                margin: 0 auto;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n    &__title {\r\n        width: min-content;\r\n\r\n        padding-top: calcFluid(59px, 170px);\r\n        margin-bottom: calcFluid(146px, 176px);\r\n\r\n        &--text {\r\n            position: relative;\r\n\r\n            font-size: calcFluid(20px, 56px);\r\n            font-weight: 700;\r\n            line-height: calcFluid(24px, 68px);\r\n\r\n\r\n            @media (min-width: 768px) {\r\n                padding-left: calcFluid(0px, 80px);\r\n                &::before {\r\n                    content: "";\r\n                    position: absolute;\r\n                    top: 0;\r\n                    left: 0;\r\n                    width: 5px;\r\n                    height: 100%;\r\n                    background: linear-gradient(180deg, #5d5fef, #ef5da8);\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    &_wrapper {\r\n        position: relative;\r\n        \r\n        display: flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n        flex-direction: column;\r\n\r\n        width: 100%;\r\n\r\n        pointer-events: none;\r\n\r\n        margin-bottom: calcFluid(100px, 217px);\r\n\r\n        @media (max-width: 768px) {\r\n            margin-bottom: calcFluid(212px, 217px);\r\n        }\r\n    \r\n        &::after {\r\n            position: absolute;\r\n            width: 100%;\r\n            height: 1px;\r\n\r\n            @media (min-width: 768px) {\r\n                content: "";\r\n                position: absolute;\r\n                background: rgba(66, 86, 122, 1);\r\n                opacity: .1;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    &_pagination {\r\n        @media (max-width: 768px) {\r\n            display: flex;\r\n            align-items: center;\r\n            gap: 10px;\r\n        \r\n            margin-left: calcFluid(40px, 80px);\r\n        \r\n            .swiper-pagination-bullet {\r\n                display: inline-block;\r\n                width: 6px;\r\n                height: 6px;\r\n        \r\n                background-color: rgba(66, 86, 122, 1);\r\n                border-radius: 50%;\r\n        \r\n                opacity: .4;\r\n                transition: opacity .5s ease-in-out;\r\n        \r\n                &-active {\r\n                    opacity: 1;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    &_navigation {\r\n        display: flex;\r\n        \r\n        \r\n        padding-left: calcFluid(0px, 80px);\r\n        margin-bottom: calcFluid(0px, 56px);\r\n\r\n        &__wrapper {\r\n            display: flex;\r\n            flex-direction: column;\r\n        \r\n            gap: 20px;\r\n        }\r\n\r\n        &__progress {}\r\n\r\n        &__controls {\r\n            display: flex;\r\n    \r\n            gap: 20px;\r\n    \r\n            &--arrow {\r\n                cursor: pointer;\r\n    \r\n                display: flex;\r\n                justify-content: center;\r\n                align-items: center;\r\n    \r\n                width: calcFluid(20px, 50px);\r\n                height: calcFluid(20px, 50px);\r\n    \r\n                border-radius: 50%;\r\n                border: 1px solid rgba(66, 86, 122, 0.5);\r\n\r\n                opacity: 1;\r\n                transition: opacity .1s ease-in-out;\r\n                \r\n                svg {\r\n                    stroke: #42567A;\r\n\r\n                    @media (max-width: 768px) {\r\n                        width: 25%;\r\n                    }\r\n                }\r\n    \r\n                &.--next {\r\n                    svg {\r\n                        transform: rotate(180deg);\r\n                    }\r\n                }\r\n\r\n                &.--disable {\r\n                    opacity: .5;\r\n                }\r\n    \r\n                &.--prev {}\r\n            }\r\n        }\r\n    }\r\n    \r\n\r\n\r\n    &_slider {\r\n        pointer-events: all;\r\n\r\n        position: relative;\r\n        display: flex;\r\n\r\n        width: 100%;\r\n\r\n        padding: 0 calcFluid(0px, 160px) 0 calcFluid(0px, 80px);\r\n\r\n        transform: translateY(0);\r\n        opacity: 1;\r\n\r\n        transition: all .1s ease-in-out;\r\n\r\n        @media (max-width: 768px) {\r\n            position: absolute;\r\n            top: calcFluid(20px, 60px);\r\n            flex-direction: column;\r\n\r\n            // border-top: 1px solid rgba(199, 205, 217, 1);\r\n\r\n            &--title {\r\n                font-size: calcFluid(16px, 25px);\r\n                font-weight: 700;\r\n                line-height: calcFluid(20px, 30px);\r\n\r\n                padding-bottom: 15px;\r\n                margin-bottom: 20px;\r\n                border-bottom: 1px solid rgba(199, 205, 217, 1);\r\n            }\r\n        }\r\n\r\n        &.--hide {\r\n            transform: translateY(5px);\r\n            opacity: 0;\r\n        }\r\n\r\n        &__container {\r\n            width: 100%;\r\n        }\r\n\r\n        &__arrow {\r\n            position: absolute;\r\n            bottom: 50%;\r\n            left: 20px;\r\n\r\n            display: flex;\r\n            justify-content: center;\r\n            align-items: center;\r\n\r\n            width: 40px;\r\n            height: 40px;\r\n\r\n            box-shadow: 0px 0px 15px 0px rgba(56, 119, 238, 0.1);\r\n            border-radius: 50%;\r\n            opacity: 1;\r\n            background-color: #fff;\r\n\r\n            transition: opacity .1s ease-in-out;\r\n\r\n\r\n            svg {\r\n                stroke: rgba(56, 119, 238, 1);\r\n            }\r\n\r\n            &.--next {\r\n                left: auto;\r\n                right: 40px;\r\n\r\n                transform: rotate(180deg);\r\n            }\r\n\r\n            &.swiper-button-disabled {\r\n                opacity: 0;\r\n            }\r\n\r\n            @media (max-width: 768px) {\r\n                display: none;\r\n            }\r\n        }\r\n\r\n        &__slide {\r\n            display: flex;\r\n            flex-direction: column;\r\n\r\n            gap: 15px;\r\n\r\n            height: 135px;\r\n\r\n            \r\n\r\n            &--title {\r\n                font-family: \'Bebas Neue\';\r\n                font-size: calcFluid(16px, 25px);\r\n\r\n                line-height: calcFluid(20px, 30px);\r\n\r\n                color: rgba(56, 119, 238, 1);\r\n                width: fit-content;\r\n            }\r\n\r\n            &--text {\r\n                font-size: calcFluid(14px, 20px);\r\n                line-height: calcFluid(20px, 30px);\r\n\r\n                width: fit-content;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n    &_spinner {\r\n        position: absolute;\r\n        pointer-events: none;\r\n\r\n        display: flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n\r\n        height: 100%;\r\n\r\n        @media (max-width: 1600px) {\r\n            scale: .8;\r\n            @media (max-width: 1400px) {\r\n                scale: .7;\r\n                @media (max-width: 1024px) {\r\n                    scale: .65;\r\n                    @media (max-width: 768px) {\r\n                        scale: 1;\r\n                        bottom: calcFluid(57px, 80px)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        &__container {\r\n            display: none;\r\n\r\n            position: absolute;\r\n\r\n            width: 530px;\r\n            height: 530px;\r\n\r\n            @media (min-width: 768px) {\r\n                display: block;\r\n                &::before {\r\n                    content: "";\r\n                    position: absolute;\r\n            \r\n                    width: 100%;\r\n                    height: 100%;\r\n            \r\n                    border-radius: 50%;\r\n                    border: 1px solid rgba(66, 86, 122, .2);\r\n                }\r\n            }\r\n        }\r\n\r\n        &__point {\r\n            $point: &;\r\n            display: flex;\r\n            justify-content: center;\r\n        \r\n            position: absolute;\r\n\r\n            width: 101%;\r\n            height: 101%;\r\n\r\n            z-index: 10;\r\n\r\n            &-wrapper {\r\n                position: relative;\r\n\r\n                display: flex;\r\n                justify-content: center;\r\n                align-items: center;\r\n\r\n                width: 56px;\r\n                height: 56px;\r\n                top: -26px;\r\n            }\r\n\r\n\r\n            &--title {\r\n                position: absolute;\r\n                width: max-content;\r\n                top: 10px;\r\n                left: 70px;\r\n\r\n                transform-origin: 0 50%;\r\n\r\n                font-size: 20px;\r\n                font-weight: 700;\r\n                line-height: 30px;\r\n\r\n                opacity: 0;\r\n                transition: opacity .25s ease-in-out;\r\n\r\n                &.--active {\r\n                    opacity: 1;\r\n                }\r\n            }\r\n\r\n\r\n            &--index {\r\n                position: relative;\r\n                top: -2px;\r\n                overflow: hidden;\r\n\r\n                display: flex;\r\n                justify-content: center;\r\n                align-items: center;\r\n\r\n                transform-origin: 50% 50%;\r\n\r\n                height: 9px;\r\n                width: 9px;\r\n\r\n                \r\n                background-color: rgba(66, 86, 122, 1);\r\n                color: rgba(66, 86, 122, 1);\r\n\r\n                border: 1px solid rgba(48, 62, 88, .5);\r\n                border-radius: 50%;\r\n                \r\n                pointer-events: all;\r\n                z-index: 11;\r\n\r\n                transition: all .25s ease-in-out, transform;\r\n\r\n                &:hover,\r\n                &.--active {\r\n                    width: 56px;\r\n                    height: 56px;\r\n\r\n                    background-color: rgb(245, 246, 250);\r\n                }\r\n            }\r\n            \r\n        }\r\n\r\n        &__interval {\r\n            z-index: 5;\r\n            &, span {\r\n                font-size: calcFluid(100px, 200px);\r\n                font-weight: 700;\r\n                line-height: calcFluid(120px, 160px);\r\n                letter-spacing: -0.02em;\r\n\r\n                @media (max-width: 768px) {\r\n                    font-size: calcFluid(56px, 200px);\r\n                    line-height: calcFluid(72px, 160px);\r\n                }\r\n            }\r\n\r\n            &--start {\r\n                color: #5D5FEF;\r\n            }\r\n            &--end {\r\n                color: #EF5DA8;\r\n            }\r\n        }\r\n    }\r\n}'],sourceRoot:""}]);const s=l},870:(e,t,n)=>{n.d(t,{A:()=>p});var r=n(354),i=n.n(r),a=n(314),l=n.n(a),s=n(417),o=n.n(s),u=new URL(n(85),n.b),c=l()(i()),d=o()(u);c.push([e.id,`/**\n * Swiper 11.1.15\n * Most modern mobile touch slider and framework with hardware accelerated transitions\n * https://swiperjs.com\n *\n * Copyright 2014-2024 Vladimir Kharlampidi\n *\n * Released under the MIT License\n *\n * Released on: November 18, 2024\n */\n\n/* FONT_START */\n@font-face {\n  font-family: 'swiper-icons';\n  src: url(${d});\n  font-weight: 400;\n  font-style: normal;\n}\n/* FONT_END */\n:root {\n  --swiper-theme-color: #007aff;\n  /*\n  --swiper-preloader-color: var(--swiper-theme-color);\n  --swiper-wrapper-transition-timing-function: initial;\n  */\n}\n:host {\n  position: relative;\n  display: block;\n  margin-left: auto;\n  margin-right: auto;\n  z-index: 1;\n}\n.swiper {\n  margin-left: auto;\n  margin-right: auto;\n  position: relative;\n  overflow: hidden;\n  list-style: none;\n  padding: 0;\n  /* Fix of Webkit flickering */\n  z-index: 1;\n  display: block;\n}\n.swiper-vertical > .swiper-wrapper {\n  flex-direction: column;\n}\n.swiper-wrapper {\n  position: relative;\n  width: 100%;\n  height: 100%;\n  z-index: 1;\n  display: flex;\n  transition-property: transform;\n  transition-timing-function: var(--swiper-wrapper-transition-timing-function, initial);\n  box-sizing: content-box;\n}\n.swiper-android .swiper-slide,\n.swiper-ios .swiper-slide,\n.swiper-wrapper {\n  transform: translate3d(0px, 0, 0);\n}\n.swiper-horizontal {\n  touch-action: pan-y;\n}\n.swiper-vertical {\n  touch-action: pan-x;\n}\n.swiper-slide {\n  flex-shrink: 0;\n  width: 100%;\n  height: 100%;\n  position: relative;\n  transition-property: transform;\n  display: block;\n}\n.swiper-slide-invisible-blank {\n  visibility: hidden;\n}\n/* Auto Height */\n.swiper-autoheight,\n.swiper-autoheight .swiper-slide {\n  height: auto;\n}\n.swiper-autoheight .swiper-wrapper {\n  align-items: flex-start;\n  transition-property: transform, height;\n}\n.swiper-backface-hidden .swiper-slide {\n  transform: translateZ(0);\n  -webkit-backface-visibility: hidden;\n          backface-visibility: hidden;\n}\n/* 3D Effects */\n.swiper-3d.swiper-css-mode .swiper-wrapper {\n  perspective: 1200px;\n}\n.swiper-3d .swiper-wrapper {\n  transform-style: preserve-3d;\n}\n.swiper-3d {\n  perspective: 1200px;\n}\n.swiper-3d .swiper-slide,\n.swiper-3d .swiper-cube-shadow {\n  transform-style: preserve-3d;\n}\n/* CSS Mode */\n.swiper-css-mode > .swiper-wrapper {\n  overflow: auto;\n  scrollbar-width: none;\n  /* For Firefox */\n  -ms-overflow-style: none;\n  /* For Internet Explorer and Edge */\n}\n.swiper-css-mode > .swiper-wrapper::-webkit-scrollbar {\n  display: none;\n}\n.swiper-css-mode > .swiper-wrapper > .swiper-slide {\n  scroll-snap-align: start start;\n}\n.swiper-css-mode.swiper-horizontal > .swiper-wrapper {\n  scroll-snap-type: x mandatory;\n}\n.swiper-css-mode.swiper-vertical > .swiper-wrapper {\n  scroll-snap-type: y mandatory;\n}\n.swiper-css-mode.swiper-free-mode > .swiper-wrapper {\n  scroll-snap-type: none;\n}\n.swiper-css-mode.swiper-free-mode > .swiper-wrapper > .swiper-slide {\n  scroll-snap-align: none;\n}\n.swiper-css-mode.swiper-centered > .swiper-wrapper::before {\n  content: '';\n  flex-shrink: 0;\n  order: 9999;\n}\n.swiper-css-mode.swiper-centered > .swiper-wrapper > .swiper-slide {\n  scroll-snap-align: center center;\n  scroll-snap-stop: always;\n}\n.swiper-css-mode.swiper-centered.swiper-horizontal > .swiper-wrapper > .swiper-slide:first-child {\n  margin-inline-start: var(--swiper-centered-offset-before);\n}\n.swiper-css-mode.swiper-centered.swiper-horizontal > .swiper-wrapper::before {\n  height: 100%;\n  min-height: 1px;\n  width: var(--swiper-centered-offset-after);\n}\n.swiper-css-mode.swiper-centered.swiper-vertical > .swiper-wrapper > .swiper-slide:first-child {\n  margin-block-start: var(--swiper-centered-offset-before);\n}\n.swiper-css-mode.swiper-centered.swiper-vertical > .swiper-wrapper::before {\n  width: 100%;\n  min-width: 1px;\n  height: var(--swiper-centered-offset-after);\n}\n/* Slide styles start */\n/* 3D Shadows */\n.swiper-3d .swiper-slide-shadow,\n.swiper-3d .swiper-slide-shadow-left,\n.swiper-3d .swiper-slide-shadow-right,\n.swiper-3d .swiper-slide-shadow-top,\n.swiper-3d .swiper-slide-shadow-bottom,\n.swiper-3d .swiper-slide-shadow,\n.swiper-3d .swiper-slide-shadow-left,\n.swiper-3d .swiper-slide-shadow-right,\n.swiper-3d .swiper-slide-shadow-top,\n.swiper-3d .swiper-slide-shadow-bottom {\n  position: absolute;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  pointer-events: none;\n  z-index: 10;\n}\n.swiper-3d .swiper-slide-shadow {\n  background: rgba(0, 0, 0, 0.15);\n}\n.swiper-3d .swiper-slide-shadow-left {\n  background-image: linear-gradient(to left, rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0));\n}\n.swiper-3d .swiper-slide-shadow-right {\n  background-image: linear-gradient(to right, rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0));\n}\n.swiper-3d .swiper-slide-shadow-top {\n  background-image: linear-gradient(to top, rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0));\n}\n.swiper-3d .swiper-slide-shadow-bottom {\n  background-image: linear-gradient(to bottom, rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0));\n}\n.swiper-lazy-preloader {\n  width: 42px;\n  height: 42px;\n  position: absolute;\n  left: 50%;\n  top: 50%;\n  margin-left: -21px;\n  margin-top: -21px;\n  z-index: 10;\n  transform-origin: 50%;\n  box-sizing: border-box;\n  border: 4px solid var(--swiper-preloader-color, var(--swiper-theme-color));\n  border-radius: 50%;\n  border-top-color: transparent;\n}\n.swiper:not(.swiper-watch-progress) .swiper-lazy-preloader,\n.swiper-watch-progress .swiper-slide-visible .swiper-lazy-preloader {\n  animation: swiper-preloader-spin 1s infinite linear;\n}\n.swiper-lazy-preloader-white {\n  --swiper-preloader-color: #fff;\n}\n.swiper-lazy-preloader-black {\n  --swiper-preloader-color: #000;\n}\n@keyframes swiper-preloader-spin {\n  0% {\n    transform: rotate(0deg);\n  }\n  100% {\n    transform: rotate(360deg);\n  }\n}\n/* Slide styles end */\n`,"",{version:3,sources:["webpack://./node_modules/swiper/swiper.css"],names:[],mappings:"AAAA;;;;;;;;;;EAUE;;AAEF,eAAe;AACf;EACE,2BAA2B;EAC3B,4CAA6rE;EAC7rE,gBAAgB;EAChB,kBAAkB;AACpB;AACA,aAAa;AACb;EACE,6BAA6B;EAC7B;;;GAGC;AACH;AACA;EACE,kBAAkB;EAClB,cAAc;EACd,iBAAiB;EACjB,kBAAkB;EAClB,UAAU;AACZ;AACA;EACE,iBAAiB;EACjB,kBAAkB;EAClB,kBAAkB;EAClB,gBAAgB;EAChB,gBAAgB;EAChB,UAAU;EACV,6BAA6B;EAC7B,UAAU;EACV,cAAc;AAChB;AACA;EACE,sBAAsB;AACxB;AACA;EACE,kBAAkB;EAClB,WAAW;EACX,YAAY;EACZ,UAAU;EACV,aAAa;EACb,8BAA8B;EAC9B,qFAAqF;EACrF,uBAAuB;AACzB;AACA;;;EAGE,iCAAiC;AACnC;AACA;EACE,mBAAmB;AACrB;AACA;EACE,mBAAmB;AACrB;AACA;EACE,cAAc;EACd,WAAW;EACX,YAAY;EACZ,kBAAkB;EAClB,8BAA8B;EAC9B,cAAc;AAChB;AACA;EACE,kBAAkB;AACpB;AACA,gBAAgB;AAChB;;EAEE,YAAY;AACd;AACA;EACE,uBAAuB;EACvB,sCAAsC;AACxC;AACA;EACE,wBAAwB;EACxB,mCAAmC;UAC3B,2BAA2B;AACrC;AACA,eAAe;AACf;EACE,mBAAmB;AACrB;AACA;EACE,4BAA4B;AAC9B;AACA;EACE,mBAAmB;AACrB;AACA;;EAEE,4BAA4B;AAC9B;AACA,aAAa;AACb;EACE,cAAc;EACd,qBAAqB;EACrB,gBAAgB;EAChB,wBAAwB;EACxB,mCAAmC;AACrC;AACA;EACE,aAAa;AACf;AACA;EACE,8BAA8B;AAChC;AACA;EACE,6BAA6B;AAC/B;AACA;EACE,6BAA6B;AAC/B;AACA;EACE,sBAAsB;AACxB;AACA;EACE,uBAAuB;AACzB;AACA;EACE,WAAW;EACX,cAAc;EACd,WAAW;AACb;AACA;EACE,gCAAgC;EAChC,wBAAwB;AAC1B;AACA;EACE,yDAAyD;AAC3D;AACA;EACE,YAAY;EACZ,eAAe;EACf,0CAA0C;AAC5C;AACA;EACE,wDAAwD;AAC1D;AACA;EACE,WAAW;EACX,cAAc;EACd,2CAA2C;AAC7C;AACA,uBAAuB;AACvB,eAAe;AACf;;;;;;;;;;EAUE,kBAAkB;EAClB,OAAO;EACP,MAAM;EACN,WAAW;EACX,YAAY;EACZ,oBAAoB;EACpB,WAAW;AACb;AACA;EACE,+BAA+B;AACjC;AACA;EACE,gFAAgF;AAClF;AACA;EACE,iFAAiF;AACnF;AACA;EACE,+EAA+E;AACjF;AACA;EACE,kFAAkF;AACpF;AACA;EACE,WAAW;EACX,YAAY;EACZ,kBAAkB;EAClB,SAAS;EACT,QAAQ;EACR,kBAAkB;EAClB,iBAAiB;EACjB,WAAW;EACX,qBAAqB;EACrB,sBAAsB;EACtB,0EAA0E;EAC1E,kBAAkB;EAClB,6BAA6B;AAC/B;AACA;;EAEE,mDAAmD;AACrD;AACA;EACE,8BAA8B;AAChC;AACA;EACE,8BAA8B;AAChC;AACA;EACE;IACE,uBAAuB;EACzB;EACA;IACE,yBAAyB;EAC3B;AACF;AACA,qBAAqB",sourcesContent:["/**\n * Swiper 11.1.15\n * Most modern mobile touch slider and framework with hardware accelerated transitions\n * https://swiperjs.com\n *\n * Copyright 2014-2024 Vladimir Kharlampidi\n *\n * Released under the MIT License\n *\n * Released on: November 18, 2024\n */\n\n/* FONT_START */\n@font-face {\n  font-family: 'swiper-icons';\n  src: url('data:application/font-woff;charset=utf-8;base64, d09GRgABAAAAAAZgABAAAAAADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGRlRNAAAGRAAAABoAAAAci6qHkUdERUYAAAWgAAAAIwAAACQAYABXR1BPUwAABhQAAAAuAAAANuAY7+xHU1VCAAAFxAAAAFAAAABm2fPczU9TLzIAAAHcAAAASgAAAGBP9V5RY21hcAAAAkQAAACIAAABYt6F0cBjdnQgAAACzAAAAAQAAAAEABEBRGdhc3AAAAWYAAAACAAAAAj//wADZ2x5ZgAAAywAAADMAAAD2MHtryVoZWFkAAABbAAAADAAAAA2E2+eoWhoZWEAAAGcAAAAHwAAACQC9gDzaG10eAAAAigAAAAZAAAArgJkABFsb2NhAAAC0AAAAFoAAABaFQAUGG1heHAAAAG8AAAAHwAAACAAcABAbmFtZQAAA/gAAAE5AAACXvFdBwlwb3N0AAAFNAAAAGIAAACE5s74hXjaY2BkYGAAYpf5Hu/j+W2+MnAzMYDAzaX6QjD6/4//Bxj5GA8AuRwMYGkAPywL13jaY2BkYGA88P8Agx4j+/8fQDYfA1AEBWgDAIB2BOoAeNpjYGRgYNBh4GdgYgABEMnIABJzYNADCQAACWgAsQB42mNgYfzCOIGBlYGB0YcxjYGBwR1Kf2WQZGhhYGBiYGVmgAFGBiQQkOaawtDAoMBQxXjg/wEGPcYDDA4wNUA2CCgwsAAAO4EL6gAAeNpj2M0gyAACqxgGNWBkZ2D4/wMA+xkDdgAAAHjaY2BgYGaAYBkGRgYQiAHyGMF8FgYHIM3DwMHABGQrMOgyWDLEM1T9/w8UBfEMgLzE////P/5//f/V/xv+r4eaAAeMbAxwIUYmIMHEgKYAYjUcsDAwsLKxc3BycfPw8jEQA/gZBASFhEVExcQlJKWkZWTl5BUUlZRVVNXUNTQZBgMAAMR+E+gAEQFEAAAAKgAqACoANAA+AEgAUgBcAGYAcAB6AIQAjgCYAKIArAC2AMAAygDUAN4A6ADyAPwBBgEQARoBJAEuATgBQgFMAVYBYAFqAXQBfgGIAZIBnAGmAbIBzgHsAAB42u2NMQ6CUAyGW568x9AneYYgm4MJbhKFaExIOAVX8ApewSt4Bic4AfeAid3VOBixDxfPYEza5O+Xfi04YADggiUIULCuEJK8VhO4bSvpdnktHI5QCYtdi2sl8ZnXaHlqUrNKzdKcT8cjlq+rwZSvIVczNiezsfnP/uznmfPFBNODM2K7MTQ45YEAZqGP81AmGGcF3iPqOop0r1SPTaTbVkfUe4HXj97wYE+yNwWYxwWu4v1ugWHgo3S1XdZEVqWM7ET0cfnLGxWfkgR42o2PvWrDMBSFj/IHLaF0zKjRgdiVMwScNRAoWUoH78Y2icB/yIY09An6AH2Bdu/UB+yxopYshQiEvnvu0dURgDt8QeC8PDw7Fpji3fEA4z/PEJ6YOB5hKh4dj3EvXhxPqH/SKUY3rJ7srZ4FZnh1PMAtPhwP6fl2PMJMPDgeQ4rY8YT6Gzao0eAEA409DuggmTnFnOcSCiEiLMgxCiTI6Cq5DZUd3Qmp10vO0LaLTd2cjN4fOumlc7lUYbSQcZFkutRG7g6JKZKy0RmdLY680CDnEJ+UMkpFFe1RN7nxdVpXrC4aTtnaurOnYercZg2YVmLN/d/gczfEimrE/fs/bOuq29Zmn8tloORaXgZgGa78yO9/cnXm2BpaGvq25Dv9S4E9+5SIc9PqupJKhYFSSl47+Qcr1mYNAAAAeNptw0cKwkAAAMDZJA8Q7OUJvkLsPfZ6zFVERPy8qHh2YER+3i/BP83vIBLLySsoKimrqKqpa2hp6+jq6RsYGhmbmJqZSy0sraxtbO3sHRydnEMU4uR6yx7JJXveP7WrDycAAAAAAAH//wACeNpjYGRgYOABYhkgZgJCZgZNBkYGLQZtIJsFLMYAAAw3ALgAeNolizEKgDAQBCchRbC2sFER0YD6qVQiBCv/H9ezGI6Z5XBAw8CBK/m5iQQVauVbXLnOrMZv2oLdKFa8Pjuru2hJzGabmOSLzNMzvutpB3N42mNgZGBg4GKQYzBhYMxJLMlj4GBgAYow/P/PAJJhLM6sSoWKfWCAAwDAjgbRAAB42mNgYGBkAIIbCZo5IPrmUn0hGA0AO8EFTQAA');\n  font-weight: 400;\n  font-style: normal;\n}\n/* FONT_END */\n:root {\n  --swiper-theme-color: #007aff;\n  /*\n  --swiper-preloader-color: var(--swiper-theme-color);\n  --swiper-wrapper-transition-timing-function: initial;\n  */\n}\n:host {\n  position: relative;\n  display: block;\n  margin-left: auto;\n  margin-right: auto;\n  z-index: 1;\n}\n.swiper {\n  margin-left: auto;\n  margin-right: auto;\n  position: relative;\n  overflow: hidden;\n  list-style: none;\n  padding: 0;\n  /* Fix of Webkit flickering */\n  z-index: 1;\n  display: block;\n}\n.swiper-vertical > .swiper-wrapper {\n  flex-direction: column;\n}\n.swiper-wrapper {\n  position: relative;\n  width: 100%;\n  height: 100%;\n  z-index: 1;\n  display: flex;\n  transition-property: transform;\n  transition-timing-function: var(--swiper-wrapper-transition-timing-function, initial);\n  box-sizing: content-box;\n}\n.swiper-android .swiper-slide,\n.swiper-ios .swiper-slide,\n.swiper-wrapper {\n  transform: translate3d(0px, 0, 0);\n}\n.swiper-horizontal {\n  touch-action: pan-y;\n}\n.swiper-vertical {\n  touch-action: pan-x;\n}\n.swiper-slide {\n  flex-shrink: 0;\n  width: 100%;\n  height: 100%;\n  position: relative;\n  transition-property: transform;\n  display: block;\n}\n.swiper-slide-invisible-blank {\n  visibility: hidden;\n}\n/* Auto Height */\n.swiper-autoheight,\n.swiper-autoheight .swiper-slide {\n  height: auto;\n}\n.swiper-autoheight .swiper-wrapper {\n  align-items: flex-start;\n  transition-property: transform, height;\n}\n.swiper-backface-hidden .swiper-slide {\n  transform: translateZ(0);\n  -webkit-backface-visibility: hidden;\n          backface-visibility: hidden;\n}\n/* 3D Effects */\n.swiper-3d.swiper-css-mode .swiper-wrapper {\n  perspective: 1200px;\n}\n.swiper-3d .swiper-wrapper {\n  transform-style: preserve-3d;\n}\n.swiper-3d {\n  perspective: 1200px;\n}\n.swiper-3d .swiper-slide,\n.swiper-3d .swiper-cube-shadow {\n  transform-style: preserve-3d;\n}\n/* CSS Mode */\n.swiper-css-mode > .swiper-wrapper {\n  overflow: auto;\n  scrollbar-width: none;\n  /* For Firefox */\n  -ms-overflow-style: none;\n  /* For Internet Explorer and Edge */\n}\n.swiper-css-mode > .swiper-wrapper::-webkit-scrollbar {\n  display: none;\n}\n.swiper-css-mode > .swiper-wrapper > .swiper-slide {\n  scroll-snap-align: start start;\n}\n.swiper-css-mode.swiper-horizontal > .swiper-wrapper {\n  scroll-snap-type: x mandatory;\n}\n.swiper-css-mode.swiper-vertical > .swiper-wrapper {\n  scroll-snap-type: y mandatory;\n}\n.swiper-css-mode.swiper-free-mode > .swiper-wrapper {\n  scroll-snap-type: none;\n}\n.swiper-css-mode.swiper-free-mode > .swiper-wrapper > .swiper-slide {\n  scroll-snap-align: none;\n}\n.swiper-css-mode.swiper-centered > .swiper-wrapper::before {\n  content: '';\n  flex-shrink: 0;\n  order: 9999;\n}\n.swiper-css-mode.swiper-centered > .swiper-wrapper > .swiper-slide {\n  scroll-snap-align: center center;\n  scroll-snap-stop: always;\n}\n.swiper-css-mode.swiper-centered.swiper-horizontal > .swiper-wrapper > .swiper-slide:first-child {\n  margin-inline-start: var(--swiper-centered-offset-before);\n}\n.swiper-css-mode.swiper-centered.swiper-horizontal > .swiper-wrapper::before {\n  height: 100%;\n  min-height: 1px;\n  width: var(--swiper-centered-offset-after);\n}\n.swiper-css-mode.swiper-centered.swiper-vertical > .swiper-wrapper > .swiper-slide:first-child {\n  margin-block-start: var(--swiper-centered-offset-before);\n}\n.swiper-css-mode.swiper-centered.swiper-vertical > .swiper-wrapper::before {\n  width: 100%;\n  min-width: 1px;\n  height: var(--swiper-centered-offset-after);\n}\n/* Slide styles start */\n/* 3D Shadows */\n.swiper-3d .swiper-slide-shadow,\n.swiper-3d .swiper-slide-shadow-left,\n.swiper-3d .swiper-slide-shadow-right,\n.swiper-3d .swiper-slide-shadow-top,\n.swiper-3d .swiper-slide-shadow-bottom,\n.swiper-3d .swiper-slide-shadow,\n.swiper-3d .swiper-slide-shadow-left,\n.swiper-3d .swiper-slide-shadow-right,\n.swiper-3d .swiper-slide-shadow-top,\n.swiper-3d .swiper-slide-shadow-bottom {\n  position: absolute;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  pointer-events: none;\n  z-index: 10;\n}\n.swiper-3d .swiper-slide-shadow {\n  background: rgba(0, 0, 0, 0.15);\n}\n.swiper-3d .swiper-slide-shadow-left {\n  background-image: linear-gradient(to left, rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0));\n}\n.swiper-3d .swiper-slide-shadow-right {\n  background-image: linear-gradient(to right, rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0));\n}\n.swiper-3d .swiper-slide-shadow-top {\n  background-image: linear-gradient(to top, rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0));\n}\n.swiper-3d .swiper-slide-shadow-bottom {\n  background-image: linear-gradient(to bottom, rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0));\n}\n.swiper-lazy-preloader {\n  width: 42px;\n  height: 42px;\n  position: absolute;\n  left: 50%;\n  top: 50%;\n  margin-left: -21px;\n  margin-top: -21px;\n  z-index: 10;\n  transform-origin: 50%;\n  box-sizing: border-box;\n  border: 4px solid var(--swiper-preloader-color, var(--swiper-theme-color));\n  border-radius: 50%;\n  border-top-color: transparent;\n}\n.swiper:not(.swiper-watch-progress) .swiper-lazy-preloader,\n.swiper-watch-progress .swiper-slide-visible .swiper-lazy-preloader {\n  animation: swiper-preloader-spin 1s infinite linear;\n}\n.swiper-lazy-preloader-white {\n  --swiper-preloader-color: #fff;\n}\n.swiper-lazy-preloader-black {\n  --swiper-preloader-color: #000;\n}\n@keyframes swiper-preloader-spin {\n  0% {\n    transform: rotate(0deg);\n  }\n  100% {\n    transform: rotate(360deg);\n  }\n}\n/* Slide styles end */\n"],sourceRoot:""}]);const p=c},455:(e,t,n)=>{n.d(t,{A:()=>s});var r=n(354),i=n.n(r),a=n(314),l=n.n(a)()(i());l.push([e.id,"@function calcFluid($w-min, $w-max, $base: 0, $v-min: 320px, $v-max: 1920px) {\n    $k: calc(($w-max - $w-min) / ($v-max - $v-min));\n    $b: $w-min - $k * $v-min;\n\n    @if $base ==0 {\n        @return calc(#{$k} * 100vw + #{$b});\n    }\n\n    @else {\n        @return calc(#{$base} - (#{$k} * 100vw + #{$b}));\n    }\n}","",{version:3,sources:["webpack://./src/app/styles/mixins.scss"],names:[],mappings:"AAAA;IACI,+CAA+C;IAC/C,wBAAwB;;IAExB;QACI,mCAAmC;IACvC;;IAEA;QACI,gDAAgD;IACpD;AACJ",sourcesContent:["@function calcFluid($w-min, $w-max, $base: 0, $v-min: 320px, $v-max: 1920px) {\r\n    $k: calc(($w-max - $w-min) / ($v-max - $v-min));\r\n    $b: $w-min - $k * $v-min;\r\n\r\n    @if $base ==0 {\r\n        @return calc(#{$k} * 100vw + #{$b});\r\n    }\r\n\r\n    @else {\r\n        @return calc(#{$base} - (#{$k} * 100vw + #{$b}));\r\n    }\r\n}"],sourceRoot:""}]);const s=l},314:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,i,a){"string"==typeof e&&(e=[[null,e,void 0]]);var l={};if(r)for(var s=0;s<this.length;s++){var o=this[s][0];null!=o&&(l[o]=!0)}for(var u=0;u<e.length;u++){var c=[].concat(e[u]);r&&l[c[0]]||(void 0!==a&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=a),n&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=n):c[2]=n),i&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=i):c[4]="".concat(i)),t.push(c))}},t}},417:e=>{e.exports=function(e,t){return t||(t={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),t.hash&&(e+=t.hash),/["'() \t\n]|(%20)/.test(e)||t.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},354:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(i," */");return[t].concat([a]).join("\n")}return[t].join("\n")}},247:(e,t,n)=>{var r=n(982),i=n(540),a=n(961);function l(e){var t="https://react.dev/errors/"+e;if(1<arguments.length){t+="?args[]="+encodeURIComponent(arguments[1]);for(var n=2;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n])}return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}function s(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}var o=Symbol.for("react.element"),u=Symbol.for("react.transitional.element"),c=Symbol.for("react.portal"),d=Symbol.for("react.fragment"),p=Symbol.for("react.strict_mode"),f=Symbol.for("react.profiler"),h=Symbol.for("react.provider"),m=Symbol.for("react.consumer"),g=Symbol.for("react.context"),v=Symbol.for("react.forward_ref"),A=Symbol.for("react.suspense"),y=Symbol.for("react.suspense_list"),b=Symbol.for("react.memo"),w=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var _=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.tracing_marker");var C=Symbol.for("react.memo_cache_sentinel"),x=Symbol.iterator;function E(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=x&&e[x]||e["@@iterator"])?e:null}var S=Symbol.for("react.client.reference");function k(e){if(null==e)return null;if("function"==typeof e)return e.$$typeof===S?null:e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case d:return"Fragment";case c:return"Portal";case f:return"Profiler";case p:return"StrictMode";case A:return"Suspense";case y:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case g:return(e.displayName||"Context")+".Provider";case m:return(e._context.displayName||"Context")+".Consumer";case v:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case b:return null!==(t=e.displayName||null)?t:k(e.type)||"Memo";case w:t=e._payload,e=e._init;try{return k(e(t))}catch(e){}}return null}var T,P,B=i.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,M=Object.assign;function z(e){if(void 0===T)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);T=t&&t[1]||"",P=-1<e.stack.indexOf("\n    at")?" (<anonymous>)":-1<e.stack.indexOf("@")?"@unknown:0:0":""}return"\n"+T+e+P}var O=!1;function L(e,t){if(!e||O)return"";O=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{var r={DetermineComponentFrameRoot:function(){try{if(t){var n=function(){throw Error()};if(Object.defineProperty(n.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(n,[])}catch(e){var r=e}Reflect.construct(e,[],n)}else{try{n.call()}catch(e){r=e}e.call(n.prototype)}}else{try{throw Error()}catch(e){r=e}(n=e())&&"function"==typeof n.catch&&n.catch((function(){}))}}catch(e){if(e&&r&&"string"==typeof e.stack)return[e.stack,r.stack]}return[null,null]}};r.DetermineComponentFrameRoot.displayName="DetermineComponentFrameRoot";var i=Object.getOwnPropertyDescriptor(r.DetermineComponentFrameRoot,"name");i&&i.configurable&&Object.defineProperty(r.DetermineComponentFrameRoot,"name",{value:"DetermineComponentFrameRoot"});var a=r.DetermineComponentFrameRoot(),l=a[0],s=a[1];if(l&&s){var o=l.split("\n"),u=s.split("\n");for(i=r=0;r<o.length&&!o[r].includes("DetermineComponentFrameRoot");)r++;for(;i<u.length&&!u[i].includes("DetermineComponentFrameRoot");)i++;if(r===o.length||i===u.length)for(r=o.length-1,i=u.length-1;1<=r&&0<=i&&o[r]!==u[i];)i--;for(;1<=r&&0<=i;r--,i--)if(o[r]!==u[i]){if(1!==r||1!==i)do{if(r--,0>--i||o[r]!==u[i]){var c="\n"+o[r].replace(" at new "," at ");return e.displayName&&c.includes("<anonymous>")&&(c=c.replace("<anonymous>",e.displayName)),c}}while(1<=r&&0<=i);break}}}finally{O=!1,Error.prepareStackTrace=n}return(n=e?e.displayName||e.name:"")?z(n):""}function N(e){switch(e.tag){case 26:case 27:case 5:return z(e.type);case 16:return z("Lazy");case 13:return z("Suspense");case 19:return z("SuspenseList");case 0:case 15:return L(e.type,!1);case 11:return L(e.type.render,!1);case 1:return L(e.type,!0);default:return""}}function I(e){try{var t="";do{t+=N(e),e=e.return}while(e);return t}catch(e){return"\nError generating stack: "+e.message+"\n"+e.stack}}function D(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{!!(4098&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function F(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function R(e){if(D(e)!==e)throw Error(l(188))}function j(e){var t=e.tag;if(5===t||26===t||27===t||6===t)return e;for(e=e.child;null!==e;){if(null!==(t=j(e)))return t;e=e.sibling}return null}var G=Array.isArray,Y=a.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,U={pending:!1,data:null,method:null,action:null},$=[],V=-1;function H(e){return{current:e}}function W(e){0>V||(e.current=$[V],$[V]=null,V--)}function q(e,t){V++,$[V]=e.current,e.current=t}var Q=H(null),X=H(null),K=H(null),Z=H(null);function J(e,t){switch(q(K,t),q(X,e),q(Q,null),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)&&(t=t.namespaceURI)?Xc(t):0;break;default:if(t=(e=8===e?t.parentNode:t).tagName,e=e.namespaceURI)t=Kc(e=Xc(e),t);else switch(t){case"svg":t=1;break;case"math":t=2;break;default:t=0}}W(Q),q(Q,t)}function ee(){W(Q),W(X),W(K)}function te(e){null!==e.memoizedState&&q(Z,e);var t=Q.current,n=Kc(t,e.type);t!==n&&(q(X,e),q(Q,n))}function ne(e){X.current===e&&(W(Q),W(X)),Z.current===e&&(W(Z),Id._currentValue=U)}var re=Object.prototype.hasOwnProperty,ie=r.unstable_scheduleCallback,ae=r.unstable_cancelCallback,le=r.unstable_shouldYield,se=r.unstable_requestPaint,oe=r.unstable_now,ue=r.unstable_getCurrentPriorityLevel,ce=r.unstable_ImmediatePriority,de=r.unstable_UserBlockingPriority,pe=r.unstable_NormalPriority,fe=r.unstable_LowPriority,he=r.unstable_IdlePriority,me=r.log,ge=r.unstable_setDisableYieldValue,ve=null,Ae=null;function ye(e){if("function"==typeof me&&ge(e),Ae&&"function"==typeof Ae.setStrictMode)try{Ae.setStrictMode(ve,e)}catch(e){}}var be=Math.clz32?Math.clz32:function(e){return 0==(e>>>=0)?32:31-(we(e)/_e|0)|0},we=Math.log,_e=Math.LN2,Ce=128,xe=4194304;function Ee(e){var t=42&e;if(0!==t)return t;switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:return 64;case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194176&e;case 4194304:case 8388608:case 16777216:case 33554432:return 62914560&e;case 67108864:return 67108864;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 0;default:return e}}function Se(e,t){var n=e.pendingLanes;if(0===n)return 0;var r=0,i=e.suspendedLanes,a=e.pingedLanes,l=e.warmLanes;e=0!==e.finishedLanes;var s=134217727&n;return 0!==s?0!=(n=s&~i)?r=Ee(n):0!=(a&=s)?r=Ee(a):e||0!=(l=s&~l)&&(r=Ee(l)):0!=(s=n&~i)?r=Ee(s):0!==a?r=Ee(a):e||0!=(l=n&~l)&&(r=Ee(l)),0===r?0:0===t||t===r||t&i||!((i=r&-r)>=(l=t&-t)||32===i&&4194176&l)?r:t}function ke(e,t){return!(e.pendingLanes&~(e.suspendedLanes&~e.pingedLanes)&t)}function Te(e,t){switch(e){case 1:case 2:case 4:case 8:return t+250;case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;default:return-1}}function Pe(){var e=Ce;return!(4194176&(Ce<<=1))&&(Ce=128),e}function Be(){var e=xe;return!(62914560&(xe<<=1))&&(xe=4194304),e}function Me(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function ze(e,t){e.pendingLanes|=t,268435456!==t&&(e.suspendedLanes=0,e.pingedLanes=0,e.warmLanes=0)}function Oe(e,t,n){e.pendingLanes|=t,e.suspendedLanes&=~t;var r=31-be(t);e.entangledLanes|=t,e.entanglements[r]=1073741824|e.entanglements[r]|4194218&n}function Le(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var r=31-be(n),i=1<<r;i&t|e[r]&t&&(e[r]|=t),n&=~i}}function Ne(e){return 2<(e&=-e)?8<e?134217727&e?32:268435456:8:2}function Ie(){var e=Y.p;return 0!==e?e:void 0===(e=window.event)?32:Kd(e.type)}var De=Math.random().toString(36).slice(2),Fe="__reactFiber$"+De,Re="__reactProps$"+De,je="__reactContainer$"+De,Ge="__reactEvents$"+De,Ye="__reactListeners$"+De,Ue="__reactHandles$"+De,$e="__reactResources$"+De,Ve="__reactMarker$"+De;function He(e){delete e[Fe],delete e[Re],delete e[Ge],delete e[Ye],delete e[Ue]}function We(e){var t=e[Fe];if(t)return t;for(var n=e.parentNode;n;){if(t=n[je]||n[Fe]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=od(e);null!==e;){if(n=e[Fe])return n;e=od(e)}return t}n=(e=n).parentNode}return null}function qe(e){if(e=e[Fe]||e[je]){var t=e.tag;if(5===t||6===t||13===t||26===t||27===t||3===t)return e}return null}function Qe(e){var t=e.tag;if(5===t||26===t||27===t||6===t)return e.stateNode;throw Error(l(33))}function Xe(e){var t=e[$e];return t||(t=e[$e]={hoistableStyles:new Map,hoistableScripts:new Map}),t}function Ke(e){e[Ve]=!0}var Ze=new Set,Je={};function et(e,t){tt(e,t),tt(e+"Capture",t)}function tt(e,t){for(Je[e]=t,e=0;e<t.length;e++)Ze.add(t[e])}var nt=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),rt=RegExp("^[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"),it={},at={};function lt(e,t,n){if(i=t,re.call(at,i)||!re.call(it,i)&&(rt.test(i)?at[i]=!0:(it[i]=!0,0)))if(null===n)e.removeAttribute(t);else{switch(typeof n){case"undefined":case"function":case"symbol":return void e.removeAttribute(t);case"boolean":var r=t.toLowerCase().slice(0,5);if("data-"!==r&&"aria-"!==r)return void e.removeAttribute(t)}e.setAttribute(t,""+n)}var i}function st(e,t,n){if(null===n)e.removeAttribute(t);else{switch(typeof n){case"undefined":case"function":case"symbol":case"boolean":return void e.removeAttribute(t)}e.setAttribute(t,""+n)}}function ot(e,t,n,r){if(null===r)e.removeAttribute(n);else{switch(typeof r){case"undefined":case"function":case"symbol":case"boolean":return void e.removeAttribute(n)}e.setAttributeNS(t,n,""+r)}}function ut(e){switch(typeof e){case"bigint":case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function ct(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function dt(e){e._valueTracker||(e._valueTracker=function(e){var t=ct(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var i=n.get,a=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return i.call(this)},set:function(e){r=""+e,a.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function pt(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=ct(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function ft(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}var ht=/[\n"\\]/g;function mt(e){return e.replace(ht,(function(e){return"\\"+e.charCodeAt(0).toString(16)+" "}))}function gt(e,t,n,r,i,a,l,s){e.name="",null!=l&&"function"!=typeof l&&"symbol"!=typeof l&&"boolean"!=typeof l?e.type=l:e.removeAttribute("type"),null!=t?"number"===l?(0===t&&""===e.value||e.value!=t)&&(e.value=""+ut(t)):e.value!==""+ut(t)&&(e.value=""+ut(t)):"submit"!==l&&"reset"!==l||e.removeAttribute("value"),null!=t?At(e,l,ut(t)):null!=n?At(e,l,ut(n)):null!=r&&e.removeAttribute("value"),null==i&&null!=a&&(e.defaultChecked=!!a),null!=i&&(e.checked=i&&"function"!=typeof i&&"symbol"!=typeof i),null!=s&&"function"!=typeof s&&"symbol"!=typeof s&&"boolean"!=typeof s?e.name=""+ut(s):e.removeAttribute("name")}function vt(e,t,n,r,i,a,l,s){if(null!=a&&"function"!=typeof a&&"symbol"!=typeof a&&"boolean"!=typeof a&&(e.type=a),null!=t||null!=n){if(("submit"===a||"reset"===a)&&null==t)return;n=null!=n?""+ut(n):"",t=null!=t?""+ut(t):n,s||t===e.value||(e.value=t),e.defaultValue=t}r="function"!=typeof(r=null!=r?r:i)&&"symbol"!=typeof r&&!!r,e.checked=s?e.checked:!!r,e.defaultChecked=!!r,null!=l&&"function"!=typeof l&&"symbol"!=typeof l&&"boolean"!=typeof l&&(e.name=l)}function At(e,t,n){"number"===t&&ft(e.ownerDocument)===e||e.defaultValue===""+n||(e.defaultValue=""+n)}function yt(e,t,n,r){if(e=e.options,t){t={};for(var i=0;i<n.length;i++)t["$"+n[i]]=!0;for(n=0;n<e.length;n++)i=t.hasOwnProperty("$"+e[n].value),e[n].selected!==i&&(e[n].selected=i),i&&r&&(e[n].defaultSelected=!0)}else{for(n=""+ut(n),t=null,i=0;i<e.length;i++){if(e[i].value===n)return e[i].selected=!0,void(r&&(e[i].defaultSelected=!0));null!==t||e[i].disabled||(t=e[i])}null!==t&&(t.selected=!0)}}function bt(e,t,n){null==t||((t=""+ut(t))!==e.value&&(e.value=t),null!=n)?e.defaultValue=null!=n?""+ut(n):"":e.defaultValue!==t&&(e.defaultValue=t)}function wt(e,t,n,r){if(null==t){if(null!=r){if(null!=n)throw Error(l(92));if(G(r)){if(1<r.length)throw Error(l(93));r=r[0]}n=r}null==n&&(n=""),t=n}n=ut(t),e.defaultValue=n,(r=e.textContent)===n&&""!==r&&null!==r&&(e.value=r)}function _t(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var Ct=new Set("animationIterationCount aspectRatio borderImageOutset borderImageSlice borderImageWidth boxFlex boxFlexGroup boxOrdinalGroup columnCount columns flex flexGrow flexPositive flexShrink flexNegative flexOrder gridArea gridRow gridRowEnd gridRowSpan gridRowStart gridColumn gridColumnEnd gridColumnSpan gridColumnStart fontWeight lineClamp lineHeight opacity order orphans scale tabSize widows zIndex zoom fillOpacity floodOpacity stopOpacity strokeDasharray strokeDashoffset strokeMiterlimit strokeOpacity strokeWidth MozAnimationIterationCount MozBoxFlex MozBoxFlexGroup MozLineClamp msAnimationIterationCount msFlex msZoom msFlexGrow msFlexNegative msFlexOrder msFlexPositive msFlexShrink msGridColumn msGridColumnSpan msGridRow msGridRowSpan WebkitAnimationIterationCount WebkitBoxFlex WebKitBoxFlexGroup WebkitBoxOrdinalGroup WebkitColumnCount WebkitColumns WebkitFlex WebkitFlexGrow WebkitFlexPositive WebkitFlexShrink WebkitLineClamp".split(" "));function xt(e,t,n){var r=0===t.indexOf("--");null==n||"boolean"==typeof n||""===n?r?e.setProperty(t,""):"float"===t?e.cssFloat="":e[t]="":r?e.setProperty(t,n):"number"!=typeof n||0===n||Ct.has(t)?"float"===t?e.cssFloat=n:e[t]=(""+n).trim():e[t]=n+"px"}function Et(e,t,n){if(null!=t&&"object"!=typeof t)throw Error(l(62));if(e=e.style,null!=n){for(var r in n)!n.hasOwnProperty(r)||null!=t&&t.hasOwnProperty(r)||(0===r.indexOf("--")?e.setProperty(r,""):"float"===r?e.cssFloat="":e[r]="");for(var i in t)r=t[i],t.hasOwnProperty(i)&&n[i]!==r&&xt(e,i,r)}else for(var a in t)t.hasOwnProperty(a)&&xt(e,a,t[a])}function St(e){if(-1===e.indexOf("-"))return!1;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var kt=new Map([["acceptCharset","accept-charset"],["htmlFor","for"],["httpEquiv","http-equiv"],["crossOrigin","crossorigin"],["accentHeight","accent-height"],["alignmentBaseline","alignment-baseline"],["arabicForm","arabic-form"],["baselineShift","baseline-shift"],["capHeight","cap-height"],["clipPath","clip-path"],["clipRule","clip-rule"],["colorInterpolation","color-interpolation"],["colorInterpolationFilters","color-interpolation-filters"],["colorProfile","color-profile"],["colorRendering","color-rendering"],["dominantBaseline","dominant-baseline"],["enableBackground","enable-background"],["fillOpacity","fill-opacity"],["fillRule","fill-rule"],["floodColor","flood-color"],["floodOpacity","flood-opacity"],["fontFamily","font-family"],["fontSize","font-size"],["fontSizeAdjust","font-size-adjust"],["fontStretch","font-stretch"],["fontStyle","font-style"],["fontVariant","font-variant"],["fontWeight","font-weight"],["glyphName","glyph-name"],["glyphOrientationHorizontal","glyph-orientation-horizontal"],["glyphOrientationVertical","glyph-orientation-vertical"],["horizAdvX","horiz-adv-x"],["horizOriginX","horiz-origin-x"],["imageRendering","image-rendering"],["letterSpacing","letter-spacing"],["lightingColor","lighting-color"],["markerEnd","marker-end"],["markerMid","marker-mid"],["markerStart","marker-start"],["overlinePosition","overline-position"],["overlineThickness","overline-thickness"],["paintOrder","paint-order"],["panose-1","panose-1"],["pointerEvents","pointer-events"],["renderingIntent","rendering-intent"],["shapeRendering","shape-rendering"],["stopColor","stop-color"],["stopOpacity","stop-opacity"],["strikethroughPosition","strikethrough-position"],["strikethroughThickness","strikethrough-thickness"],["strokeDasharray","stroke-dasharray"],["strokeDashoffset","stroke-dashoffset"],["strokeLinecap","stroke-linecap"],["strokeLinejoin","stroke-linejoin"],["strokeMiterlimit","stroke-miterlimit"],["strokeOpacity","stroke-opacity"],["strokeWidth","stroke-width"],["textAnchor","text-anchor"],["textDecoration","text-decoration"],["textRendering","text-rendering"],["transformOrigin","transform-origin"],["underlinePosition","underline-position"],["underlineThickness","underline-thickness"],["unicodeBidi","unicode-bidi"],["unicodeRange","unicode-range"],["unitsPerEm","units-per-em"],["vAlphabetic","v-alphabetic"],["vHanging","v-hanging"],["vIdeographic","v-ideographic"],["vMathematical","v-mathematical"],["vectorEffect","vector-effect"],["vertAdvY","vert-adv-y"],["vertOriginX","vert-origin-x"],["vertOriginY","vert-origin-y"],["wordSpacing","word-spacing"],["writingMode","writing-mode"],["xmlnsXlink","xmlns:xlink"],["xHeight","x-height"]]),Tt=/^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*:/i;function Pt(e){return Tt.test(""+e)?"javascript:throw new Error('React has blocked a javascript: URL as a security precaution.')":e}var Bt=null;function Mt(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var zt=null,Ot=null;function Lt(e){var t=qe(e);if(t&&(e=t.stateNode)){var n=e[Re]||null;e:switch(e=t.stateNode,t.type){case"input":if(gt(e,n.value,n.defaultValue,n.defaultValue,n.checked,n.defaultChecked,n.type,n.name),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll('input[name="'+mt(""+t)+'"][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var i=r[Re]||null;if(!i)throw Error(l(90));gt(r,i.value,i.defaultValue,i.defaultValue,i.checked,i.defaultChecked,i.type,i.name)}}for(t=0;t<n.length;t++)(r=n[t]).form===e.form&&pt(r)}break e;case"textarea":bt(e,n.value,n.defaultValue);break e;case"select":null!=(t=n.value)&&yt(e,!!n.multiple,t,!1)}}}var Nt=!1;function It(e,t,n){if(Nt)return e(t,n);Nt=!0;try{return e(t)}finally{if(Nt=!1,(null!==zt||null!==Ot)&&(Fu(),zt&&(t=zt,e=Ot,Ot=zt=null,Lt(t),e)))for(t=0;t<e.length;t++)Lt(e[t])}}function Dt(e,t){var n=e.stateNode;if(null===n)return null;var r=n[Re]||null;if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(l(231,t,typeof n));return n}var Ft=!1;if(nt)try{var Rt={};Object.defineProperty(Rt,"passive",{get:function(){Ft=!0}}),window.addEventListener("test",Rt,Rt),window.removeEventListener("test",Rt,Rt)}catch(e){Ft=!1}var jt=null,Gt=null,Yt=null;function Ut(){if(Yt)return Yt;var e,t,n=Gt,r=n.length,i="value"in jt?jt.value:jt.textContent,a=i.length;for(e=0;e<r&&n[e]===i[e];e++);var l=r-e;for(t=1;t<=l&&n[r-t]===i[a-t];t++);return Yt=i.slice(e,1<t?1-t:void 0)}function $t(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function Vt(){return!0}function Ht(){return!1}function Wt(e){function t(t,n,r,i,a){for(var l in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=i,this.target=a,this.currentTarget=null,e)e.hasOwnProperty(l)&&(t=e[l],this[l]=t?t(i):i[l]);return this.isDefaultPrevented=(null!=i.defaultPrevented?i.defaultPrevented:!1===i.returnValue)?Vt:Ht,this.isPropagationStopped=Ht,this}return M(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=Vt)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=Vt)},persist:function(){},isPersistent:Vt}),t}var qt,Qt,Xt,Kt={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},Zt=Wt(Kt),Jt=M({},Kt,{view:0,detail:0}),en=Wt(Jt),tn=M({},Jt,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:fn,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==Xt&&(Xt&&"mousemove"===e.type?(qt=e.screenX-Xt.screenX,Qt=e.screenY-Xt.screenY):Qt=qt=0,Xt=e),qt)},movementY:function(e){return"movementY"in e?e.movementY:Qt}}),nn=Wt(tn),rn=Wt(M({},tn,{dataTransfer:0})),an=Wt(M({},Jt,{relatedTarget:0})),ln=Wt(M({},Kt,{animationName:0,elapsedTime:0,pseudoElement:0})),sn=Wt(M({},Kt,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}})),on=Wt(M({},Kt,{data:0})),un={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},cn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},dn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function pn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=dn[e])&&!!t[e]}function fn(){return pn}var hn=Wt(M({},Jt,{key:function(e){if(e.key){var t=un[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=$t(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?cn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:fn,charCode:function(e){return"keypress"===e.type?$t(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?$t(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}})),mn=Wt(M({},tn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),gn=Wt(M({},Jt,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:fn})),vn=Wt(M({},Kt,{propertyName:0,elapsedTime:0,pseudoElement:0})),An=Wt(M({},tn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0})),yn=Wt(M({},Kt,{newState:0,oldState:0})),bn=[9,13,27,32],wn=nt&&"CompositionEvent"in window,_n=null;nt&&"documentMode"in document&&(_n=document.documentMode);var Cn=nt&&"TextEvent"in window&&!_n,xn=nt&&(!wn||_n&&8<_n&&11>=_n),En=String.fromCharCode(32),Sn=!1;function kn(e,t){switch(e){case"keyup":return-1!==bn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Tn(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Pn=!1,Bn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Mn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Bn[e.type]:"textarea"===t}function zn(e,t,n,r){zt?Ot?Ot.push(r):Ot=[r]:zt=r,0<(t=Ic(t,"onChange")).length&&(n=new Zt("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var On=null,Ln=null;function Nn(e){Tc(e,0)}function In(e){if(pt(Qe(e)))return e}function Dn(e,t){if("change"===e)return t}var Fn=!1;if(nt){var Rn;if(nt){var jn="oninput"in document;if(!jn){var Gn=document.createElement("div");Gn.setAttribute("oninput","return;"),jn="function"==typeof Gn.oninput}Rn=jn}else Rn=!1;Fn=Rn&&(!document.documentMode||9<document.documentMode)}function Yn(){On&&(On.detachEvent("onpropertychange",Un),Ln=On=null)}function Un(e){if("value"===e.propertyName&&In(Ln)){var t=[];zn(t,Ln,e,Mt(e)),It(Nn,t)}}function $n(e,t,n){"focusin"===e?(Yn(),Ln=n,(On=t).attachEvent("onpropertychange",Un)):"focusout"===e&&Yn()}function Vn(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return In(Ln)}function Hn(e,t){if("click"===e)return In(t)}function Wn(e,t){if("input"===e||"change"===e)return In(t)}var qn="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t};function Qn(e,t){if(qn(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++){var i=n[r];if(!re.call(t,i)||!qn(e[i],t[i]))return!1}return!0}function Xn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function Kn(e,t){var n,r=Xn(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=Xn(r)}}function Zn(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?Zn(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function Jn(e){for(var t=ft((e=null!=e&&null!=e.ownerDocument&&null!=e.ownerDocument.defaultView?e.ownerDocument.defaultView:window).document);t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=ft((e=t.contentWindow).document)}return t}function er(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function tr(e,t){var n=Jn(t);t=e.focusedElem;var r=e.selectionRange;if(n!==t&&t&&t.ownerDocument&&Zn(t.ownerDocument.documentElement,t)){if(null!==r&&er(t))if(e=r.start,void 0===(n=r.end)&&(n=e),"selectionStart"in t)t.selectionStart=e,t.selectionEnd=Math.min(n,t.value.length);else if((n=(e=t.ownerDocument||document)&&e.defaultView||window).getSelection){n=n.getSelection();var i=t.textContent.length,a=Math.min(r.start,i);r=void 0===r.end?a:Math.min(r.end,i),!n.extend&&a>r&&(i=r,r=a,a=i),i=Kn(t,a);var l=Kn(t,r);i&&l&&(1!==n.rangeCount||n.anchorNode!==i.node||n.anchorOffset!==i.offset||n.focusNode!==l.node||n.focusOffset!==l.offset)&&((e=e.createRange()).setStart(i.node,i.offset),n.removeAllRanges(),a>r?(n.addRange(e),n.extend(l.node,l.offset)):(e.setEnd(l.node,l.offset),n.addRange(e)))}for(e=[],n=t;n=n.parentNode;)1===n.nodeType&&e.push({element:n,left:n.scrollLeft,top:n.scrollTop});for("function"==typeof t.focus&&t.focus(),t=0;t<e.length;t++)(n=e[t]).element.scrollLeft=n.left,n.element.scrollTop=n.top}}var nr=nt&&"documentMode"in document&&11>=document.documentMode,rr=null,ir=null,ar=null,lr=!1;function sr(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;lr||null==rr||rr!==ft(r)||(r="selectionStart"in(r=rr)&&er(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},ar&&Qn(ar,r)||(ar=r,0<(r=Ic(ir,"onSelect")).length&&(t=new Zt("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=rr)))}function or(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var ur={animationend:or("Animation","AnimationEnd"),animationiteration:or("Animation","AnimationIteration"),animationstart:or("Animation","AnimationStart"),transitionrun:or("Transition","TransitionRun"),transitionstart:or("Transition","TransitionStart"),transitioncancel:or("Transition","TransitionCancel"),transitionend:or("Transition","TransitionEnd")},cr={},dr={};function pr(e){if(cr[e])return cr[e];if(!ur[e])return e;var t,n=ur[e];for(t in n)if(n.hasOwnProperty(t)&&t in dr)return cr[e]=n[t];return e}nt&&(dr=document.createElement("div").style,"AnimationEvent"in window||(delete ur.animationend.animation,delete ur.animationiteration.animation,delete ur.animationstart.animation),"TransitionEvent"in window||delete ur.transitionend.transition);var fr=pr("animationend"),hr=pr("animationiteration"),mr=pr("animationstart"),gr=pr("transitionrun"),vr=pr("transitionstart"),Ar=pr("transitioncancel"),yr=pr("transitionend"),br=new Map,wr="abort auxClick beforeToggle cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll scrollEnd toggle touchMove waiting wheel".split(" ");function _r(e,t){br.set(e,t),et(t,[e])}var Cr=[],xr=0,Er=0;function Sr(){for(var e=xr,t=Er=xr=0;t<e;){var n=Cr[t];Cr[t++]=null;var r=Cr[t];Cr[t++]=null;var i=Cr[t];Cr[t++]=null;var a=Cr[t];if(Cr[t++]=null,null!==r&&null!==i){var l=r.pending;null===l?i.next=i:(i.next=l.next,l.next=i),r.pending=i}0!==a&&Br(n,i,a)}}function kr(e,t,n,r){Cr[xr++]=e,Cr[xr++]=t,Cr[xr++]=n,Cr[xr++]=r,Er|=r,e.lanes|=r,null!==(e=e.alternate)&&(e.lanes|=r)}function Tr(e,t,n,r){return kr(e,t,n,r),Mr(e)}function Pr(e,t){return kr(e,null,null,t),Mr(e)}function Br(e,t,n){e.lanes|=n;var r=e.alternate;null!==r&&(r.lanes|=n);for(var i=!1,a=e.return;null!==a;)a.childLanes|=n,null!==(r=a.alternate)&&(r.childLanes|=n),22===a.tag&&(null===(e=a.stateNode)||1&e._visibility||(i=!0)),e=a,a=a.return;i&&null!==t&&3===e.tag&&(a=e.stateNode,i=31-be(n),null===(e=(a=a.hiddenUpdates)[i])?a[i]=[t]:e.push(t),t.lane=536870912|n)}function Mr(e){if(50<Tu)throw Tu=0,Pu=null,Error(l(185));for(var t=e.return;null!==t;)t=(e=t).return;return 3===e.tag?e.stateNode:null}var zr={},Or=new WeakMap;function Lr(e,t){if("object"==typeof e&&null!==e){var n=Or.get(e);return void 0!==n?n:(t={value:e,source:t,stack:I(t)},Or.set(e,t),t)}return{value:e,source:t,stack:I(t)}}var Nr=[],Ir=0,Dr=null,Fr=0,Rr=[],jr=0,Gr=null,Yr=1,Ur="";function $r(e,t){Nr[Ir++]=Fr,Nr[Ir++]=Dr,Dr=e,Fr=t}function Vr(e,t,n){Rr[jr++]=Yr,Rr[jr++]=Ur,Rr[jr++]=Gr,Gr=e;var r=Yr;e=Ur;var i=32-be(r)-1;r&=~(1<<i),n+=1;var a=32-be(t)+i;if(30<a){var l=i-i%5;a=(r&(1<<l)-1).toString(32),r>>=l,i-=l,Yr=1<<32-be(t)+i|n<<i|r,Ur=a+e}else Yr=1<<a|n<<i|r,Ur=e}function Hr(e){null!==e.return&&($r(e,1),Vr(e,1,0))}function Wr(e){for(;e===Dr;)Dr=Nr[--Ir],Nr[Ir]=null,Fr=Nr[--Ir],Nr[Ir]=null;for(;e===Gr;)Gr=Rr[--jr],Rr[jr]=null,Ur=Rr[--jr],Rr[jr]=null,Yr=Rr[--jr],Rr[jr]=null}var qr=null,Qr=null,Xr=!1,Kr=null,Zr=!1,Jr=Error(l(519));function ei(e){throw ai(Lr(Error(l(418,"")),e)),Jr}function ti(e){var t=e.stateNode,n=e.type,r=e.memoizedProps;switch(t[Fe]=e,t[Re]=r,n){case"dialog":Pc("cancel",t),Pc("close",t);break;case"iframe":case"object":case"embed":Pc("load",t);break;case"video":case"audio":for(n=0;n<Sc.length;n++)Pc(Sc[n],t);break;case"source":Pc("error",t);break;case"img":case"image":case"link":Pc("error",t),Pc("load",t);break;case"details":Pc("toggle",t);break;case"input":Pc("invalid",t),vt(t,r.value,r.defaultValue,r.checked,r.defaultChecked,r.type,r.name,!0),dt(t);break;case"select":Pc("invalid",t);break;case"textarea":Pc("invalid",t),wt(t,r.value,r.defaultValue,r.children),dt(t)}"string"!=typeof(n=r.children)&&"number"!=typeof n&&"bigint"!=typeof n||t.textContent===""+n||!0===r.suppressHydrationWarning||Yc(t.textContent,n)?(null!=r.popover&&(Pc("beforetoggle",t),Pc("toggle",t)),null!=r.onScroll&&Pc("scroll",t),null!=r.onScrollEnd&&Pc("scrollend",t),null!=r.onClick&&(t.onclick=Uc),t=!0):t=!1,t||ei(e)}function ni(e){for(qr=e.return;qr;)switch(qr.tag){case 3:case 27:return void(Zr=!0);case 5:case 13:return void(Zr=!1);default:qr=qr.return}}function ri(e){if(e!==qr)return!1;if(!Xr)return ni(e),Xr=!0,!1;var t,n=!1;if((t=3!==e.tag&&27!==e.tag)&&((t=5===e.tag)&&(t=!("form"!==(t=e.type)&&"button"!==t)||Zc(e.type,e.memoizedProps)),t=!t),t&&(n=!0),n&&Qr&&ei(e),ni(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(l(317));e:{for(e=e.nextSibling,n=0;e;){if(8===e.nodeType)if("/$"===(t=e.data)){if(0===n){Qr=sd(e.nextSibling);break e}n--}else"$"!==t&&"$!"!==t&&"$?"!==t||n++;e=e.nextSibling}Qr=null}}else Qr=qr?sd(e.stateNode.nextSibling):null;return!0}function ii(){Qr=qr=null,Xr=!1}function ai(e){null===Kr?Kr=[e]:Kr.push(e)}var li=Error(l(460)),si=Error(l(474)),oi={then:function(){}};function ui(e){return"fulfilled"===(e=e.status)||"rejected"===e}function ci(){}function di(e,t,n){switch(void 0===(n=e[n])?e.push(t):n!==t&&(t.then(ci,ci),t=n),t.status){case"fulfilled":return t.value;case"rejected":if((e=t.reason)===li)throw Error(l(483));throw e;default:if("string"==typeof t.status)t.then(ci,ci);else{if(null!==(e=tu)&&100<e.shellSuspendCounter)throw Error(l(482));(e=t).status="pending",e.then((function(e){if("pending"===t.status){var n=t;n.status="fulfilled",n.value=e}}),(function(e){if("pending"===t.status){var n=t;n.status="rejected",n.reason=e}}))}switch(t.status){case"fulfilled":return t.value;case"rejected":if((e=t.reason)===li)throw Error(l(483));throw e}throw pi=t,li}}var pi=null;function fi(){if(null===pi)throw Error(l(459));var e=pi;return pi=null,e}var hi=null,mi=0;function gi(e){var t=mi;return mi+=1,null===hi&&(hi=[]),di(hi,e,t)}function vi(e,t){t=t.props.ref,e.ref=void 0!==t?t:null}function Ai(e,t){if(t.$$typeof===o)throw Error(l(525));throw e=Object.prototype.toString.call(t),Error(l(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function yi(e){return(0,e._init)(e._payload)}function bi(e){function t(t,n){if(e){var r=t.deletions;null===r?(t.deletions=[n],t.flags|=16):r.push(n)}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e){for(var t=new Map;null!==e;)null!==e.key?t.set(e.key,e):t.set(e.index,e),e=e.sibling;return t}function i(e,t){return(e=Do(e,t)).index=0,e.sibling=null,e}function a(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags|=33554434,n):r:(t.flags|=33554434,n):(t.flags|=1048576,n)}function s(t){return e&&null===t.alternate&&(t.flags|=33554434),t}function o(e,t,n,r){return null===t||6!==t.tag?((t=Yo(n,e.mode,r)).return=e,t):((t=i(t,n)).return=e,t)}function p(e,t,n,r){var a=n.type;return a===d?h(e,t,n.props.children,r,n.key):null!==t&&(t.elementType===a||"object"==typeof a&&null!==a&&a.$$typeof===w&&yi(a)===t.type)?(vi(t=i(t,n.props),n),t.return=e,t):(vi(t=Ro(n.type,n.key,n.props,null,e.mode,r),n),t.return=e,t)}function f(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Uo(n,e.mode,r)).return=e,t):((t=i(t,n.children||[])).return=e,t)}function h(e,t,n,r,a){return null===t||7!==t.tag?((t=jo(n,e.mode,r,a)).return=e,t):((t=i(t,n)).return=e,t)}function m(e,t,n){if("string"==typeof t&&""!==t||"number"==typeof t||"bigint"==typeof t)return(t=Yo(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case u:return vi(n=Ro(t.type,t.key,t.props,null,e.mode,n),t),n.return=e,n;case c:return(t=Uo(t,e.mode,n)).return=e,t;case w:return m(e,t=(0,t._init)(t._payload),n)}if(G(t)||E(t))return(t=jo(t,e.mode,n,null)).return=e,t;if("function"==typeof t.then)return m(e,gi(t),n);if(t.$$typeof===g)return m(e,Es(e,t),n);Ai(e,t)}return null}function v(e,t,n,r){var i=null!==t?t.key:null;if("string"==typeof n&&""!==n||"number"==typeof n||"bigint"==typeof n)return null!==i?null:o(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case u:return n.key===i?p(e,t,n,r):null;case c:return n.key===i?f(e,t,n,r):null;case w:return v(e,t,n=(i=n._init)(n._payload),r)}if(G(n)||E(n))return null!==i?null:h(e,t,n,r,null);if("function"==typeof n.then)return v(e,t,gi(n),r);if(n.$$typeof===g)return v(e,t,Es(e,n),r);Ai(e,n)}return null}function A(e,t,n,r,i){if("string"==typeof r&&""!==r||"number"==typeof r||"bigint"==typeof r)return o(t,e=e.get(n)||null,""+r,i);if("object"==typeof r&&null!==r){switch(r.$$typeof){case u:return p(t,e=e.get(null===r.key?n:r.key)||null,r,i);case c:return f(t,e=e.get(null===r.key?n:r.key)||null,r,i);case w:return A(e,t,n,r=(0,r._init)(r._payload),i)}if(G(r)||E(r))return h(t,e=e.get(n)||null,r,i,null);if("function"==typeof r.then)return A(e,t,n,gi(r),i);if(r.$$typeof===g)return A(e,t,n,Es(t,r),i);Ai(t,r)}return null}function y(o,p,f,h){if("object"==typeof f&&null!==f&&f.type===d&&null===f.key&&(f=f.props.children),"object"==typeof f&&null!==f){switch(f.$$typeof){case u:e:{for(var b=f.key;null!==p;){if(p.key===b){if((b=f.type)===d){if(7===p.tag){n(o,p.sibling),(h=i(p,f.props.children)).return=o,o=h;break e}}else if(p.elementType===b||"object"==typeof b&&null!==b&&b.$$typeof===w&&yi(b)===p.type){n(o,p.sibling),vi(h=i(p,f.props),f),h.return=o,o=h;break e}n(o,p);break}t(o,p),p=p.sibling}f.type===d?((h=jo(f.props.children,o.mode,h,f.key)).return=o,o=h):(vi(h=Ro(f.type,f.key,f.props,null,o.mode,h),f),h.return=o,o=h)}return s(o);case c:e:{for(b=f.key;null!==p;){if(p.key===b){if(4===p.tag&&p.stateNode.containerInfo===f.containerInfo&&p.stateNode.implementation===f.implementation){n(o,p.sibling),(h=i(p,f.children||[])).return=o,o=h;break e}n(o,p);break}t(o,p),p=p.sibling}(h=Uo(f,o.mode,h)).return=o,o=h}return s(o);case w:return y(o,p,f=(b=f._init)(f._payload),h)}if(G(f))return function(i,l,s,o){for(var u=null,c=null,d=l,p=l=0,f=null;null!==d&&p<s.length;p++){d.index>p?(f=d,d=null):f=d.sibling;var h=v(i,d,s[p],o);if(null===h){null===d&&(d=f);break}e&&d&&null===h.alternate&&t(i,d),l=a(h,l,p),null===c?u=h:c.sibling=h,c=h,d=f}if(p===s.length)return n(i,d),Xr&&$r(i,p),u;if(null===d){for(;p<s.length;p++)null!==(d=m(i,s[p],o))&&(l=a(d,l,p),null===c?u=d:c.sibling=d,c=d);return Xr&&$r(i,p),u}for(d=r(d);p<s.length;p++)null!==(f=A(d,i,p,s[p],o))&&(e&&null!==f.alternate&&d.delete(null===f.key?p:f.key),l=a(f,l,p),null===c?u=f:c.sibling=f,c=f);return e&&d.forEach((function(e){return t(i,e)})),Xr&&$r(i,p),u}(o,p,f,h);if(E(f)){if("function"!=typeof(b=E(f)))throw Error(l(150));return function(i,s,o,u){if(null==o)throw Error(l(151));for(var c=null,d=null,p=s,f=s=0,h=null,g=o.next();null!==p&&!g.done;f++,g=o.next()){p.index>f?(h=p,p=null):h=p.sibling;var y=v(i,p,g.value,u);if(null===y){null===p&&(p=h);break}e&&p&&null===y.alternate&&t(i,p),s=a(y,s,f),null===d?c=y:d.sibling=y,d=y,p=h}if(g.done)return n(i,p),Xr&&$r(i,f),c;if(null===p){for(;!g.done;f++,g=o.next())null!==(g=m(i,g.value,u))&&(s=a(g,s,f),null===d?c=g:d.sibling=g,d=g);return Xr&&$r(i,f),c}for(p=r(p);!g.done;f++,g=o.next())null!==(g=A(p,i,f,g.value,u))&&(e&&null!==g.alternate&&p.delete(null===g.key?f:g.key),s=a(g,s,f),null===d?c=g:d.sibling=g,d=g);return e&&p.forEach((function(e){return t(i,e)})),Xr&&$r(i,f),c}(o,p,f=b.call(f),h)}if("function"==typeof f.then)return y(o,p,gi(f),h);if(f.$$typeof===g)return y(o,p,Es(o,f),h);Ai(o,f)}return"string"==typeof f&&""!==f||"number"==typeof f||"bigint"==typeof f?(f=""+f,null!==p&&6===p.tag?(n(o,p.sibling),(h=i(p,f)).return=o,o=h):(n(o,p),(h=Yo(f,o.mode,h)).return=o,o=h),s(o)):n(o,p)}return function(e,t,n,r){try{mi=0;var i=y(e,t,n,r);return hi=null,i}catch(t){if(t===li)throw t;var a=No(29,t,null,e.mode);return a.lanes=r,a.return=e,a}}}var wi=bi(!0),_i=bi(!1),Ci=H(null),xi=H(0);function Ei(e,t){q(xi,e=uu),q(Ci,t),uu=e|t.baseLanes}function Si(){q(xi,uu),q(Ci,Ci.current)}function ki(){uu=xi.current,W(Ci),W(xi)}var Ti=H(null),Pi=null;function Bi(e){var t=e.alternate;q(Li,1&Li.current),q(Ti,e),null===Pi&&(null===t||null!==Ci.current||null!==t.memoizedState)&&(Pi=e)}function Mi(e){if(22===e.tag){if(q(Li,Li.current),q(Ti,e),null===Pi){var t=e.alternate;null!==t&&null!==t.memoizedState&&(Pi=e)}}else zi()}function zi(){q(Li,Li.current),q(Ti,Ti.current)}function Oi(e){W(Ti),Pi===e&&(Pi=null),W(Li)}var Li=H(0);function Ni(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(128&t.flags)return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var Ii="undefined"!=typeof AbortController?AbortController:function(){var e=[],t=this.signal={aborted:!1,addEventListener:function(t,n){e.push(n)}};this.abort=function(){t.aborted=!0,e.forEach((function(e){return e()}))}},Di=r.unstable_scheduleCallback,Fi=r.unstable_NormalPriority,Ri={$$typeof:g,Consumer:null,Provider:null,_currentValue:null,_currentValue2:null,_threadCount:0};function ji(){return{controller:new Ii,data:new Map,refCount:0}}function Gi(e){e.refCount--,0===e.refCount&&Di(Fi,(function(){e.controller.abort()}))}var Yi=null,Ui=0,$i=0,Vi=null;function Hi(){if(0==--Ui&&null!==Yi){null!==Vi&&(Vi.status="fulfilled");var e=Yi;Yi=null,$i=0,Vi=null;for(var t=0;t<e.length;t++)(0,e[t])()}}var Wi=B.S;B.S=function(e,t){"object"==typeof t&&null!==t&&"function"==typeof t.then&&function(e,t){if(null===Yi){var n=Yi=[];Ui=0,$i=wc(),Vi={status:"pending",value:void 0,then:function(e){n.push(e)}}}Ui++,t.then(Hi,Hi)}(0,t),null!==Wi&&Wi(e,t)};var qi=H(null);function Qi(){var e=qi.current;return null!==e?e:tu.pooledCache}function Xi(e,t){q(qi,null===t?qi.current:t.pool)}function Ki(){var e=Qi();return null===e?null:{parent:Ri._currentValue,pool:e}}var Zi=0,Ji=null,ea=null,ta=null,na=!1,ra=!1,ia=!1,aa=0,la=0,sa=null,oa=0;function ua(){throw Error(l(321))}function ca(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!qn(e[n],t[n]))return!1;return!0}function da(e,t,n,r,i,a){return Zi=a,Ji=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,B.H=null===e||null===e.memoizedState?El:Sl,ia=!1,a=n(r,i),ia=!1,ra&&(a=fa(t,n,r,i)),pa(e),a}function pa(e){B.H=xl;var t=null!==ea&&null!==ea.next;if(Zi=0,ta=ea=Ji=null,na=!1,la=0,sa=null,t)throw Error(l(300));null===e||Ul||null!==(e=e.dependencies)&&_s(e)&&(Ul=!0)}function fa(e,t,n,r){Ji=e;var i=0;do{if(ra&&(sa=null),la=0,ra=!1,25<=i)throw Error(l(301));if(i+=1,ta=ea=null,null!=e.updateQueue){var a=e.updateQueue;a.lastEffect=null,a.events=null,a.stores=null,null!=a.memoCache&&(a.memoCache.index=0)}B.H=kl,a=t(n,r)}while(ra);return a}function ha(){var e=B.H,t=e.useState()[0];return t="function"==typeof t.then?ba(t):t,e=e.useState()[0],(null!==ea?ea.memoizedState:null)!==e&&(Ji.flags|=1024),t}function ma(){var e=0!==aa;return aa=0,e}function ga(e,t,n){t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~n}function va(e){if(na){for(e=e.memoizedState;null!==e;){var t=e.queue;null!==t&&(t.pending=null),e=e.next}na=!1}Zi=0,ta=ea=Ji=null,ra=!1,la=aa=0,sa=null}function Aa(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===ta?Ji.memoizedState=ta=e:ta=ta.next=e,ta}function ya(){if(null===ea){var e=Ji.alternate;e=null!==e?e.memoizedState:null}else e=ea.next;var t=null===ta?Ji.memoizedState:ta.next;if(null!==t)ta=t,ea=e;else{if(null===e){if(null===Ji.alternate)throw Error(l(467));throw Error(l(310))}e={memoizedState:(ea=e).memoizedState,baseState:ea.baseState,baseQueue:ea.baseQueue,queue:ea.queue,next:null},null===ta?Ji.memoizedState=ta=e:ta=ta.next=e}return ta}function ba(e){var t=la;return la+=1,null===sa&&(sa=[]),e=di(sa,e,t),t=Ji,null===(null===ta?t.memoizedState:ta.next)&&(t=t.alternate,B.H=null===t||null===t.memoizedState?El:Sl),e}function wa(e){if(null!==e&&"object"==typeof e){if("function"==typeof e.then)return ba(e);if(e.$$typeof===g)return xs(e)}throw Error(l(438,String(e)))}function _a(e){var t=null,n=Ji.updateQueue;if(null!==n&&(t=n.memoCache),null==t){var r=Ji.alternate;null!==r&&null!==(r=r.updateQueue)&&null!=(r=r.memoCache)&&(t={data:r.data.map((function(e){return e.slice()})),index:0})}if(null==t&&(t={data:[],index:0}),null===n&&(n={lastEffect:null,events:null,stores:null,memoCache:null},Ji.updateQueue=n),n.memoCache=t,void 0===(n=t.data[t.index]))for(n=t.data[t.index]=Array(e),r=0;r<e;r++)n[r]=C;return t.index++,n}function Ca(e,t){return"function"==typeof t?t(e):t}function xa(e){return Ea(ya(),ea,e)}function Ea(e,t,n){var r=e.queue;if(null===r)throw Error(l(311));r.lastRenderedReducer=n;var i=e.baseQueue,a=r.pending;if(null!==a){if(null!==i){var s=i.next;i.next=a.next,a.next=s}t.baseQueue=i=a,r.pending=null}if(a=e.baseState,null===i)e.memoizedState=a;else{var o=s=null,u=null,c=t=i.next,d=!1;do{var p=-536870913&c.lane;if(p!==c.lane?(ru&p)===p:(Zi&p)===p){var f=c.revertLane;if(0===f)null!==u&&(u=u.next={lane:0,revertLane:0,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null}),p===$i&&(d=!0);else{if((Zi&f)===f){c=c.next,f===$i&&(d=!0);continue}p={lane:0,revertLane:c.revertLane,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null},null===u?(o=u=p,s=a):u=u.next=p,Ji.lanes|=f,du|=f}p=c.action,ia&&n(a,p),a=c.hasEagerState?c.eagerState:n(a,p)}else f={lane:p,revertLane:c.revertLane,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null},null===u?(o=u=f,s=a):u=u.next=f,Ji.lanes|=p,du|=p;c=c.next}while(null!==c&&c!==t);if(null===u?s=a:u.next=o,!qn(a,e.memoizedState)&&(Ul=!0,d&&null!==(n=Vi)))throw n;e.memoizedState=a,e.baseState=s,e.baseQueue=u,r.lastRenderedState=a}return null===i&&(r.lanes=0),[e.memoizedState,r.dispatch]}function Sa(e){var t=ya(),n=t.queue;if(null===n)throw Error(l(311));n.lastRenderedReducer=e;var r=n.dispatch,i=n.pending,a=t.memoizedState;if(null!==i){n.pending=null;var s=i=i.next;do{a=e(a,s.action),s=s.next}while(s!==i);qn(a,t.memoizedState)||(Ul=!0),t.memoizedState=a,null===t.baseQueue&&(t.baseState=a),n.lastRenderedState=a}return[a,r]}function ka(e,t,n){var r=Ji,i=ya(),a=Xr;if(a){if(void 0===n)throw Error(l(407));n=n()}else n=t();var s=!qn((ea||i).memoizedState,n);if(s&&(i.memoizedState=n,Ul=!0),i=i.queue,Za(Ba.bind(null,r,i,e),[e]),i.getSnapshot!==t||s||null!==ta&&1&ta.memoizedState.tag){if(r.flags|=2048,Wa(9,Pa.bind(null,r,i,n,t),{destroy:void 0},null),null===tu)throw Error(l(349));a||60&Zi||Ta(r,t,n)}return n}function Ta(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},null===(t=Ji.updateQueue)?(t={lastEffect:null,events:null,stores:null,memoCache:null},Ji.updateQueue=t,t.stores=[e]):null===(n=t.stores)?t.stores=[e]:n.push(e)}function Pa(e,t,n,r){t.value=n,t.getSnapshot=r,Ma(t)&&za(e)}function Ba(e,t,n){return n((function(){Ma(t)&&za(e)}))}function Ma(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!qn(e,n)}catch(e){return!0}}function za(e){var t=Pr(e,2);null!==t&&zu(t,0,2)}function Oa(e){var t=Aa();if("function"==typeof e){var n=e;if(e=n(),ia){ye(!0);try{n()}finally{ye(!1)}}}return t.memoizedState=t.baseState=e,t.queue={pending:null,lanes:0,dispatch:null,lastRenderedReducer:Ca,lastRenderedState:e},t}function La(e,t,n,r){return e.baseState=n,Ea(e,ea,"function"==typeof r?r:Ca)}function Na(e,t,n,r,i){if(wl(e))throw Error(l(485));if(null!==(e=t.action)){var a={payload:i,action:e,next:null,isTransition:!0,status:"pending",value:null,reason:null,listeners:[],then:function(e){a.listeners.push(e)}};null!==B.T?n(!0):a.isTransition=!1,r(a),null===(n=t.pending)?(a.next=t.pending=a,Ia(t,a)):(a.next=n.next,t.pending=n.next=a)}}function Ia(e,t){var n=t.action,r=t.payload,i=e.state;if(t.isTransition){var a=B.T,l={};B.T=l;try{var s=n(i,r),o=B.S;null!==o&&o(l,s),Da(e,t,s)}catch(n){Ra(e,t,n)}finally{B.T=a}}else try{Da(e,t,a=n(i,r))}catch(n){Ra(e,t,n)}}function Da(e,t,n){null!==n&&"object"==typeof n&&"function"==typeof n.then?n.then((function(n){Fa(e,t,n)}),(function(n){return Ra(e,t,n)})):Fa(e,t,n)}function Fa(e,t,n){t.status="fulfilled",t.value=n,ja(t),e.state=n,null!==(t=e.pending)&&((n=t.next)===t?e.pending=null:(n=n.next,t.next=n,Ia(e,n)))}function Ra(e,t,n){var r=e.pending;if(e.pending=null,null!==r){r=r.next;do{t.status="rejected",t.reason=n,ja(t),t=t.next}while(t!==r)}e.action=null}function ja(e){e=e.listeners;for(var t=0;t<e.length;t++)(0,e[t])()}function Ga(e,t){return t}function Ya(e,t){if(Xr){var n=tu.formState;if(null!==n){e:{var r=Ji;if(Xr){if(Qr){t:{for(var i=Qr,a=Zr;8!==i.nodeType;){if(!a){i=null;break t}if(null===(i=sd(i.nextSibling))){i=null;break t}}i="F!"===(a=i.data)||"F"===a?i:null}if(i){Qr=sd(i.nextSibling),r="F!"===i.data;break e}}ei(r)}r=!1}r&&(t=n[0])}}return(n=Aa()).memoizedState=n.baseState=t,r={pending:null,lanes:0,dispatch:null,lastRenderedReducer:Ga,lastRenderedState:t},n.queue=r,n=Al.bind(null,Ji,r),r.dispatch=n,r=Oa(!1),a=bl.bind(null,Ji,!1,r.queue),i={state:t,dispatch:null,action:e,pending:null},(r=Aa()).queue=i,n=Na.bind(null,Ji,i,a,n),i.dispatch=n,r.memoizedState=e,[t,n,!1]}function Ua(e){return $a(ya(),ea,e)}function $a(e,t,n){t=Ea(e,t,Ga)[0],e=xa(Ca)[0],t="object"==typeof t&&null!==t&&"function"==typeof t.then?ba(t):t;var r=ya(),i=r.queue,a=i.dispatch;return n!==r.memoizedState&&(Ji.flags|=2048,Wa(9,Va.bind(null,i,n),{destroy:void 0},null)),[t,a,e]}function Va(e,t){e.action=t}function Ha(e){var t=ya(),n=ea;if(null!==n)return $a(t,n,e);ya(),t=t.memoizedState;var r=(n=ya()).queue.dispatch;return n.memoizedState=e,[t,r,!1]}function Wa(e,t,n,r){return e={tag:e,create:t,inst:n,deps:r,next:null},null===(t=Ji.updateQueue)&&(t={lastEffect:null,events:null,stores:null,memoCache:null},Ji.updateQueue=t),null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function qa(){return ya().memoizedState}function Qa(e,t,n,r){var i=Aa();Ji.flags|=e,i.memoizedState=Wa(1|t,n,{destroy:void 0},void 0===r?null:r)}function Xa(e,t,n,r){var i=ya();r=void 0===r?null:r;var a=i.memoizedState.inst;null!==ea&&null!==r&&ca(r,ea.memoizedState.deps)?i.memoizedState=Wa(t,n,a,r):(Ji.flags|=e,i.memoizedState=Wa(1|t,n,a,r))}function Ka(e,t){Qa(8390656,8,e,t)}function Za(e,t){Xa(2048,8,e,t)}function Ja(e,t){return Xa(4,2,e,t)}function el(e,t){return Xa(4,4,e,t)}function tl(e,t){if("function"==typeof t){e=e();var n=t(e);return function(){"function"==typeof n?n():t(null)}}if(null!=t)return e=e(),t.current=e,function(){t.current=null}}function nl(e,t,n){n=null!=n?n.concat([e]):null,Xa(4,4,tl.bind(null,t,e),n)}function rl(){}function il(e,t){var n=ya();t=void 0===t?null:t;var r=n.memoizedState;return null!==t&&ca(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function al(e,t){var n=ya();t=void 0===t?null:t;var r=n.memoizedState;if(null!==t&&ca(t,r[1]))return r[0];if(r=e(),ia){ye(!0);try{e()}finally{ye(!1)}}return n.memoizedState=[r,t],r}function ll(e,t,n){return void 0===n||1073741824&Zi?e.memoizedState=t:(e.memoizedState=n,e=Mu(),Ji.lanes|=e,du|=e,n)}function sl(e,t,n,r){return qn(n,t)?n:null!==Ci.current?(e=ll(e,n,r),qn(e,t)||(Ul=!0),e):42&Zi?(e=Mu(),Ji.lanes|=e,du|=e,t):(Ul=!0,e.memoizedState=n)}function ol(e,t,n,r,i){var a=Y.p;Y.p=0!==a&&8>a?a:8;var l,s,o,u=B.T,c={};B.T=c,bl(e,!1,t,n);try{var d=i(),p=B.S;null!==p&&p(c,d),null!==d&&"object"==typeof d&&"function"==typeof d.then?yl(e,t,(l=r,s=[],o={status:"pending",value:null,reason:null,then:function(e){s.push(e)}},d.then((function(){o.status="fulfilled",o.value=l;for(var e=0;e<s.length;e++)(0,s[e])(l)}),(function(e){for(o.status="rejected",o.reason=e,e=0;e<s.length;e++)(0,s[e])(void 0)})),o),Bu()):yl(e,t,r,Bu())}catch(n){yl(e,t,{then:function(){},status:"rejected",reason:n},Bu())}finally{Y.p=a,B.T=u}}function ul(){}function cl(e,t,n,r){if(5!==e.tag)throw Error(l(476));var i=dl(e).queue;ol(e,i,t,U,null===n?ul:function(){return pl(e),n(r)})}function dl(e){var t=e.memoizedState;if(null!==t)return t;var n={};return(t={memoizedState:U,baseState:U,baseQueue:null,queue:{pending:null,lanes:0,dispatch:null,lastRenderedReducer:Ca,lastRenderedState:U},next:null}).next={memoizedState:n,baseState:n,baseQueue:null,queue:{pending:null,lanes:0,dispatch:null,lastRenderedReducer:Ca,lastRenderedState:n},next:null},e.memoizedState=t,null!==(e=e.alternate)&&(e.memoizedState=t),t}function pl(e){yl(e,dl(e).next.queue,{},Bu())}function fl(){return xs(Id)}function hl(){return ya().memoizedState}function ml(){return ya().memoizedState}function gl(e){for(var t=e.return;null!==t;){switch(t.tag){case 24:case 3:var n=Bu(),r=Ms(t,e=Bs(n),n);return null!==r&&(zu(r,0,n),zs(r,t,n)),t={cache:ji()},void(e.payload=t)}t=t.return}}function vl(e,t,n){var r=Bu();n={lane:r,revertLane:0,action:n,hasEagerState:!1,eagerState:null,next:null},wl(e)?_l(t,n):null!==(n=Tr(e,t,n,r))&&(zu(n,0,r),Cl(n,t,r))}function Al(e,t,n){yl(e,t,n,Bu())}function yl(e,t,n,r){var i={lane:r,revertLane:0,action:n,hasEagerState:!1,eagerState:null,next:null};if(wl(e))_l(t,i);else{var a=e.alternate;if(0===e.lanes&&(null===a||0===a.lanes)&&null!==(a=t.lastRenderedReducer))try{var l=t.lastRenderedState,s=a(l,n);if(i.hasEagerState=!0,i.eagerState=s,qn(s,l))return kr(e,t,i,0),null===tu&&Sr(),!1}catch(e){}if(null!==(n=Tr(e,t,i,r)))return zu(n,0,r),Cl(n,t,r),!0}return!1}function bl(e,t,n,r){if(r={lane:2,revertLane:wc(),action:r,hasEagerState:!1,eagerState:null,next:null},wl(e)){if(t)throw Error(l(479))}else null!==(t=Tr(e,n,r,2))&&zu(t,0,2)}function wl(e){var t=e.alternate;return e===Ji||null!==t&&t===Ji}function _l(e,t){ra=na=!0;var n=e.pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function Cl(e,t,n){if(4194176&n){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,Le(e,n)}}var xl={readContext:xs,use:wa,useCallback:ua,useContext:ua,useEffect:ua,useImperativeHandle:ua,useLayoutEffect:ua,useInsertionEffect:ua,useMemo:ua,useReducer:ua,useRef:ua,useState:ua,useDebugValue:ua,useDeferredValue:ua,useTransition:ua,useSyncExternalStore:ua,useId:ua};xl.useCacheRefresh=ua,xl.useMemoCache=ua,xl.useHostTransitionStatus=ua,xl.useFormState=ua,xl.useActionState=ua,xl.useOptimistic=ua;var El={readContext:xs,use:wa,useCallback:function(e,t){return Aa().memoizedState=[e,void 0===t?null:t],e},useContext:xs,useEffect:Ka,useImperativeHandle:function(e,t,n){n=null!=n?n.concat([e]):null,Qa(4194308,4,tl.bind(null,t,e),n)},useLayoutEffect:function(e,t){return Qa(4194308,4,e,t)},useInsertionEffect:function(e,t){Qa(4,2,e,t)},useMemo:function(e,t){var n=Aa();t=void 0===t?null:t;var r=e();if(ia){ye(!0);try{e()}finally{ye(!1)}}return n.memoizedState=[r,t],r},useReducer:function(e,t,n){var r=Aa();if(void 0!==n){var i=n(t);if(ia){ye(!0);try{n(t)}finally{ye(!1)}}}else i=t;return r.memoizedState=r.baseState=i,e={pending:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:i},r.queue=e,e=e.dispatch=vl.bind(null,Ji,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},Aa().memoizedState=e},useState:function(e){var t=(e=Oa(e)).queue,n=Al.bind(null,Ji,t);return t.dispatch=n,[e.memoizedState,n]},useDebugValue:rl,useDeferredValue:function(e,t){return ll(Aa(),e,t)},useTransition:function(){var e=Oa(!1);return e=ol.bind(null,Ji,e.queue,!0,!1),Aa().memoizedState=e,[!1,e]},useSyncExternalStore:function(e,t,n){var r=Ji,i=Aa();if(Xr){if(void 0===n)throw Error(l(407));n=n()}else{if(n=t(),null===tu)throw Error(l(349));60&ru||Ta(r,t,n)}i.memoizedState=n;var a={value:n,getSnapshot:t};return i.queue=a,Ka(Ba.bind(null,r,a,e),[e]),r.flags|=2048,Wa(9,Pa.bind(null,r,a,n,t),{destroy:void 0},null),n},useId:function(){var e=Aa(),t=tu.identifierPrefix;if(Xr){var n=Ur;t=":"+t+"R"+(n=(Yr&~(1<<32-be(Yr)-1)).toString(32)+n),0<(n=aa++)&&(t+="H"+n.toString(32)),t+=":"}else t=":"+t+"r"+(n=oa++).toString(32)+":";return e.memoizedState=t},useCacheRefresh:function(){return Aa().memoizedState=gl.bind(null,Ji)}};El.useMemoCache=_a,El.useHostTransitionStatus=fl,El.useFormState=Ya,El.useActionState=Ya,El.useOptimistic=function(e){var t=Aa();t.memoizedState=t.baseState=e;var n={pending:null,lanes:0,dispatch:null,lastRenderedReducer:null,lastRenderedState:null};return t.queue=n,t=bl.bind(null,Ji,!0,n),n.dispatch=t,[e,t]};var Sl={readContext:xs,use:wa,useCallback:il,useContext:xs,useEffect:Za,useImperativeHandle:nl,useInsertionEffect:Ja,useLayoutEffect:el,useMemo:al,useReducer:xa,useRef:qa,useState:function(){return xa(Ca)},useDebugValue:rl,useDeferredValue:function(e,t){return sl(ya(),ea.memoizedState,e,t)},useTransition:function(){var e=xa(Ca)[0],t=ya().memoizedState;return["boolean"==typeof e?e:ba(e),t]},useSyncExternalStore:ka,useId:hl};Sl.useCacheRefresh=ml,Sl.useMemoCache=_a,Sl.useHostTransitionStatus=fl,Sl.useFormState=Ua,Sl.useActionState=Ua,Sl.useOptimistic=function(e,t){return La(ya(),0,e,t)};var kl={readContext:xs,use:wa,useCallback:il,useContext:xs,useEffect:Za,useImperativeHandle:nl,useInsertionEffect:Ja,useLayoutEffect:el,useMemo:al,useReducer:Sa,useRef:qa,useState:function(){return Sa(Ca)},useDebugValue:rl,useDeferredValue:function(e,t){var n=ya();return null===ea?ll(n,e,t):sl(n,ea.memoizedState,e,t)},useTransition:function(){var e=Sa(Ca)[0],t=ya().memoizedState;return["boolean"==typeof e?e:ba(e),t]},useSyncExternalStore:ka,useId:hl};function Tl(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:M({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}kl.useCacheRefresh=ml,kl.useMemoCache=_a,kl.useHostTransitionStatus=fl,kl.useFormState=Ha,kl.useActionState=Ha,kl.useOptimistic=function(e,t){var n=ya();return null!==ea?La(n,0,e,t):(n.baseState=e,[e,n.queue.dispatch])};var Pl={isMounted:function(e){return!!(e=e._reactInternals)&&D(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=Bu(),i=Bs(r);i.payload=t,null!=n&&(i.callback=n),null!==(t=Ms(e,i,r))&&(zu(t,0,r),zs(t,e,r))},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=Bu(),i=Bs(r);i.tag=1,i.payload=t,null!=n&&(i.callback=n),null!==(t=Ms(e,i,r))&&(zu(t,0,r),zs(t,e,r))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=Bu(),r=Bs(n);r.tag=2,null!=t&&(r.callback=t),null!==(t=Ms(e,r,n))&&(zu(t,0,n),zs(t,e,n))}};function Bl(e,t,n,r,i,a,l){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,a,l):!(t.prototype&&t.prototype.isPureReactComponent&&Qn(n,r)&&Qn(i,a))}function Ml(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&Pl.enqueueReplaceState(t,t.state,null)}function zl(e,t){var n=t;if("ref"in t)for(var r in n={},t)"ref"!==r&&(n[r]=t[r]);if(e=e.defaultProps)for(var i in n===t&&(n=M({},n)),e)void 0===n[i]&&(n[i]=e[i]);return n}var Ol="function"==typeof reportError?reportError:function(e){if("object"==typeof window&&"function"==typeof window.ErrorEvent){var t=new window.ErrorEvent("error",{bubbles:!0,cancelable:!0,message:"object"==typeof e&&null!==e&&"string"==typeof e.message?String(e.message):String(e),error:e});if(!window.dispatchEvent(t))return}else if("object"==typeof process&&"function"==typeof process.emit)return void process.emit("uncaughtException",e);console.error(e)};function Ll(e){Ol(e)}function Nl(e){console.error(e)}function Il(e){Ol(e)}function Dl(e,t){try{(0,e.onUncaughtError)(t.value,{componentStack:t.stack})}catch(e){setTimeout((function(){throw e}))}}function Fl(e,t,n){try{(0,e.onCaughtError)(n.value,{componentStack:n.stack,errorBoundary:1===t.tag?t.stateNode:null})}catch(e){setTimeout((function(){throw e}))}}function Rl(e,t,n){return(n=Bs(n)).tag=3,n.payload={element:null},n.callback=function(){Dl(e,t)},n}function jl(e){return(e=Bs(e)).tag=3,e}function Gl(e,t,n,r){var i=n.type.getDerivedStateFromError;if("function"==typeof i){var a=r.value;e.payload=function(){return i(a)},e.callback=function(){Fl(t,n,r)}}var l=n.stateNode;null!==l&&"function"==typeof l.componentDidCatch&&(e.callback=function(){Fl(t,n,r),"function"!=typeof i&&(null===_u?_u=new Set([this]):_u.add(this));var e=r.stack;this.componentDidCatch(r.value,{componentStack:null!==e?e:""})})}var Yl=Error(l(461)),Ul=!1;function $l(e,t,n,r){t.child=null===e?_i(t,null,n,r):wi(t,e.child,n,r)}function Vl(e,t,n,r,i){n=n.render;var a=t.ref;if("ref"in r){var l={};for(var s in r)"ref"!==s&&(l[s]=r[s])}else l=r;return Cs(t),r=da(e,t,n,l,a,i),s=ma(),null===e||Ul?(Xr&&s&&Hr(t),t.flags|=1,$l(e,t,r,i),t.child):(ga(e,t,i),ds(e,t,i))}function Hl(e,t,n,r,i){if(null===e){var a=n.type;return"function"!=typeof a||Io(a)||void 0!==a.defaultProps||null!==n.compare?((e=Ro(n.type,null,r,t,t.mode,i)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,Wl(e,t,a,r,i))}if(a=e.child,!ps(e,i)){var l=a.memoizedProps;if((n=null!==(n=n.compare)?n:Qn)(l,r)&&e.ref===t.ref)return ds(e,t,i)}return t.flags|=1,(e=Do(a,r)).ref=t.ref,e.return=t,t.child=e}function Wl(e,t,n,r,i){if(null!==e){var a=e.memoizedProps;if(Qn(a,r)&&e.ref===t.ref){if(Ul=!1,t.pendingProps=r=a,!ps(e,i))return t.lanes=e.lanes,ds(e,t,i);131072&e.flags&&(Ul=!0)}}return Kl(e,t,n,r,i)}function ql(e,t,n){var r=t.pendingProps,i=r.children,a=!!(2&t.stateNode._pendingVisibility),l=null!==e?e.memoizedState:null;if(Xl(e,t),"hidden"===r.mode||a){if(128&t.flags){if(r=null!==l?l.baseLanes|n:n,null!==e){for(i=t.child=e.child,a=0;null!==i;)a=a|i.lanes|i.childLanes,i=i.sibling;t.childLanes=a&~r}else t.childLanes=0,t.child=null;return Ql(e,t,r,n)}if(!(536870912&n))return t.lanes=t.childLanes=536870912,Ql(e,t,null!==l?l.baseLanes|n:n,n);t.memoizedState={baseLanes:0,cachePool:null},null!==e&&Xi(0,null!==l?l.cachePool:null),null!==l?Ei(t,l):Si(),Mi(t)}else null!==l?(Xi(0,l.cachePool),Ei(t,l),zi(),t.memoizedState=null):(null!==e&&Xi(0,null),Si(),zi());return $l(e,t,i,n),t.child}function Ql(e,t,n,r){var i=Qi();return i=null===i?null:{parent:Ri._currentValue,pool:i},t.memoizedState={baseLanes:n,cachePool:i},null!==e&&Xi(0,null),Si(),Mi(t),null!==e&&ws(e,t,r,!0),null}function Xl(e,t){var n=t.ref;if(null===n)null!==e&&null!==e.ref&&(t.flags|=2097664);else{if("function"!=typeof n&&"object"!=typeof n)throw Error(l(284));null!==e&&e.ref===n||(t.flags|=2097664)}}function Kl(e,t,n,r,i){return Cs(t),n=da(e,t,n,r,void 0,i),r=ma(),null===e||Ul?(Xr&&r&&Hr(t),t.flags|=1,$l(e,t,n,i),t.child):(ga(e,t,i),ds(e,t,i))}function Zl(e,t,n,r,i,a){return Cs(t),t.updateQueue=null,n=fa(t,r,n,i),pa(e),r=ma(),null===e||Ul?(Xr&&r&&Hr(t),t.flags|=1,$l(e,t,n,a),t.child):(ga(e,t,a),ds(e,t,a))}function Jl(e,t,n,r,i){if(Cs(t),null===t.stateNode){var a=zr,l=n.contextType;"object"==typeof l&&null!==l&&(a=xs(l)),a=new n(r,a),t.memoizedState=null!==a.state&&void 0!==a.state?a.state:null,a.updater=Pl,t.stateNode=a,a._reactInternals=t,(a=t.stateNode).props=r,a.state=t.memoizedState,a.refs={},Ts(t),l=n.contextType,a.context="object"==typeof l&&null!==l?xs(l):zr,a.state=t.memoizedState,"function"==typeof(l=n.getDerivedStateFromProps)&&(Tl(t,n,l,r),a.state=t.memoizedState),"function"==typeof n.getDerivedStateFromProps||"function"==typeof a.getSnapshotBeforeUpdate||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||(l=a.state,"function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount(),l!==a.state&&Pl.enqueueReplaceState(a,a.state,null),Is(t,r,a,i),Ns(),a.state=t.memoizedState),"function"==typeof a.componentDidMount&&(t.flags|=4194308),r=!0}else if(null===e){a=t.stateNode;var s=t.memoizedProps,o=zl(n,s);a.props=o;var u=a.context,c=n.contextType;l=zr,"object"==typeof c&&null!==c&&(l=xs(c));var d=n.getDerivedStateFromProps;c="function"==typeof d||"function"==typeof a.getSnapshotBeforeUpdate,s=t.pendingProps!==s,c||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(s||u!==l)&&Ml(t,a,r,l),ks=!1;var p=t.memoizedState;a.state=p,Is(t,r,a,i),Ns(),u=t.memoizedState,s||p!==u||ks?("function"==typeof d&&(Tl(t,n,d,r),u=t.memoizedState),(o=ks||Bl(t,n,o,r,p,u,l))?(c||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(t.flags|=4194308)):("function"==typeof a.componentDidMount&&(t.flags|=4194308),t.memoizedProps=r,t.memoizedState=u),a.props=r,a.state=u,a.context=l,r=o):("function"==typeof a.componentDidMount&&(t.flags|=4194308),r=!1)}else{a=t.stateNode,Ps(e,t),c=zl(n,l=t.memoizedProps),a.props=c,d=t.pendingProps,p=a.context,u=n.contextType,o=zr,"object"==typeof u&&null!==u&&(o=xs(u)),(u="function"==typeof(s=n.getDerivedStateFromProps)||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(l!==d||p!==o)&&Ml(t,a,r,o),ks=!1,p=t.memoizedState,a.state=p,Is(t,r,a,i),Ns();var f=t.memoizedState;l!==d||p!==f||ks||null!==e&&null!==e.dependencies&&_s(e.dependencies)?("function"==typeof s&&(Tl(t,n,s,r),f=t.memoizedState),(c=ks||Bl(t,n,c,r,p,f,o)||null!==e&&null!==e.dependencies&&_s(e.dependencies))?(u||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,f,o),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,f,o)),"function"==typeof a.componentDidUpdate&&(t.flags|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(t.flags|=1024)):("function"!=typeof a.componentDidUpdate||l===e.memoizedProps&&p===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||l===e.memoizedProps&&p===e.memoizedState||(t.flags|=1024),t.memoizedProps=r,t.memoizedState=f),a.props=r,a.state=f,a.context=o,r=c):("function"!=typeof a.componentDidUpdate||l===e.memoizedProps&&p===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||l===e.memoizedProps&&p===e.memoizedState||(t.flags|=1024),r=!1)}return a=r,Xl(e,t),r=!!(128&t.flags),a||r?(a=t.stateNode,n=r&&"function"!=typeof n.getDerivedStateFromError?null:a.render(),t.flags|=1,null!==e&&r?(t.child=wi(t,e.child,null,i),t.child=wi(t,null,n,i)):$l(e,t,n,i),t.memoizedState=a.state,e=t.child):e=ds(e,t,i),e}function es(e,t,n,r){return ii(),t.flags|=256,$l(e,t,n,r),t.child}var ts={dehydrated:null,treeContext:null,retryLane:0};function ns(e){return{baseLanes:e,cachePool:Ki()}}function rs(e,t,n){return e=null!==e?e.childLanes&~n:0,t&&(e|=hu),e}function is(e,t,n){var r,i=t.pendingProps,a=!1,s=!!(128&t.flags);if((r=s)||(r=(null===e||null!==e.memoizedState)&&!!(2&Li.current)),r&&(a=!0,t.flags&=-129),r=!!(32&t.flags),t.flags&=-33,null===e){if(Xr){if(a?Bi(t):zi(),Xr){var o,u=Qr;if(o=u){e:{for(o=u,u=Zr;8!==o.nodeType;){if(!u){u=null;break e}if(null===(o=sd(o.nextSibling))){u=null;break e}}u=o}null!==u?(t.memoizedState={dehydrated:u,treeContext:null!==Gr?{id:Yr,overflow:Ur}:null,retryLane:536870912},(o=No(18,null,null,0)).stateNode=u,o.return=t,t.child=o,qr=t,Qr=null,o=!0):o=!1}o||ei(t)}if(null!==(u=t.memoizedState)&&null!==(u=u.dehydrated))return"$!"===u.data?t.lanes=16:t.lanes=536870912,null;Oi(t)}return u=i.children,i=i.fallback,a?(zi(),u=ls({mode:"hidden",children:u},a=t.mode),i=jo(i,a,n,null),u.return=t,i.return=t,u.sibling=i,t.child=u,(a=t.child).memoizedState=ns(n),a.childLanes=rs(e,r,n),t.memoizedState=ts,i):(Bi(t),as(t,u))}if(null!==(o=e.memoizedState)&&null!==(u=o.dehydrated)){if(s)256&t.flags?(Bi(t),t.flags&=-257,t=ss(e,t,n)):null!==t.memoizedState?(zi(),t.child=e.child,t.flags|=128,t=null):(zi(),a=i.fallback,u=t.mode,i=ls({mode:"visible",children:i.children},u),(a=jo(a,u,n,null)).flags|=2,i.return=t,a.return=t,i.sibling=a,t.child=i,wi(t,e.child,null,n),(i=t.child).memoizedState=ns(n),i.childLanes=rs(e,r,n),t.memoizedState=ts,t=a);else if(Bi(t),"$!"===u.data){if(r=u.nextSibling&&u.nextSibling.dataset)var c=r.dgst;r=c,(i=Error(l(419))).stack="",i.digest=r,ai({value:i,source:null,stack:null}),t=ss(e,t,n)}else if(Ul||ws(e,t,n,!1),r=!!(n&e.childLanes),Ul||r){if(null!==(r=tu)){if(42&(i=n&-n))i=1;else switch(i){case 2:i=1;break;case 8:i=4;break;case 32:i=16;break;case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:i=64;break;case 268435456:i=134217728;break;default:i=0}if(0!==(i=i&(r.suspendedLanes|n)?0:i)&&i!==o.retryLane)throw o.retryLane=i,Pr(e,i),zu(r,0,i),Yl}"$?"===u.data||$u(),t=ss(e,t,n)}else"$?"===u.data?(t.flags|=128,t.child=e.child,t=sc.bind(null,e),u._reactRetry=t,t=null):(e=o.treeContext,Qr=sd(u.nextSibling),qr=t,Xr=!0,Kr=null,Zr=!1,null!==e&&(Rr[jr++]=Yr,Rr[jr++]=Ur,Rr[jr++]=Gr,Yr=e.id,Ur=e.overflow,Gr=t),(t=as(t,i.children)).flags|=4096);return t}return a?(zi(),a=i.fallback,u=t.mode,c=(o=e.child).sibling,(i=Do(o,{mode:"hidden",children:i.children})).subtreeFlags=31457280&o.subtreeFlags,null!==c?a=Do(c,a):(a=jo(a,u,n,null)).flags|=2,a.return=t,i.return=t,i.sibling=a,t.child=i,i=a,a=t.child,null===(u=e.child.memoizedState)?u=ns(n):(null!==(o=u.cachePool)?(c=Ri._currentValue,o=o.parent!==c?{parent:c,pool:c}:o):o=Ki(),u={baseLanes:u.baseLanes|n,cachePool:o}),a.memoizedState=u,a.childLanes=rs(e,r,n),t.memoizedState=ts,i):(Bi(t),e=(n=e.child).sibling,(n=Do(n,{mode:"visible",children:i.children})).return=t,n.sibling=null,null!==e&&(null===(r=t.deletions)?(t.deletions=[e],t.flags|=16):r.push(e)),t.child=n,t.memoizedState=null,n)}function as(e,t){return(t=ls({mode:"visible",children:t},e.mode)).return=e,e.child=t}function ls(e,t){return Go(e,t,0,null)}function ss(e,t,n){return wi(t,e.child,null,n),(e=as(t,t.pendingProps.children)).flags|=2,t.memoizedState=null,e}function os(e,t,n){e.lanes|=t;var r=e.alternate;null!==r&&(r.lanes|=t),ys(e.return,t,n)}function us(e,t,n,r,i){var a=e.memoizedState;null===a?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:i}:(a.isBackwards=t,a.rendering=null,a.renderingStartTime=0,a.last=r,a.tail=n,a.tailMode=i)}function cs(e,t,n){var r=t.pendingProps,i=r.revealOrder,a=r.tail;if($l(e,t,r.children,n),2&(r=Li.current))r=1&r|2,t.flags|=128;else{if(null!==e&&128&e.flags)e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&os(e,n,t);else if(19===e.tag)os(e,n,t);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}switch(q(Li,r),i){case"forwards":for(n=t.child,i=null;null!==n;)null!==(e=n.alternate)&&null===Ni(e)&&(i=n),n=n.sibling;null===(n=i)?(i=t.child,t.child=null):(i=n.sibling,n.sibling=null),us(t,!1,i,n,a);break;case"backwards":for(n=null,i=t.child,t.child=null;null!==i;){if(null!==(e=i.alternate)&&null===Ni(e)){t.child=i;break}e=i.sibling,i.sibling=n,n=i,i=e}us(t,!0,n,null,a);break;case"together":us(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function ds(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),du|=t.lanes,!(n&t.childLanes)){if(null===e)return null;if(ws(e,t,n,!1),!(n&t.childLanes))return null}if(null!==e&&t.child!==e.child)throw Error(l(153));if(null!==t.child){for(n=Do(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Do(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function ps(e,t){return!!(e.lanes&t)||!(null===(e=e.dependencies)||!_s(e))}function fs(e,t,n){if(null!==e)if(e.memoizedProps!==t.pendingProps)Ul=!0;else{if(!(ps(e,n)||128&t.flags))return Ul=!1,function(e,t,n){switch(t.tag){case 3:J(t,t.stateNode.containerInfo),vs(0,Ri,e.memoizedState.cache),ii();break;case 27:case 5:te(t);break;case 4:J(t,t.stateNode.containerInfo);break;case 10:vs(0,t.type,t.memoizedProps.value);break;case 13:var r=t.memoizedState;if(null!==r)return null!==r.dehydrated?(Bi(t),t.flags|=128,null):n&t.child.childLanes?is(e,t,n):(Bi(t),null!==(e=ds(e,t,n))?e.sibling:null);Bi(t);break;case 19:var i=!!(128&e.flags);if((r=!!(n&t.childLanes))||(ws(e,t,n,!1),r=!!(n&t.childLanes)),i){if(r)return cs(e,t,n);t.flags|=128}if(null!==(i=t.memoizedState)&&(i.rendering=null,i.tail=null,i.lastEffect=null),q(Li,Li.current),r)break;return null;case 22:case 23:return t.lanes=0,ql(e,t,n);case 24:vs(0,Ri,e.memoizedState.cache)}return ds(e,t,n)}(e,t,n);Ul=!!(131072&e.flags)}else Ul=!1,Xr&&1048576&t.flags&&Vr(t,Fr,t.index);switch(t.lanes=0,t.tag){case 16:e:{e=t.pendingProps;var r=t.elementType,i=r._init;if(r=i(r._payload),t.type=r,"function"!=typeof r){if(null!=r){if((i=r.$$typeof)===v){t.tag=11,t=Vl(null,t,r,e,n);break e}if(i===b){t.tag=14,t=Hl(null,t,r,e,n);break e}}throw t=k(r)||r,Error(l(306,t,""))}Io(r)?(e=zl(r,e),t.tag=1,t=Jl(null,t,r,e,n)):(t.tag=0,t=Kl(null,t,r,e,n))}return t;case 0:return Kl(e,t,t.type,t.pendingProps,n);case 1:return Jl(e,t,r=t.type,i=zl(r,t.pendingProps),n);case 3:e:{if(J(t,t.stateNode.containerInfo),null===e)throw Error(l(387));var a=t.pendingProps;r=(i=t.memoizedState).element,Ps(e,t),Is(t,a,null,n);var s=t.memoizedState;if(a=s.cache,vs(0,Ri,a),a!==i.cache&&bs(t,[Ri],n,!0),Ns(),a=s.element,i.isDehydrated){if(i={element:a,isDehydrated:!1,cache:s.cache},t.updateQueue.baseState=i,t.memoizedState=i,256&t.flags){t=es(e,t,a,n);break e}if(a!==r){ai(r=Lr(Error(l(424)),t)),t=es(e,t,a,n);break e}for(Qr=sd(t.stateNode.containerInfo.firstChild),qr=t,Xr=!0,Kr=null,Zr=!0,n=_i(t,null,a,n),t.child=n;n;)n.flags=-3&n.flags|4096,n=n.sibling}else{if(ii(),a===r){t=ds(e,t,n);break e}$l(e,t,a,n)}t=t.child}return t;case 26:return Xl(e,t),null===e?(n=gd(t.type,null,t.pendingProps,null))?t.memoizedState=n:Xr||(n=t.type,e=t.pendingProps,(r=Qc(K.current).createElement(n))[Fe]=t,r[Re]=e,Hc(r,n,e),Ke(r),t.stateNode=r):t.memoizedState=gd(t.type,e.memoizedProps,t.pendingProps,e.memoizedState),null;case 27:return te(t),null===e&&Xr&&(r=t.stateNode=ud(t.type,t.pendingProps,K.current),qr=t,Zr=!0,Qr=sd(r.firstChild)),r=t.pendingProps.children,null!==e||Xr?$l(e,t,r,n):t.child=wi(t,null,r,n),Xl(e,t),t.child;case 5:return null===e&&Xr&&((i=r=Qr)&&(null!==(r=function(e,t,n,r){for(;1===e.nodeType;){var i=n;if(e.nodeName.toLowerCase()!==t.toLowerCase()){if(!r&&("INPUT"!==e.nodeName||"hidden"!==e.type))break}else if(r){if(!e[Ve])switch(t){case"meta":if(!e.hasAttribute("itemprop"))break;return e;case"link":if("stylesheet"===(a=e.getAttribute("rel"))&&e.hasAttribute("data-precedence"))break;if(a!==i.rel||e.getAttribute("href")!==(null==i.href?null:i.href)||e.getAttribute("crossorigin")!==(null==i.crossOrigin?null:i.crossOrigin)||e.getAttribute("title")!==(null==i.title?null:i.title))break;return e;case"style":if(e.hasAttribute("data-precedence"))break;return e;case"script":if(((a=e.getAttribute("src"))!==(null==i.src?null:i.src)||e.getAttribute("type")!==(null==i.type?null:i.type)||e.getAttribute("crossorigin")!==(null==i.crossOrigin?null:i.crossOrigin))&&a&&e.hasAttribute("async")&&!e.hasAttribute("itemprop"))break;return e;default:return e}}else{if("input"!==t||"hidden"!==e.type)return e;var a=null==i.name?null:""+i.name;if("hidden"===i.type&&e.getAttribute("name")===a)return e}if(null===(e=sd(e.nextSibling)))break}return null}(r,t.type,t.pendingProps,Zr))?(t.stateNode=r,qr=t,Qr=sd(r.firstChild),Zr=!1,i=!0):i=!1),i||ei(t)),te(t),i=t.type,a=t.pendingProps,s=null!==e?e.memoizedProps:null,r=a.children,Zc(i,a)?r=null:null!==s&&Zc(i,s)&&(t.flags|=32),null!==t.memoizedState&&(i=da(e,t,ha,null,null,n),Id._currentValue=i),Xl(e,t),$l(e,t,r,n),t.child;case 6:return null===e&&Xr&&((e=n=Qr)&&(null!==(n=function(e,t,n){if(""===t)return null;for(;3!==e.nodeType;){if((1!==e.nodeType||"INPUT"!==e.nodeName||"hidden"!==e.type)&&!n)return null;if(null===(e=sd(e.nextSibling)))return null}return e}(n,t.pendingProps,Zr))?(t.stateNode=n,qr=t,Qr=null,e=!0):e=!1),e||ei(t)),null;case 13:return is(e,t,n);case 4:return J(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=wi(t,null,r,n):$l(e,t,r,n),t.child;case 11:return Vl(e,t,t.type,t.pendingProps,n);case 7:return $l(e,t,t.pendingProps,n),t.child;case 8:case 12:return $l(e,t,t.pendingProps.children,n),t.child;case 10:return r=t.pendingProps,vs(0,t.type,r.value),$l(e,t,r.children,n),t.child;case 9:return i=t.type._context,r=t.pendingProps.children,Cs(t),r=r(i=xs(i)),t.flags|=1,$l(e,t,r,n),t.child;case 14:return Hl(e,t,t.type,t.pendingProps,n);case 15:return Wl(e,t,t.type,t.pendingProps,n);case 19:return cs(e,t,n);case 22:return ql(e,t,n);case 24:return Cs(t),r=xs(Ri),null===e?(null===(i=Qi())&&(i=tu,a=ji(),i.pooledCache=a,a.refCount++,null!==a&&(i.pooledCacheLanes|=n),i=a),t.memoizedState={parent:r,cache:i},Ts(t),vs(0,Ri,i)):(!!(e.lanes&n)&&(Ps(e,t),Is(t,null,null,n),Ns()),i=e.memoizedState,a=t.memoizedState,i.parent!==r?(i={parent:r,cache:r},t.memoizedState=i,0===t.lanes&&(t.memoizedState=t.updateQueue.baseState=i),vs(0,Ri,r)):(r=a.cache,vs(0,Ri,r),r!==i.cache&&bs(t,[Ri],n,!0))),$l(e,t,t.pendingProps.children,n),t.child;case 29:throw t.pendingProps}throw Error(l(156,t.tag))}var hs=H(null),ms=null,gs=null;function vs(e,t,n){q(hs,t._currentValue),t._currentValue=n}function As(e){e._currentValue=hs.current,W(hs)}function ys(e,t,n){for(;null!==e;){var r=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,null!==r&&(r.childLanes|=t)):null!==r&&(r.childLanes&t)!==t&&(r.childLanes|=t),e===n)break;e=e.return}}function bs(e,t,n,r){var i=e.child;for(null!==i&&(i.return=e);null!==i;){var a=i.dependencies;if(null!==a){var s=i.child;a=a.firstContext;e:for(;null!==a;){var o=a;a=i;for(var u=0;u<t.length;u++)if(o.context===t[u]){a.lanes|=n,null!==(o=a.alternate)&&(o.lanes|=n),ys(a.return,n,e),r||(s=null);break e}a=o.next}}else if(18===i.tag){if(null===(s=i.return))throw Error(l(341));s.lanes|=n,null!==(a=s.alternate)&&(a.lanes|=n),ys(s,n,e),s=null}else s=i.child;if(null!==s)s.return=i;else for(s=i;null!==s;){if(s===e){s=null;break}if(null!==(i=s.sibling)){i.return=s.return,s=i;break}s=s.return}i=s}}function ws(e,t,n,r){e=null;for(var i=t,a=!1;null!==i;){if(!a)if(524288&i.flags)a=!0;else if(262144&i.flags)break;if(10===i.tag){var s=i.alternate;if(null===s)throw Error(l(387));if(null!==(s=s.memoizedProps)){var o=i.type;qn(i.pendingProps.value,s.value)||(null!==e?e.push(o):e=[o])}}else if(i===Z.current){if(null===(s=i.alternate))throw Error(l(387));s.memoizedState.memoizedState!==i.memoizedState.memoizedState&&(null!==e?e.push(Id):e=[Id])}i=i.return}null!==e&&bs(t,e,n,r),t.flags|=262144}function _s(e){for(e=e.firstContext;null!==e;){if(!qn(e.context._currentValue,e.memoizedValue))return!0;e=e.next}return!1}function Cs(e){ms=e,gs=null,null!==(e=e.dependencies)&&(e.firstContext=null)}function xs(e){return Ss(ms,e)}function Es(e,t){return null===ms&&Cs(e),Ss(e,t)}function Ss(e,t){var n=t._currentValue;if(t={context:t,memoizedValue:n,next:null},null===gs){if(null===e)throw Error(l(308));gs=t,e.dependencies={lanes:0,firstContext:t},e.flags|=524288}else gs=gs.next=t;return n}var ks=!1;function Ts(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,lanes:0,hiddenCallbacks:null},callbacks:null}}function Ps(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,callbacks:null})}function Bs(e){return{lane:e,tag:0,payload:null,callback:null,next:null}}function Ms(e,t,n){var r=e.updateQueue;if(null===r)return null;if(r=r.shared,2&eu){var i=r.pending;return null===i?t.next=t:(t.next=i.next,i.next=t),r.pending=t,t=Mr(e),Br(e,null,n),t}return kr(e,r,t,n),Mr(e)}function zs(e,t,n){if(null!==(t=t.updateQueue)&&(t=t.shared,4194176&n)){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,Le(e,n)}}function Os(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var i=null,a=null;if(null!==(n=n.firstBaseUpdate)){do{var l={lane:n.lane,tag:n.tag,payload:n.payload,callback:null,next:null};null===a?i=a=l:a=a.next=l,n=n.next}while(null!==n);null===a?i=a=t:a=a.next=t}else i=a=t;return n={baseState:r.baseState,firstBaseUpdate:i,lastBaseUpdate:a,shared:r.shared,callbacks:r.callbacks},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}var Ls=!1;function Ns(){if(Ls&&null!==Vi)throw Vi}function Is(e,t,n,r){Ls=!1;var i=e.updateQueue;ks=!1;var a=i.firstBaseUpdate,l=i.lastBaseUpdate,s=i.shared.pending;if(null!==s){i.shared.pending=null;var o=s,u=o.next;o.next=null,null===l?a=u:l.next=u,l=o;var c=e.alternate;null!==c&&(s=(c=c.updateQueue).lastBaseUpdate)!==l&&(null===s?c.firstBaseUpdate=u:s.next=u,c.lastBaseUpdate=o)}if(null!==a){var d=i.baseState;for(l=0,c=u=o=null,s=a;;){var p=-536870913&s.lane,f=p!==s.lane;if(f?(ru&p)===p:(r&p)===p){0!==p&&p===$i&&(Ls=!0),null!==c&&(c=c.next={lane:0,tag:s.tag,payload:s.payload,callback:null,next:null});e:{var h=e,m=s;p=t;var g=n;switch(m.tag){case 1:if("function"==typeof(h=m.payload)){d=h.call(g,d,p);break e}d=h;break e;case 3:h.flags=-65537&h.flags|128;case 0:if(null==(p="function"==typeof(h=m.payload)?h.call(g,d,p):h))break e;d=M({},d,p);break e;case 2:ks=!0}}null!==(p=s.callback)&&(e.flags|=64,f&&(e.flags|=8192),null===(f=i.callbacks)?i.callbacks=[p]:f.push(p))}else f={lane:p,tag:s.tag,payload:s.payload,callback:s.callback,next:null},null===c?(u=c=f,o=d):c=c.next=f,l|=p;if(null===(s=s.next)){if(null===(s=i.shared.pending))break;s=(f=s).next,f.next=null,i.lastBaseUpdate=f,i.shared.pending=null}}null===c&&(o=d),i.baseState=o,i.firstBaseUpdate=u,i.lastBaseUpdate=c,null===a&&(i.shared.lanes=0),du|=l,e.lanes=l,e.memoizedState=d}}function Ds(e,t){if("function"!=typeof e)throw Error(l(191,e));e.call(t)}function Fs(e,t){var n=e.callbacks;if(null!==n)for(e.callbacks=null,e=0;e<n.length;e++)Ds(n[e],t)}function Rs(e,t){try{var n=t.updateQueue,r=null!==n?n.lastEffect:null;if(null!==r){var i=r.next;n=i;do{if((n.tag&e)===e){r=void 0;var a=n.create,l=n.inst;r=a(),l.destroy=r}n=n.next}while(n!==i)}}catch(e){rc(t,t.return,e)}}function js(e,t,n){try{var r=t.updateQueue,i=null!==r?r.lastEffect:null;if(null!==i){var a=i.next;r=a;do{if((r.tag&e)===e){var l=r.inst,s=l.destroy;if(void 0!==s){l.destroy=void 0,i=t;var o=n;try{s()}catch(e){rc(i,o,e)}}}r=r.next}while(r!==a)}}catch(e){rc(t,t.return,e)}}function Gs(e){var t=e.updateQueue;if(null!==t){var n=e.stateNode;try{Fs(t,n)}catch(t){rc(e,e.return,t)}}}function Ys(e,t,n){n.props=zl(e.type,e.memoizedProps),n.state=e.memoizedState;try{n.componentWillUnmount()}catch(n){rc(e,t,n)}}function Us(e,t){try{var n=e.ref;if(null!==n){var r=e.stateNode;switch(e.tag){case 26:case 27:case 5:var i=r;break;default:i=r}"function"==typeof n?e.refCleanup=n(i):n.current=i}}catch(n){rc(e,t,n)}}function $s(e,t){var n=e.ref,r=e.refCleanup;if(null!==n)if("function"==typeof r)try{r()}catch(n){rc(e,t,n)}finally{e.refCleanup=null,null!=(e=e.alternate)&&(e.refCleanup=null)}else if("function"==typeof n)try{n(null)}catch(n){rc(e,t,n)}else n.current=null}function Vs(e){var t=e.type,n=e.memoizedProps,r=e.stateNode;try{e:switch(t){case"button":case"input":case"select":case"textarea":n.autoFocus&&r.focus();break e;case"img":n.src?r.src=n.src:n.srcSet&&(r.srcset=n.srcSet)}}catch(t){rc(e,e.return,t)}}function Hs(e,t,n){try{var r=e.stateNode;!function(e,t,n,r){switch(t){case"div":case"span":case"svg":case"path":case"a":case"g":case"p":case"li":break;case"input":var i=null,a=null,s=null,o=null,u=null,c=null,d=null;for(h in n){var p=n[h];if(n.hasOwnProperty(h)&&null!=p)switch(h){case"checked":case"value":break;case"defaultValue":u=p;default:r.hasOwnProperty(h)||$c(e,t,h,null,r,p)}}for(var f in r){var h=r[f];if(p=n[f],r.hasOwnProperty(f)&&(null!=h||null!=p))switch(f){case"type":a=h;break;case"name":i=h;break;case"checked":c=h;break;case"defaultChecked":d=h;break;case"value":s=h;break;case"defaultValue":o=h;break;case"children":case"dangerouslySetInnerHTML":if(null!=h)throw Error(l(137,t));break;default:h!==p&&$c(e,t,f,h,r,p)}}return void gt(e,s,o,u,c,d,a,i);case"select":for(a in h=s=o=f=null,n)if(u=n[a],n.hasOwnProperty(a)&&null!=u)switch(a){case"value":break;case"multiple":h=u;default:r.hasOwnProperty(a)||$c(e,t,a,null,r,u)}for(i in r)if(a=r[i],u=n[i],r.hasOwnProperty(i)&&(null!=a||null!=u))switch(i){case"value":f=a;break;case"defaultValue":o=a;break;case"multiple":s=a;default:a!==u&&$c(e,t,i,a,r,u)}return t=o,n=s,r=h,void(null!=f?yt(e,!!n,f,!1):!!r!=!!n&&(null!=t?yt(e,!!n,t,!0):yt(e,!!n,n?[]:"",!1)));case"textarea":for(o in h=f=null,n)if(i=n[o],n.hasOwnProperty(o)&&null!=i&&!r.hasOwnProperty(o))switch(o){case"value":case"children":break;default:$c(e,t,o,null,r,i)}for(s in r)if(i=r[s],a=n[s],r.hasOwnProperty(s)&&(null!=i||null!=a))switch(s){case"value":f=i;break;case"defaultValue":h=i;break;case"children":break;case"dangerouslySetInnerHTML":if(null!=i)throw Error(l(91));break;default:i!==a&&$c(e,t,s,i,r,a)}return void bt(e,f,h);case"option":for(var m in n)f=n[m],n.hasOwnProperty(m)&&null!=f&&!r.hasOwnProperty(m)&&("selected"===m?e.selected=!1:$c(e,t,m,null,r,f));for(u in r)f=r[u],h=n[u],!r.hasOwnProperty(u)||f===h||null==f&&null==h||("selected"===u?e.selected=f&&"function"!=typeof f&&"symbol"!=typeof f:$c(e,t,u,f,r,h));return;case"img":case"link":case"area":case"base":case"br":case"col":case"embed":case"hr":case"keygen":case"meta":case"param":case"source":case"track":case"wbr":case"menuitem":for(var g in n)f=n[g],n.hasOwnProperty(g)&&null!=f&&!r.hasOwnProperty(g)&&$c(e,t,g,null,r,f);for(c in r)if(f=r[c],h=n[c],r.hasOwnProperty(c)&&f!==h&&(null!=f||null!=h))switch(c){case"children":case"dangerouslySetInnerHTML":if(null!=f)throw Error(l(137,t));break;default:$c(e,t,c,f,r,h)}return;default:if(St(t)){for(var v in n)f=n[v],n.hasOwnProperty(v)&&void 0!==f&&!r.hasOwnProperty(v)&&Vc(e,t,v,void 0,r,f);for(d in r)f=r[d],h=n[d],!r.hasOwnProperty(d)||f===h||void 0===f&&void 0===h||Vc(e,t,d,f,r,h);return}}for(var A in n)f=n[A],n.hasOwnProperty(A)&&null!=f&&!r.hasOwnProperty(A)&&$c(e,t,A,null,r,f);for(p in r)f=r[p],h=n[p],!r.hasOwnProperty(p)||f===h||null==f&&null==h||$c(e,t,p,f,r,h)}(r,e.type,n,t),r[Re]=t}catch(t){rc(e,e.return,t)}}function Ws(e){return 5===e.tag||3===e.tag||26===e.tag||27===e.tag||4===e.tag}function qs(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||Ws(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&27!==e.tag&&18!==e.tag;){if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function Qs(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Uc));else if(4!==r&&27!==r&&null!==(e=e.child))for(Qs(e,t,n),e=e.sibling;null!==e;)Qs(e,t,n),e=e.sibling}function Xs(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&27!==r&&null!==(e=e.child))for(Xs(e,t,n),e=e.sibling;null!==e;)Xs(e,t,n),e=e.sibling}var Ks=!1,Zs=!1,Js=!1,eo="function"==typeof WeakSet?WeakSet:Set,to=null,no=!1;function ro(e,t,n){var r=n.flags;switch(n.tag){case 0:case 11:case 15:vo(e,n),4&r&&Rs(5,n);break;case 1:if(vo(e,n),4&r)if(e=n.stateNode,null===t)try{e.componentDidMount()}catch(e){rc(n,n.return,e)}else{var i=zl(n.type,t.memoizedProps);t=t.memoizedState;try{e.componentDidUpdate(i,t,e.__reactInternalSnapshotBeforeUpdate)}catch(e){rc(n,n.return,e)}}64&r&&Gs(n),512&r&&Us(n,n.return);break;case 3:if(vo(e,n),64&r&&null!==(r=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 27:case 5:case 1:e=n.child.stateNode}try{Fs(r,e)}catch(e){rc(n,n.return,e)}}break;case 26:vo(e,n),512&r&&Us(n,n.return);break;case 27:case 5:vo(e,n),null===t&&4&r&&Vs(n),512&r&&Us(n,n.return);break;case 12:default:vo(e,n);break;case 13:vo(e,n),4&r&&uo(e,n);break;case 22:if(!(i=null!==n.memoizedState||Ks)){t=null!==t&&null!==t.memoizedState||Zs;var a=Ks,l=Zs;Ks=i,(Zs=t)&&!l?yo(e,n,!!(8772&n.subtreeFlags)):vo(e,n),Ks=a,Zs=l}512&r&&("manual"===n.memoizedProps.mode?Us(n,n.return):$s(n,n.return))}}function io(e){var t=e.alternate;null!==t&&(e.alternate=null,io(t)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(t=e.stateNode)&&He(t),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}var ao=null,lo=!1;function so(e,t,n){for(n=n.child;null!==n;)oo(e,t,n),n=n.sibling}function oo(e,t,n){if(Ae&&"function"==typeof Ae.onCommitFiberUnmount)try{Ae.onCommitFiberUnmount(ve,n)}catch(e){}switch(n.tag){case 26:Zs||$s(n,t),so(e,t,n),n.memoizedState?n.memoizedState.count--:n.stateNode&&(n=n.stateNode).parentNode.removeChild(n);break;case 27:Zs||$s(n,t);var r=ao,i=lo;for(ao=n.stateNode,so(e,t,n),t=(n=n.stateNode).attributes;t.length;)n.removeAttributeNode(t[0]);He(n),ao=r,lo=i;break;case 5:Zs||$s(n,t);case 6:i=ao;var a=lo;if(ao=null,so(e,t,n),lo=a,null!==(ao=i))if(lo)try{e=ao,r=n.stateNode,8===e.nodeType?e.parentNode.removeChild(r):e.removeChild(r)}catch(e){rc(n,t,e)}else try{ao.removeChild(n.stateNode)}catch(e){rc(n,t,e)}break;case 18:null!==ao&&(lo?(t=ao,n=n.stateNode,8===t.nodeType?ad(t.parentNode,n):1===t.nodeType&&ad(t,n),mp(t)):ad(ao,n.stateNode));break;case 4:r=ao,i=lo,ao=n.stateNode.containerInfo,lo=!0,so(e,t,n),ao=r,lo=i;break;case 0:case 11:case 14:case 15:Zs||js(2,n,t),Zs||js(4,n,t),so(e,t,n);break;case 1:Zs||($s(n,t),"function"==typeof(r=n.stateNode).componentWillUnmount&&Ys(n,t,r)),so(e,t,n);break;case 21:so(e,t,n);break;case 22:Zs||$s(n,t),Zs=(r=Zs)||null!==n.memoizedState,so(e,t,n),Zs=r;break;default:so(e,t,n)}}function uo(e,t){if(null===t.memoizedState&&null!==(e=t.alternate)&&null!==(e=e.memoizedState)&&null!==(e=e.dehydrated))try{mp(e)}catch(e){rc(t,t.return,e)}}function co(e,t){var n=function(e){switch(e.tag){case 13:case 19:var t=e.stateNode;return null===t&&(t=e.stateNode=new eo),t;case 22:return null===(t=(e=e.stateNode)._retryCache)&&(t=e._retryCache=new eo),t;default:throw Error(l(435,e.tag))}}(e);t.forEach((function(t){var r=oc.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}function po(e,t){var n=t.deletions;if(null!==n)for(var r=0;r<n.length;r++){var i=n[r],a=e,s=t,o=s;e:for(;null!==o;){switch(o.tag){case 27:case 5:ao=o.stateNode,lo=!1;break e;case 3:case 4:ao=o.stateNode.containerInfo,lo=!0;break e}o=o.return}if(null===ao)throw Error(l(160));oo(a,s,i),ao=null,lo=!1,null!==(a=i.alternate)&&(a.return=null),i.return=null}if(13878&t.subtreeFlags)for(t=t.child;null!==t;)ho(t,e),t=t.sibling}var fo=null;function ho(e,t){var n=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:po(t,e),mo(e),4&r&&(js(3,e,e.return),Rs(3,e),js(5,e,e.return));break;case 1:po(t,e),mo(e),512&r&&(Zs||null===n||$s(n,n.return)),64&r&&Ks&&null!==(e=e.updateQueue)&&null!==(r=e.callbacks)&&(n=e.shared.hiddenCallbacks,e.shared.hiddenCallbacks=null===n?r:n.concat(r));break;case 26:var i=fo;if(po(t,e),mo(e),512&r&&(Zs||null===n||$s(n,n.return)),4&r){var a=null!==n?n.memoizedState:null;if(r=e.memoizedState,null===n)if(null===r)if(null===e.stateNode){e:{r=e.type,n=e.memoizedProps,i=i.ownerDocument||i;t:switch(r){case"title":(!(a=i.getElementsByTagName("title")[0])||a[Ve]||a[Fe]||"http://www.w3.org/2000/svg"===a.namespaceURI||a.hasAttribute("itemprop"))&&(a=i.createElement(r),i.head.insertBefore(a,i.querySelector("head > title"))),Hc(a,r,n),a[Fe]=e,Ke(a),r=a;break e;case"link":var s=kd("link","href",i).get(r+(n.href||""));if(s)for(var o=0;o<s.length;o++)if((a=s[o]).getAttribute("href")===(null==n.href?null:n.href)&&a.getAttribute("rel")===(null==n.rel?null:n.rel)&&a.getAttribute("title")===(null==n.title?null:n.title)&&a.getAttribute("crossorigin")===(null==n.crossOrigin?null:n.crossOrigin)){s.splice(o,1);break t}Hc(a=i.createElement(r),r,n),i.head.appendChild(a);break;case"meta":if(s=kd("meta","content",i).get(r+(n.content||"")))for(o=0;o<s.length;o++)if((a=s[o]).getAttribute("content")===(null==n.content?null:""+n.content)&&a.getAttribute("name")===(null==n.name?null:n.name)&&a.getAttribute("property")===(null==n.property?null:n.property)&&a.getAttribute("http-equiv")===(null==n.httpEquiv?null:n.httpEquiv)&&a.getAttribute("charset")===(null==n.charSet?null:n.charSet)){s.splice(o,1);break t}Hc(a=i.createElement(r),r,n),i.head.appendChild(a);break;default:throw Error(l(468,r))}a[Fe]=e,Ke(a),r=a}e.stateNode=r}else Td(i,e.type,e.stateNode);else e.stateNode=_d(i,r,e.memoizedProps);else a!==r?(null===a?null!==n.stateNode&&(n=n.stateNode).parentNode.removeChild(n):a.count--,null===r?Td(i,e.type,e.stateNode):_d(i,r,e.memoizedProps)):null===r&&null!==e.stateNode&&Hs(e,e.memoizedProps,n.memoizedProps)}break;case 27:if(4&r&&null===e.alternate){i=e.stateNode,a=e.memoizedProps;try{for(var u=i.firstChild;u;){var c=u.nextSibling,d=u.nodeName;u[Ve]||"HEAD"===d||"BODY"===d||"SCRIPT"===d||"STYLE"===d||"LINK"===d&&"stylesheet"===u.rel.toLowerCase()||i.removeChild(u),u=c}for(var p=e.type,f=i.attributes;f.length;)i.removeAttributeNode(f[0]);Hc(i,p,a),i[Fe]=e,i[Re]=a}catch(t){rc(e,e.return,t)}}case 5:if(po(t,e),mo(e),512&r&&(Zs||null===n||$s(n,n.return)),32&e.flags){i=e.stateNode;try{_t(i,"")}catch(t){rc(e,e.return,t)}}4&r&&null!=e.stateNode&&Hs(e,i=e.memoizedProps,null!==n?n.memoizedProps:i),1024&r&&(Js=!0);break;case 6:if(po(t,e),mo(e),4&r){if(null===e.stateNode)throw Error(l(162));r=e.memoizedProps,n=e.stateNode;try{n.nodeValue=r}catch(t){rc(e,e.return,t)}}break;case 3:if(Sd=null,i=fo,fo=pd(t.containerInfo),po(t,e),fo=i,mo(e),4&r&&null!==n&&n.memoizedState.isDehydrated)try{mp(t.containerInfo)}catch(t){rc(e,e.return,t)}Js&&(Js=!1,go(e));break;case 4:r=fo,fo=pd(e.stateNode.containerInfo),po(t,e),mo(e),fo=r;break;case 12:po(t,e),mo(e);break;case 13:po(t,e),mo(e),8192&e.child.flags&&null!==e.memoizedState!=(null!==n&&null!==n.memoizedState)&&(yu=oe()),4&r&&null!==(r=e.updateQueue)&&(e.updateQueue=null,co(e,r));break;case 22:if(512&r&&(Zs||null===n||$s(n,n.return)),u=null!==e.memoizedState,c=null!==n&&null!==n.memoizedState,Ks=(d=Ks)||u,Zs=(p=Zs)||c,po(t,e),Zs=p,Ks=d,mo(e),(t=e.stateNode)._current=e,t._visibility&=-3,t._visibility|=2&t._pendingVisibility,8192&r&&(t._visibility=u?-2&t._visibility:1|t._visibility,u&&(t=Ks||Zs,null===n||c||t||Ao(e)),null===e.memoizedProps||"manual"!==e.memoizedProps.mode))e:for(n=null,t=e;;){if(5===t.tag||26===t.tag||27===t.tag){if(null===n){c=n=t;try{if(i=c.stateNode,u)"function"==typeof(a=i.style).setProperty?a.setProperty("display","none","important"):a.display="none";else{s=c.stateNode;var h=null!=(o=c.memoizedProps.style)&&o.hasOwnProperty("display")?o.display:null;s.style.display=null==h||"boolean"==typeof h?"":(""+h).trim()}}catch(e){rc(c,c.return,e)}}}else if(6===t.tag){if(null===n){c=t;try{c.stateNode.nodeValue=u?"":c.memoizedProps}catch(e){rc(c,c.return,e)}}}else if((22!==t.tag&&23!==t.tag||null===t.memoizedState||t===e)&&null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break e;for(;null===t.sibling;){if(null===t.return||t.return===e)break e;n===t&&(n=null),t=t.return}n===t&&(n=null),t.sibling.return=t.return,t=t.sibling}4&r&&null!==(r=e.updateQueue)&&null!==(n=r.retryQueue)&&(r.retryQueue=null,co(e,n));break;case 19:po(t,e),mo(e),4&r&&null!==(r=e.updateQueue)&&(e.updateQueue=null,co(e,r));break;case 21:break;default:po(t,e),mo(e)}}function mo(e){var t=e.flags;if(2&t){try{if(27!==e.tag){e:{for(var n=e.return;null!==n;){if(Ws(n)){var r=n;break e}n=n.return}throw Error(l(160))}switch(r.tag){case 27:var i=r.stateNode;Xs(e,qs(e),i);break;case 5:var a=r.stateNode;32&r.flags&&(_t(a,""),r.flags&=-33),Xs(e,qs(e),a);break;case 3:case 4:var s=r.stateNode.containerInfo;Qs(e,qs(e),s);break;default:throw Error(l(161))}}}catch(t){rc(e,e.return,t)}e.flags&=-3}4096&t&&(e.flags&=-4097)}function go(e){if(1024&e.subtreeFlags)for(e=e.child;null!==e;){var t=e;go(t),5===t.tag&&1024&t.flags&&t.stateNode.reset(),e=e.sibling}}function vo(e,t){if(8772&t.subtreeFlags)for(t=t.child;null!==t;)ro(e,t.alternate,t),t=t.sibling}function Ao(e){for(e=e.child;null!==e;){var t=e;switch(t.tag){case 0:case 11:case 14:case 15:js(4,t,t.return),Ao(t);break;case 1:$s(t,t.return);var n=t.stateNode;"function"==typeof n.componentWillUnmount&&Ys(t,t.return,n),Ao(t);break;case 26:case 27:case 5:$s(t,t.return),Ao(t);break;case 22:$s(t,t.return),null===t.memoizedState&&Ao(t);break;default:Ao(t)}e=e.sibling}}function yo(e,t,n){for(n=n&&!!(8772&t.subtreeFlags),t=t.child;null!==t;){var r=t.alternate,i=e,a=t,l=a.flags;switch(a.tag){case 0:case 11:case 15:yo(i,a,n),Rs(4,a);break;case 1:if(yo(i,a,n),"function"==typeof(i=(r=a).stateNode).componentDidMount)try{i.componentDidMount()}catch(e){rc(r,r.return,e)}if(null!==(i=(r=a).updateQueue)){var s=r.stateNode;try{var o=i.shared.hiddenCallbacks;if(null!==o)for(i.shared.hiddenCallbacks=null,i=0;i<o.length;i++)Ds(o[i],s)}catch(e){rc(r,r.return,e)}}n&&64&l&&Gs(a),Us(a,a.return);break;case 26:case 27:case 5:yo(i,a,n),n&&null===r&&4&l&&Vs(a),Us(a,a.return);break;case 12:default:yo(i,a,n);break;case 13:yo(i,a,n),n&&4&l&&uo(i,a);break;case 22:null===a.memoizedState&&yo(i,a,n),Us(a,a.return)}t=t.sibling}}function bo(e,t){var n=null;null!==e&&null!==e.memoizedState&&null!==e.memoizedState.cachePool&&(n=e.memoizedState.cachePool.pool),e=null,null!==t.memoizedState&&null!==t.memoizedState.cachePool&&(e=t.memoizedState.cachePool.pool),e!==n&&(null!=e&&e.refCount++,null!=n&&Gi(n))}function wo(e,t){e=null,null!==t.alternate&&(e=t.alternate.memoizedState.cache),(t=t.memoizedState.cache)!==e&&(t.refCount++,null!=e&&Gi(e))}function _o(e,t,n,r){if(10256&t.subtreeFlags)for(t=t.child;null!==t;)Co(e,t,n,r),t=t.sibling}function Co(e,t,n,r){var i=t.flags;switch(t.tag){case 0:case 11:case 15:_o(e,t,n,r),2048&i&&Rs(9,t);break;case 3:_o(e,t,n,r),2048&i&&(e=null,null!==t.alternate&&(e=t.alternate.memoizedState.cache),(t=t.memoizedState.cache)!==e&&(t.refCount++,null!=e&&Gi(e)));break;case 12:if(2048&i){_o(e,t,n,r),e=t.stateNode;try{var a=t.memoizedProps,l=a.id,s=a.onPostCommit;"function"==typeof s&&s(l,null===t.alternate?"mount":"update",e.passiveEffectDuration,-0)}catch(e){rc(t,t.return,e)}}else _o(e,t,n,r);break;case 23:break;case 22:a=t.stateNode,null!==t.memoizedState?4&a._visibility?_o(e,t,n,r):Eo(e,t):4&a._visibility?_o(e,t,n,r):(a._visibility|=4,xo(e,t,n,r,!!(10256&t.subtreeFlags))),2048&i&&bo(t.alternate,t);break;case 24:_o(e,t,n,r),2048&i&&wo(t.alternate,t);break;default:_o(e,t,n,r)}}function xo(e,t,n,r,i){for(i=i&&!!(10256&t.subtreeFlags),t=t.child;null!==t;){var a=e,l=t,s=n,o=r,u=l.flags;switch(l.tag){case 0:case 11:case 15:xo(a,l,s,o,i),Rs(8,l);break;case 23:break;case 22:var c=l.stateNode;null!==l.memoizedState?4&c._visibility?xo(a,l,s,o,i):Eo(a,l):(c._visibility|=4,xo(a,l,s,o,i)),i&&2048&u&&bo(l.alternate,l);break;case 24:xo(a,l,s,o,i),i&&2048&u&&wo(l.alternate,l);break;default:xo(a,l,s,o,i)}t=t.sibling}}function Eo(e,t){if(10256&t.subtreeFlags)for(t=t.child;null!==t;){var n=e,r=t,i=r.flags;switch(r.tag){case 22:Eo(n,r),2048&i&&bo(r.alternate,r);break;case 24:Eo(n,r),2048&i&&wo(r.alternate,r);break;default:Eo(n,r)}t=t.sibling}}var So=8192;function ko(e){if(e.subtreeFlags&So)for(e=e.child;null!==e;)To(e),e=e.sibling}function To(e){switch(e.tag){case 26:ko(e),e.flags&So&&null!==e.memoizedState&&function(e,t,n){if(null===Bd)throw Error(l(475));var r=Bd;if(!("stylesheet"!==t.type||"string"==typeof n.media&&!1===matchMedia(n.media).matches||4&t.state.loading)){if(null===t.instance){var i=vd(n.href),a=e.querySelector(Ad(i));if(a)return null!==(e=a._p)&&"object"==typeof e&&"function"==typeof e.then&&(r.count++,r=zd.bind(r),e.then(r,r)),t.state.loading|=4,t.instance=a,void Ke(a);a=e.ownerDocument||e,n=yd(n),(i=cd.get(i))&&xd(n,i),Ke(a=a.createElement("link"));var s=a;s._p=new Promise((function(e,t){s.onload=e,s.onerror=t})),Hc(a,"link",n),t.instance=a}null===r.stylesheets&&(r.stylesheets=new Map),r.stylesheets.set(t,e),(e=t.state.preload)&&!(3&t.state.loading)&&(r.count++,t=zd.bind(r),e.addEventListener("load",t),e.addEventListener("error",t))}}(fo,e.memoizedState,e.memoizedProps);break;case 5:default:ko(e);break;case 3:case 4:var t=fo;fo=pd(e.stateNode.containerInfo),ko(e),fo=t;break;case 22:null===e.memoizedState&&(null!==(t=e.alternate)&&null!==t.memoizedState?(t=So,So=16777216,ko(e),So=t):ko(e))}}function Po(e){var t=e.alternate;if(null!==t&&null!==(e=t.child)){t.child=null;do{t=e.sibling,e.sibling=null,e=t}while(null!==e)}}function Bo(e){var t=e.deletions;if(16&e.flags){if(null!==t)for(var n=0;n<t.length;n++){var r=t[n];to=r,Oo(r,e)}Po(e)}if(10256&e.subtreeFlags)for(e=e.child;null!==e;)Mo(e),e=e.sibling}function Mo(e){switch(e.tag){case 0:case 11:case 15:Bo(e),2048&e.flags&&js(9,e,e.return);break;case 3:case 12:default:Bo(e);break;case 22:var t=e.stateNode;null!==e.memoizedState&&4&t._visibility&&(null===e.return||13!==e.return.tag)?(t._visibility&=-5,zo(e)):Bo(e)}}function zo(e){var t=e.deletions;if(16&e.flags){if(null!==t)for(var n=0;n<t.length;n++){var r=t[n];to=r,Oo(r,e)}Po(e)}for(e=e.child;null!==e;){switch((t=e).tag){case 0:case 11:case 15:js(8,t,t.return),zo(t);break;case 22:4&(n=t.stateNode)._visibility&&(n._visibility&=-5,zo(t));break;default:zo(t)}e=e.sibling}}function Oo(e,t){for(;null!==to;){var n=to;switch(n.tag){case 0:case 11:case 15:js(8,n,t);break;case 23:case 22:if(null!==n.memoizedState&&null!==n.memoizedState.cachePool){var r=n.memoizedState.cachePool.pool;null!=r&&r.refCount++}break;case 24:Gi(n.memoizedState.cache)}if(null!==(r=n.child))r.return=n,to=r;else e:for(n=e;null!==to;){var i=(r=to).sibling,a=r.return;if(io(r),r===n){to=null;break e}if(null!==i){i.return=a,to=i;break e}to=a}}}function Lo(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.refCleanup=this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function No(e,t,n,r){return new Lo(e,t,n,r)}function Io(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Do(e,t){var n=e.alternate;return null===n?((n=No(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=31457280&e.flags,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n.refCleanup=e.refCleanup,n}function Fo(e,t){e.flags&=31457282;var n=e.alternate;return null===n?(e.childLanes=0,e.lanes=t,e.child=null,e.subtreeFlags=0,e.memoizedProps=null,e.memoizedState=null,e.updateQueue=null,e.dependencies=null,e.stateNode=null):(e.childLanes=n.childLanes,e.lanes=n.lanes,e.child=n.child,e.subtreeFlags=0,e.deletions=null,e.memoizedProps=n.memoizedProps,e.memoizedState=n.memoizedState,e.updateQueue=n.updateQueue,e.type=n.type,t=n.dependencies,e.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext}),e}function Ro(e,t,n,r,i,a){var s=0;if(r=e,"function"==typeof e)Io(e)&&(s=1);else if("string"==typeof e)s=function(e,t,n){if(1===n||null!=t.itemProp)return!1;switch(e){case"meta":case"title":return!0;case"style":if("string"!=typeof t.precedence||"string"!=typeof t.href||""===t.href)break;return!0;case"link":if("string"!=typeof t.rel||"string"!=typeof t.href||""===t.href||t.onLoad||t.onError)break;return"stylesheet"!==t.rel||(e=t.disabled,"string"==typeof t.precedence&&null==e);case"script":if(t.async&&"function"!=typeof t.async&&"symbol"!=typeof t.async&&!t.onLoad&&!t.onError&&t.src&&"string"==typeof t.src)return!0}return!1}(e,n,Q.current)?26:"html"===e||"head"===e||"body"===e?27:5;else e:switch(e){case d:return jo(n.children,i,a,t);case p:s=8,i|=24;break;case f:return(e=No(12,n,t,2|i)).elementType=f,e.lanes=a,e;case A:return(e=No(13,n,t,i)).elementType=A,e.lanes=a,e;case y:return(e=No(19,n,t,i)).elementType=y,e.lanes=a,e;case _:return Go(n,i,a,t);default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case h:case g:s=10;break e;case m:s=9;break e;case v:s=11;break e;case b:s=14;break e;case w:s=16,r=null;break e}s=29,n=Error(l(130,null===e?"null":typeof e,"")),r=null}return(t=No(s,n,t,i)).elementType=e,t.type=r,t.lanes=a,t}function jo(e,t,n,r){return(e=No(7,e,r,t)).lanes=n,e}function Go(e,t,n,r){(e=No(22,e,r,t)).elementType=_,e.lanes=n;var i={_visibility:1,_pendingVisibility:1,_pendingMarkers:null,_retryCache:null,_transitions:null,_current:null,detach:function(){var e=i._current;if(null===e)throw Error(l(456));if(!(2&i._pendingVisibility)){var t=Pr(e,2);null!==t&&(i._pendingVisibility|=2,zu(t,0,2))}},attach:function(){var e=i._current;if(null===e)throw Error(l(456));if(2&i._pendingVisibility){var t=Pr(e,2);null!==t&&(i._pendingVisibility&=-3,zu(t,0,2))}}};return e.stateNode=i,e}function Yo(e,t,n){return(e=No(6,e,null,t)).lanes=n,e}function Uo(e,t,n){return(t=No(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function $o(e){e.flags|=4}function Vo(e,t){if("stylesheet"!==t.type||4&t.state.loading)e.flags&=-16777217;else if(e.flags|=16777216,!Pd(t)){if(null!==(t=Ti.current)&&((4194176&ru)===ru?null!==Pi:(62914560&ru)!==ru&&!(536870912&ru)||t!==Pi))throw pi=oi,si;e.flags|=8192}}function Ho(e,t){null!==t&&(e.flags|=4),16384&e.flags&&(t=22!==e.tag?Be():536870912,e.lanes|=t,mu|=t)}function Wo(e,t){if(!Xr)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function qo(e){var t=null!==e.alternate&&e.alternate.child===e.child,n=0,r=0;if(t)for(var i=e.child;null!==i;)n|=i.lanes|i.childLanes,r|=31457280&i.subtreeFlags,r|=31457280&i.flags,i.return=e,i=i.sibling;else for(i=e.child;null!==i;)n|=i.lanes|i.childLanes,r|=i.subtreeFlags,r|=i.flags,i.return=e,i=i.sibling;return e.subtreeFlags|=r,e.childLanes=n,t}function Qo(e,t,n){var r=t.pendingProps;switch(Wr(t),t.tag){case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:case 1:return qo(t),null;case 3:return n=t.stateNode,r=null,null!==e&&(r=e.memoizedState.cache),t.memoizedState.cache!==r&&(t.flags|=2048),As(Ri),ee(),n.pendingContext&&(n.context=n.pendingContext,n.pendingContext=null),null!==e&&null!==e.child||(ri(t)?$o(t):null===e||e.memoizedState.isDehydrated&&!(256&t.flags)||(t.flags|=1024,null!==Kr&&(Lu(Kr),Kr=null))),qo(t),null;case 26:return n=t.memoizedState,null===e?($o(t),null!==n?(qo(t),Vo(t,n)):(qo(t),t.flags&=-16777217)):n?n!==e.memoizedState?($o(t),qo(t),Vo(t,n)):(qo(t),t.flags&=-16777217):(e.memoizedProps!==r&&$o(t),qo(t),t.flags&=-16777217),null;case 27:ne(t),n=K.current;var i=t.type;if(null!==e&&null!=t.stateNode)e.memoizedProps!==r&&$o(t);else{if(!r){if(null===t.stateNode)throw Error(l(166));return qo(t),null}e=Q.current,ri(t)?ti(t):(e=ud(i,r,n),t.stateNode=e,$o(t))}return qo(t),null;case 5:if(ne(t),n=t.type,null!==e&&null!=t.stateNode)e.memoizedProps!==r&&$o(t);else{if(!r){if(null===t.stateNode)throw Error(l(166));return qo(t),null}if(e=Q.current,ri(t))ti(t);else{switch(i=Qc(K.current),e){case 1:e=i.createElementNS("http://www.w3.org/2000/svg",n);break;case 2:e=i.createElementNS("http://www.w3.org/1998/Math/MathML",n);break;default:switch(n){case"svg":e=i.createElementNS("http://www.w3.org/2000/svg",n);break;case"math":e=i.createElementNS("http://www.w3.org/1998/Math/MathML",n);break;case"script":(e=i.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild);break;case"select":e="string"==typeof r.is?i.createElement("select",{is:r.is}):i.createElement("select"),r.multiple?e.multiple=!0:r.size&&(e.size=r.size);break;default:e="string"==typeof r.is?i.createElement(n,{is:r.is}):i.createElement(n)}}e[Fe]=t,e[Re]=r;e:for(i=t.child;null!==i;){if(5===i.tag||6===i.tag)e.appendChild(i.stateNode);else if(4!==i.tag&&27!==i.tag&&null!==i.child){i.child.return=i,i=i.child;continue}if(i===t)break e;for(;null===i.sibling;){if(null===i.return||i.return===t)break e;i=i.return}i.sibling.return=i.return,i=i.sibling}t.stateNode=e;e:switch(Hc(e,n,r),n){case"button":case"input":case"select":case"textarea":e=!!r.autoFocus;break e;case"img":e=!0;break e;default:e=!1}e&&$o(t)}}return qo(t),t.flags&=-16777217,null;case 6:if(e&&null!=t.stateNode)e.memoizedProps!==r&&$o(t);else{if("string"!=typeof r&&null===t.stateNode)throw Error(l(166));if(e=K.current,ri(t)){if(e=t.stateNode,n=t.memoizedProps,r=null,null!==(i=qr))switch(i.tag){case 27:case 5:r=i.memoizedProps}e[Fe]=t,(e=!!(e.nodeValue===n||null!==r&&!0===r.suppressHydrationWarning||Yc(e.nodeValue,n)))||ei(t)}else(e=Qc(e).createTextNode(r))[Fe]=t,t.stateNode=e}return qo(t),null;case 13:if(r=t.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(i=ri(t),null!==r&&null!==r.dehydrated){if(null===e){if(!i)throw Error(l(318));if(!(i=null!==(i=t.memoizedState)?i.dehydrated:null))throw Error(l(317));i[Fe]=t}else ii(),!(128&t.flags)&&(t.memoizedState=null),t.flags|=4;qo(t),i=!1}else null!==Kr&&(Lu(Kr),Kr=null),i=!0;if(!i)return 256&t.flags?(Oi(t),t):(Oi(t),null)}if(Oi(t),128&t.flags)return t.lanes=n,t;if(n=null!==r,e=null!==e&&null!==e.memoizedState,n){i=null,null!==(r=t.child).alternate&&null!==r.alternate.memoizedState&&null!==r.alternate.memoizedState.cachePool&&(i=r.alternate.memoizedState.cachePool.pool);var a=null;null!==r.memoizedState&&null!==r.memoizedState.cachePool&&(a=r.memoizedState.cachePool.pool),a!==i&&(r.flags|=2048)}return n!==e&&n&&(t.child.flags|=8192),Ho(t,t.updateQueue),qo(t),null;case 4:return ee(),null===e&&zc(t.stateNode.containerInfo),qo(t),null;case 10:return As(t.type),qo(t),null;case 19:if(W(Li),null===(i=t.memoizedState))return qo(t),null;if(r=!!(128&t.flags),null===(a=i.rendering))if(r)Wo(i,!1);else{if(0!==cu||null!==e&&128&e.flags)for(e=t.child;null!==e;){if(null!==(a=Ni(e))){for(t.flags|=128,Wo(i,!1),e=a.updateQueue,t.updateQueue=e,Ho(t,e),t.subtreeFlags=0,e=n,n=t.child;null!==n;)Fo(n,e),n=n.sibling;return q(Li,1&Li.current|2),t.child}e=e.sibling}null!==i.tail&&oe()>bu&&(t.flags|=128,r=!0,Wo(i,!1),t.lanes=4194304)}else{if(!r)if(null!==(e=Ni(a))){if(t.flags|=128,r=!0,e=e.updateQueue,t.updateQueue=e,Ho(t,e),Wo(i,!0),null===i.tail&&"hidden"===i.tailMode&&!a.alternate&&!Xr)return qo(t),null}else 2*oe()-i.renderingStartTime>bu&&536870912!==n&&(t.flags|=128,r=!0,Wo(i,!1),t.lanes=4194304);i.isBackwards?(a.sibling=t.child,t.child=a):(null!==(e=i.last)?e.sibling=a:t.child=a,i.last=a)}return null!==i.tail?(t=i.tail,i.rendering=t,i.tail=t.sibling,i.renderingStartTime=oe(),t.sibling=null,e=Li.current,q(Li,r?1&e|2:1&e),t):(qo(t),null);case 22:case 23:return Oi(t),ki(),r=null!==t.memoizedState,null!==e?null!==e.memoizedState!==r&&(t.flags|=8192):r&&(t.flags|=8192),r?!!(536870912&n)&&!(128&t.flags)&&(qo(t),6&t.subtreeFlags&&(t.flags|=8192)):qo(t),null!==(n=t.updateQueue)&&Ho(t,n.retryQueue),n=null,null!==e&&null!==e.memoizedState&&null!==e.memoizedState.cachePool&&(n=e.memoizedState.cachePool.pool),r=null,null!==t.memoizedState&&null!==t.memoizedState.cachePool&&(r=t.memoizedState.cachePool.pool),r!==n&&(t.flags|=2048),null!==e&&W(qi),null;case 24:return n=null,null!==e&&(n=e.memoizedState.cache),t.memoizedState.cache!==n&&(t.flags|=2048),As(Ri),qo(t),null;case 25:return null}throw Error(l(156,t.tag))}function Xo(e,t){switch(Wr(t),t.tag){case 1:return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 3:return As(Ri),ee(),65536&(e=t.flags)&&!(128&e)?(t.flags=-65537&e|128,t):null;case 26:case 27:case 5:return ne(t),null;case 13:if(Oi(t),null!==(e=t.memoizedState)&&null!==e.dehydrated){if(null===t.alternate)throw Error(l(340));ii()}return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 19:return W(Li),null;case 4:return ee(),null;case 10:return As(t.type),null;case 22:case 23:return Oi(t),ki(),null!==e&&W(qi),65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 24:return As(Ri),null;default:return null}}function Ko(e,t){switch(Wr(t),t.tag){case 3:As(Ri),ee();break;case 26:case 27:case 5:ne(t);break;case 4:ee();break;case 13:Oi(t);break;case 19:W(Li);break;case 10:As(t.type);break;case 22:case 23:Oi(t),ki(),null!==e&&W(qi);break;case 24:As(Ri)}}var Zo={getCacheForType:function(e){var t=xs(Ri),n=t.data.get(e);return void 0===n&&(n=e(),t.data.set(e,n)),n}},Jo="function"==typeof WeakMap?WeakMap:Map,eu=0,tu=null,nu=null,ru=0,iu=0,au=null,lu=!1,su=!1,ou=!1,uu=0,cu=0,du=0,pu=0,fu=0,hu=0,mu=0,gu=null,vu=null,Au=!1,yu=0,bu=1/0,wu=null,_u=null,Cu=!1,xu=null,Eu=0,Su=0,ku=null,Tu=0,Pu=null;function Bu(){return 2&eu&&0!==ru?ru&-ru:null!==B.T?0!==$i?$i:wc():Ie()}function Mu(){0===hu&&(hu=536870912&ru&&!Xr?536870912:Pe());var e=Ti.current;return null!==e&&(e.flags|=32),hu}function zu(e,t,n){(e===tu&&2===iu||null!==e.cancelPendingCommit)&&(ju(e,0),Du(e,ru,hu,!1)),ze(e,n),2&eu&&e===tu||(e===tu&&(!(2&eu)&&(pu|=n),4===cu&&Du(e,ru,hu,!1)),mc(e))}function Ou(e,t,n){if(6&eu)throw Error(l(327));for(var r=!n&&!(60&t)&&!(t&e.expiredLanes)||ke(e,t),i=r?function(e,t){var n=eu;eu|=2;var r=Yu(),i=Uu();tu!==e||ru!==t?(wu=null,bu=oe()+500,ju(e,t)):su=ke(e,t);e:for(;;)try{if(0!==iu&&null!==nu){t=nu;var a=au;t:switch(iu){case 1:iu=0,au=null,Xu(e,t,a,1);break;case 2:if(ui(a)){iu=0,au=null,Qu(t);break}t=function(){2===iu&&tu===e&&(iu=7),mc(e)},a.then(t,t);break e;case 3:iu=7;break e;case 4:iu=5;break e;case 7:ui(a)?(iu=0,au=null,Qu(t)):(iu=0,au=null,Xu(e,t,a,7));break;case 5:var s=null;switch(nu.tag){case 26:s=nu.memoizedState;case 5:case 27:var o=nu;if(!s||Pd(s)){iu=0,au=null;var u=o.sibling;if(null!==u)nu=u;else{var c=o.return;null!==c?(nu=c,Ku(c)):nu=null}break t}}iu=0,au=null,Xu(e,t,a,5);break;case 6:iu=0,au=null,Xu(e,t,a,6);break;case 8:Ru(),cu=6;break e;default:throw Error(l(462))}}Wu();break}catch(t){Gu(e,t)}return gs=ms=null,B.H=r,B.A=i,eu=n,null!==nu?0:(tu=null,ru=0,Sr(),cu)}(e,t):Vu(e,t,!0),a=r;;){if(0===i){su&&!r&&Du(e,t,0,!1);break}if(6===i)Du(e,t,0,!lu);else{if(n=e.current.alternate,a&&!Iu(n)){i=Vu(e,t,!1),a=!1;continue}if(2===i){if(a=t,e.errorRecoveryDisabledLanes&a)var s=0;else s=0!=(s=-536870913&e.pendingLanes)?s:536870912&s?536870912:0;if(0!==s){t=s;e:{var o=e;i=gu;var u=o.current.memoizedState.isDehydrated;if(u&&(ju(o,s).flags|=256),2!==(s=Vu(o,s,!1))){if(ou&&!u){o.errorRecoveryDisabledLanes|=a,pu|=a,i=4;break e}a=vu,vu=i,null!==a&&Lu(a)}i=s}if(a=!1,2!==i)continue}}if(1===i){ju(e,0),Du(e,t,0,!0);break}e:{switch(r=e,i){case 0:case 1:throw Error(l(345));case 4:if((4194176&t)===t){Du(r,t,hu,!lu);break e}break;case 2:vu=null;break;case 3:case 5:break;default:throw Error(l(329))}if(r.finishedWork=n,r.finishedLanes=t,(62914560&t)===t&&10<(a=yu+300-oe())){if(Du(r,t,hu,!lu),0!==Se(r,0))break e;r.timeoutHandle=ed(Nu.bind(null,r,n,vu,wu,Au,t,hu,pu,mu,lu,2,-0,0),a)}else Nu(r,n,vu,wu,Au,t,hu,pu,mu,lu,0,-0,0)}}break}mc(e)}function Lu(e){null===vu?vu=e:vu.push.apply(vu,e)}function Nu(e,t,n,r,i,a,s,o,u,c,d,p,f){var h=t.subtreeFlags;if((8192&h||!(16785408&~h))&&(Bd={stylesheets:null,count:0,unsuspend:Md},To(t),null!==(t=function(){if(null===Bd)throw Error(l(475));var e=Bd;return e.stylesheets&&0===e.count&&Ld(e,e.stylesheets),0<e.count?function(t){var n=setTimeout((function(){if(e.stylesheets&&Ld(e,e.stylesheets),e.unsuspend){var t=e.unsuspend;e.unsuspend=null,t()}}),6e4);return e.unsuspend=t,function(){e.unsuspend=null,clearTimeout(n)}}:null}())))return e.cancelPendingCommit=t(Ju.bind(null,e,n,r,i,s,o,u,1,p,f)),void Du(e,a,s,!c);Ju(e,n,r,i,s,o,u)}function Iu(e){for(var t=e;;){var n=t.tag;if((0===n||11===n||15===n)&&16384&t.flags&&null!==(n=t.updateQueue)&&null!==(n=n.stores))for(var r=0;r<n.length;r++){var i=n[r],a=i.getSnapshot;i=i.value;try{if(!qn(a(),i))return!1}catch(e){return!1}}if(n=t.child,16384&t.subtreeFlags&&null!==n)n.return=t,t=n;else{if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}function Du(e,t,n,r){t&=~fu,t&=~pu,e.suspendedLanes|=t,e.pingedLanes&=~t,r&&(e.warmLanes|=t),r=e.expirationTimes;for(var i=t;0<i;){var a=31-be(i),l=1<<a;r[a]=-1,i&=~l}0!==n&&Oe(e,n,t)}function Fu(){return!!(6&eu)||(gc(0,!1),!1)}function Ru(){if(null!==nu){if(0===iu)var e=nu.return;else gs=ms=null,va(e=nu),hi=null,mi=0,e=nu;for(;null!==e;)Ko(e.alternate,e),e=e.return;nu=null}}function ju(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;-1!==n&&(e.timeoutHandle=-1,td(n)),null!==(n=e.cancelPendingCommit)&&(e.cancelPendingCommit=null,n()),Ru(),tu=e,nu=n=Do(e.current,null),ru=t,iu=0,au=null,lu=!1,su=ke(e,t),ou=!1,mu=hu=fu=pu=du=cu=0,vu=gu=null,Au=!1,8&t&&(t|=32&t);var r=e.entangledLanes;if(0!==r)for(e=e.entanglements,r&=t;0<r;){var i=31-be(r),a=1<<i;t|=e[i],r&=~a}return uu=t,Sr(),n}function Gu(e,t){Ji=null,B.H=xl,t===li?(t=fi(),iu=3):t===si?(t=fi(),iu=4):iu=t===Yl?8:null!==t&&"object"==typeof t&&"function"==typeof t.then?6:1,au=t,null===nu&&(cu=1,Dl(e,Lr(t,e.current)))}function Yu(){var e=B.H;return B.H=xl,null===e?xl:e}function Uu(){var e=B.A;return B.A=Zo,e}function $u(){cu=4,lu||(4194176&ru)!==ru&&null!==Ti.current||(su=!0),!(134217727&du)&&!(134217727&pu)||null===tu||Du(tu,ru,hu,!1)}function Vu(e,t,n){var r=eu;eu|=2;var i=Yu(),a=Uu();tu===e&&ru===t||(wu=null,ju(e,t)),t=!1;var l=cu;e:for(;;)try{if(0!==iu&&null!==nu){var s=nu,o=au;switch(iu){case 8:Ru(),l=6;break e;case 3:case 2:case 6:null===Ti.current&&(t=!0);var u=iu;if(iu=0,au=null,Xu(e,s,o,u),n&&su){l=0;break e}break;default:u=iu,iu=0,au=null,Xu(e,s,o,u)}}Hu(),l=cu;break}catch(t){Gu(e,t)}return t&&e.shellSuspendCounter++,gs=ms=null,eu=r,B.H=i,B.A=a,null===nu&&(tu=null,ru=0,Sr()),l}function Hu(){for(;null!==nu;)qu(nu)}function Wu(){for(;null!==nu&&!le();)qu(nu)}function qu(e){var t=fs(e.alternate,e,uu);e.memoizedProps=e.pendingProps,null===t?Ku(e):nu=t}function Qu(e){var t=e,n=t.alternate;switch(t.tag){case 15:case 0:t=Zl(n,t,t.pendingProps,t.type,void 0,ru);break;case 11:t=Zl(n,t,t.pendingProps,t.type.render,t.ref,ru);break;case 5:va(t);default:Ko(n,t),t=fs(n,t=nu=Fo(t,uu),uu)}e.memoizedProps=e.pendingProps,null===t?Ku(e):nu=t}function Xu(e,t,n,r){gs=ms=null,va(t),hi=null,mi=0;var i=t.return;try{if(function(e,t,n,r,i){if(n.flags|=32768,null!==r&&"object"==typeof r&&"function"==typeof r.then){if(null!==(t=n.alternate)&&ws(t,n,i,!0),null!==(n=Ti.current)){switch(n.tag){case 13:return null===Pi?$u():null===n.alternate&&0===cu&&(cu=3),n.flags&=-257,n.flags|=65536,n.lanes=i,r===oi?n.flags|=16384:(null===(t=n.updateQueue)?n.updateQueue=new Set([r]):t.add(r),ic(e,r,i)),!1;case 22:return n.flags|=65536,r===oi?n.flags|=16384:(null===(t=n.updateQueue)?(t={transitions:null,markerInstances:null,retryQueue:new Set([r])},n.updateQueue=t):null===(n=t.retryQueue)?t.retryQueue=new Set([r]):n.add(r),ic(e,r,i)),!1}throw Error(l(435,n.tag))}return ic(e,r,i),$u(),!1}if(Xr)return null!==(t=Ti.current)?(!(65536&t.flags)&&(t.flags|=256),t.flags|=65536,t.lanes=i,r!==Jr&&ai(Lr(e=Error(l(422),{cause:r}),n))):(r!==Jr&&ai(Lr(t=Error(l(423),{cause:r}),n)),(e=e.current.alternate).flags|=65536,i&=-i,e.lanes|=i,r=Lr(r,n),Os(e,i=Rl(e.stateNode,r,i)),4!==cu&&(cu=2)),!1;var a=Error(l(520),{cause:r});if(a=Lr(a,n),null===gu?gu=[a]:gu.push(a),4!==cu&&(cu=2),null===t)return!0;r=Lr(r,n),n=t;do{switch(n.tag){case 3:return n.flags|=65536,e=i&-i,n.lanes|=e,Os(n,e=Rl(n.stateNode,r,e)),!1;case 1:if(t=n.type,a=n.stateNode,!(128&n.flags||"function"!=typeof t.getDerivedStateFromError&&(null===a||"function"!=typeof a.componentDidCatch||null!==_u&&_u.has(a))))return n.flags|=65536,i&=-i,n.lanes|=i,Gl(i=jl(i),e,n,r),Os(n,i),!1}n=n.return}while(null!==n);return!1}(e,i,t,n,ru))return cu=1,Dl(e,Lr(n,e.current)),void(nu=null)}catch(t){if(null!==i)throw nu=i,t;return cu=1,Dl(e,Lr(n,e.current)),void(nu=null)}32768&t.flags?(Xr||1===r?e=!0:su||536870912&ru?e=!1:(lu=e=!0,(2===r||3===r||6===r)&&null!==(r=Ti.current)&&13===r.tag&&(r.flags|=16384)),Zu(t,e)):Ku(t)}function Ku(e){var t=e;do{if(32768&t.flags)return void Zu(t,lu);e=t.return;var n=Qo(t.alternate,t,uu);if(null!==n)return void(nu=n);if(null!==(t=t.sibling))return void(nu=t);nu=t=e}while(null!==t);0===cu&&(cu=5)}function Zu(e,t){do{var n=Xo(e.alternate,e);if(null!==n)return n.flags&=32767,void(nu=n);if(null!==(n=e.return)&&(n.flags|=32768,n.subtreeFlags=0,n.deletions=null),!t&&null!==(e=e.sibling))return void(nu=e);nu=e=n}while(null!==e);cu=6,nu=null}function Ju(e,t,n,r,i,a,s,o,u,c){var d=B.T,p=Y.p;try{Y.p=2,B.T=null,function(e,t,n,r,i,a,s,o){do{tc()}while(null!==xu);if(6&eu)throw Error(l(327));var u=e.finishedWork;if(r=e.finishedLanes,null===u)return null;if(e.finishedWork=null,e.finishedLanes=0,u===e.current)throw Error(l(177));e.callbackNode=null,e.callbackPriority=0,e.cancelPendingCommit=null;var c=u.lanes|u.childLanes;if(function(e,t,n,r,i,a){var l=e.pendingLanes;e.pendingLanes=n,e.suspendedLanes=0,e.pingedLanes=0,e.warmLanes=0,e.expiredLanes&=n,e.entangledLanes&=n,e.errorRecoveryDisabledLanes&=n,e.shellSuspendCounter=0;var s=e.entanglements,o=e.expirationTimes,u=e.hiddenUpdates;for(n=l&~n;0<n;){var c=31-be(n),d=1<<c;s[c]=0,o[c]=-1;var p=u[c];if(null!==p)for(u[c]=null,c=0;c<p.length;c++){var f=p[c];null!==f&&(f.lane&=-536870913)}n&=~d}0!==r&&Oe(e,r,0),0!==a&&0===i&&0!==e.tag&&(e.suspendedLanes|=a&~(l&~t))}(e,r,c|=Er,a,s,o),e===tu&&(nu=tu=null,ru=0),!(10256&u.subtreeFlags)&&!(10256&u.flags)||Cu||(Cu=!0,Su=c,ku=n,ie(pe,(function(){return tc(),null}))),n=!!(15990&u.flags),15990&u.subtreeFlags||n?(n=B.T,B.T=null,a=Y.p,Y.p=2,s=eu,eu|=4,function(e,t){if(e=e.containerInfo,Wc=$d,er(e=Jn(e))){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(n=(n=e.ownerDocument)&&n.defaultView||window).getSelection&&n.getSelection();if(r&&0!==r.rangeCount){n=r.anchorNode;var i=r.anchorOffset,a=r.focusNode;r=r.focusOffset;try{n.nodeType,a.nodeType}catch(e){n=null;break e}var s=0,o=-1,u=-1,c=0,d=0,p=e,f=null;t:for(;;){for(var h;p!==n||0!==i&&3!==p.nodeType||(o=s+i),p!==a||0!==r&&3!==p.nodeType||(u=s+r),3===p.nodeType&&(s+=p.nodeValue.length),null!==(h=p.firstChild);)f=p,p=h;for(;;){if(p===e)break t;if(f===n&&++c===i&&(o=s),f===a&&++d===r&&(u=s),null!==(h=p.nextSibling))break;f=(p=f).parentNode}p=h}n=-1===o||-1===u?null:{start:o,end:u}}else n=null}n=n||{start:0,end:0}}else n=null;for(qc={focusedElem:e,selectionRange:n},$d=!1,to=t;null!==to;)if(e=(t=to).child,1028&t.subtreeFlags&&null!==e)e.return=t,to=e;else for(;null!==to;){switch(a=(t=to).alternate,e=t.flags,t.tag){case 0:case 11:case 15:case 5:case 26:case 27:case 6:case 4:case 17:break;case 1:if(1024&e&&null!==a){e=void 0,n=t,i=a.memoizedProps,a=a.memoizedState,r=n.stateNode;try{var m=zl(n.type,i,(n.elementType,n.type));e=r.getSnapshotBeforeUpdate(m,a),r.__reactInternalSnapshotBeforeUpdate=e}catch(e){rc(n,n.return,e)}}break;case 3:if(1024&e)if(9===(n=(e=t.stateNode.containerInfo).nodeType))ld(e);else if(1===n)switch(e.nodeName){case"HEAD":case"HTML":case"BODY":ld(e);break;default:e.textContent=""}break;default:if(1024&e)throw Error(l(163))}if(null!==(e=t.sibling)){e.return=t.return,to=e;break}to=t.return}m=no,no=!1}(e,u),ho(u,e),tr(qc,e.containerInfo),$d=!!Wc,qc=Wc=null,e.current=u,ro(e,u.alternate,u),se(),eu=s,Y.p=a,B.T=n):e.current=u,Cu?(Cu=!1,xu=e,Eu=r):ec(e,c),0===(c=e.pendingLanes)&&(_u=null),function(e){if(Ae&&"function"==typeof Ae.onCommitFiberRoot)try{Ae.onCommitFiberRoot(ve,e,void 0,!(128&~e.current.flags))}catch(e){}}(u.stateNode),mc(e),null!==t)for(i=e.onRecoverableError,u=0;u<t.length;u++)i((c=t[u]).value,{componentStack:c.stack});!!(3&Eu)&&tc(),c=e.pendingLanes,4194218&r&&42&c?e===Pu?Tu++:(Tu=0,Pu=e):Tu=0,gc(0,!1)}(e,t,n,r,p,i,a,s)}finally{B.T=d,Y.p=p}}function ec(e,t){0==(e.pooledCacheLanes&=t)&&null!=(t=e.pooledCache)&&(e.pooledCache=null,Gi(t))}function tc(){if(null!==xu){var e=xu,t=Su;Su=0;var n=Ne(Eu),r=B.T,i=Y.p;try{if(Y.p=32>n?32:n,B.T=null,null===xu)var a=!1;else{n=ku,ku=null;var s=xu,o=Eu;if(xu=null,Eu=0,6&eu)throw Error(l(331));var u=eu;if(eu|=4,Mo(s.current),Co(s,s.current,o,n),eu=u,gc(0,!1),Ae&&"function"==typeof Ae.onPostCommitFiberRoot)try{Ae.onPostCommitFiberRoot(ve,s)}catch(e){}a=!0}return a}finally{Y.p=i,B.T=r,ec(e,t)}}return!1}function nc(e,t,n){t=Lr(n,t),null!==(e=Ms(e,t=Rl(e.stateNode,t,2),2))&&(ze(e,2),mc(e))}function rc(e,t,n){if(3===e.tag)nc(e,e,n);else for(;null!==t;){if(3===t.tag){nc(t,e,n);break}if(1===t.tag){var r=t.stateNode;if("function"==typeof t.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===_u||!_u.has(r))){e=Lr(n,e),null!==(r=Ms(t,n=jl(2),2))&&(Gl(n,r,t,e),ze(r,2),mc(r));break}}t=t.return}}function ic(e,t,n){var r=e.pingCache;if(null===r){r=e.pingCache=new Jo;var i=new Set;r.set(t,i)}else void 0===(i=r.get(t))&&(i=new Set,r.set(t,i));i.has(n)||(ou=!0,i.add(n),e=ac.bind(null,e,t,n),t.then(e,e))}function ac(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),e.pingedLanes|=e.suspendedLanes&n,e.warmLanes&=~n,tu===e&&(ru&n)===n&&(4===cu||3===cu&&(62914560&ru)===ru&&300>oe()-yu?!(2&eu)&&ju(e,0):fu|=n,mu===ru&&(mu=0)),mc(e)}function lc(e,t){0===t&&(t=Be()),null!==(e=Pr(e,t))&&(ze(e,t),mc(e))}function sc(e){var t=e.memoizedState,n=0;null!==t&&(n=t.retryLane),lc(e,n)}function oc(e,t){var n=0;switch(e.tag){case 13:var r=e.stateNode,i=e.memoizedState;null!==i&&(n=i.retryLane);break;case 19:r=e.stateNode;break;case 22:r=e.stateNode._retryCache;break;default:throw Error(l(314))}null!==r&&r.delete(t),lc(e,n)}var uc=null,cc=null,dc=!1,pc=!1,fc=!1,hc=0;function mc(e){var t;e!==cc&&null===e.next&&(null===cc?uc=cc=e:cc=cc.next=e),pc=!0,dc||(dc=!0,t=vc,rd((function(){6&eu?ie(ce,t):t()})))}function gc(e,t){if(!fc&&pc){fc=!0;do{for(var n=!1,r=uc;null!==r;){if(!t)if(0!==e){var i=r.pendingLanes;if(0===i)var a=0;else{var l=r.suspendedLanes,s=r.pingedLanes;a=(1<<31-be(42|e)+1)-1,a=201326677&(a&=i&~(l&~s))?201326677&a|1:a?2|a:0}0!==a&&(n=!0,bc(r,a))}else a=ru,!(3&(a=Se(r,r===tu?a:0)))||ke(r,a)||(n=!0,bc(r,a));r=r.next}}while(n);fc=!1}}function vc(){pc=dc=!1;var e,t=0;0!==hc&&(((e=window.event)&&"popstate"===e.type?e!==Jc&&(Jc=e,!0):(Jc=null,!1))&&(t=hc),hc=0);for(var n=oe(),r=null,i=uc;null!==i;){var a=i.next,l=Ac(i,n);0===l?(i.next=null,null===r?uc=a:r.next=a,null===a&&(cc=r)):(r=i,(0!==t||3&l)&&(pc=!0)),i=a}gc(t,!1)}function Ac(e,t){for(var n=e.suspendedLanes,r=e.pingedLanes,i=e.expirationTimes,a=-62914561&e.pendingLanes;0<a;){var l=31-be(a),s=1<<l,o=i[l];-1===o?s&n&&!(s&r)||(i[l]=Te(s,t)):o<=t&&(e.expiredLanes|=s),a&=~s}if(n=ru,n=Se(e,e===(t=tu)?n:0),r=e.callbackNode,0===n||e===t&&2===iu||null!==e.cancelPendingCommit)return null!==r&&null!==r&&ae(r),e.callbackNode=null,e.callbackPriority=0;if(!(3&n)||ke(e,n)){if((t=n&-n)===e.callbackPriority)return t;switch(null!==r&&ae(r),Ne(n)){case 2:case 8:n=de;break;case 32:default:n=pe;break;case 268435456:n=he}return r=yc.bind(null,e),n=ie(n,r),e.callbackPriority=t,e.callbackNode=n,t}return null!==r&&null!==r&&ae(r),e.callbackPriority=2,e.callbackNode=null,2}function yc(e,t){var n=e.callbackNode;if(tc()&&e.callbackNode!==n)return null;var r=ru;return 0===(r=Se(e,e===tu?r:0))?null:(Ou(e,r,t),Ac(e,oe()),null!=e.callbackNode&&e.callbackNode===n?yc.bind(null,e):null)}function bc(e,t){if(tc())return null;Ou(e,t,!0)}function wc(){return 0===hc&&(hc=Pe()),hc}function _c(e){return null==e||"symbol"==typeof e||"boolean"==typeof e?null:"function"==typeof e?e:Pt(""+e)}function Cc(e,t){var n=t.ownerDocument.createElement("input");return n.name=t.name,n.value=t.value,e.id&&n.setAttribute("form",e.id),t.parentNode.insertBefore(n,t),e=new FormData(e),n.parentNode.removeChild(n),e}for(var xc=0;xc<wr.length;xc++){var Ec=wr[xc];_r(Ec.toLowerCase(),"on"+(Ec[0].toUpperCase()+Ec.slice(1)))}_r(fr,"onAnimationEnd"),_r(hr,"onAnimationIteration"),_r(mr,"onAnimationStart"),_r("dblclick","onDoubleClick"),_r("focusin","onFocus"),_r("focusout","onBlur"),_r(gr,"onTransitionRun"),_r(vr,"onTransitionStart"),_r(Ar,"onTransitionCancel"),_r(yr,"onTransitionEnd"),tt("onMouseEnter",["mouseout","mouseover"]),tt("onMouseLeave",["mouseout","mouseover"]),tt("onPointerEnter",["pointerout","pointerover"]),tt("onPointerLeave",["pointerout","pointerover"]),et("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),et("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),et("onBeforeInput",["compositionend","keypress","textInput","paste"]),et("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),et("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),et("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Sc="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),kc=new Set("beforetoggle cancel close invalid load scroll scrollend toggle".split(" ").concat(Sc));function Tc(e,t){t=!!(4&t);for(var n=0;n<e.length;n++){var r=e[n],i=r.event;r=r.listeners;e:{var a=void 0;if(t)for(var l=r.length-1;0<=l;l--){var s=r[l],o=s.instance,u=s.currentTarget;if(s=s.listener,o!==a&&i.isPropagationStopped())break e;a=s,i.currentTarget=u;try{a(i)}catch(e){Ol(e)}i.currentTarget=null,a=o}else for(l=0;l<r.length;l++){if(o=(s=r[l]).instance,u=s.currentTarget,s=s.listener,o!==a&&i.isPropagationStopped())break e;a=s,i.currentTarget=u;try{a(i)}catch(e){Ol(e)}i.currentTarget=null,a=o}}}}function Pc(e,t){var n=t[Ge];void 0===n&&(n=t[Ge]=new Set);var r=e+"__bubble";n.has(r)||(Oc(t,e,2,!1),n.add(r))}function Bc(e,t,n){var r=0;t&&(r|=4),Oc(n,e,r,t)}var Mc="_reactListening"+Math.random().toString(36).slice(2);function zc(e){if(!e[Mc]){e[Mc]=!0,Ze.forEach((function(t){"selectionchange"!==t&&(kc.has(t)||Bc(t,!1,e),Bc(t,!0,e))}));var t=9===e.nodeType?e:e.ownerDocument;null===t||t[Mc]||(t[Mc]=!0,Bc("selectionchange",!1,t))}}function Oc(e,t,n,r){switch(Kd(t)){case 2:var i=Vd;break;case 8:i=Hd;break;default:i=Wd}n=i.bind(null,t,n,e),i=void 0,!Ft||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(i=!0),r?void 0!==i?e.addEventListener(t,n,{capture:!0,passive:i}):e.addEventListener(t,n,!0):void 0!==i?e.addEventListener(t,n,{passive:i}):e.addEventListener(t,n,!1)}function Lc(e,t,n,r,i){var a=r;if(!(1&t||2&t||null===r))e:for(;;){if(null===r)return;var l=r.tag;if(3===l||4===l){var s=r.stateNode.containerInfo;if(s===i||8===s.nodeType&&s.parentNode===i)break;if(4===l)for(l=r.return;null!==l;){var o=l.tag;if((3===o||4===o)&&((o=l.stateNode.containerInfo)===i||8===o.nodeType&&o.parentNode===i))return;l=l.return}for(;null!==s;){if(null===(l=We(s)))return;if(5===(o=l.tag)||6===o||26===o||27===o){r=a=l;continue e}s=s.parentNode}}r=r.return}It((function(){var r=a,i=Mt(n),l=[];e:{var s=br.get(e);if(void 0!==s){var o=Zt,u=e;switch(e){case"keypress":if(0===$t(n))break e;case"keydown":case"keyup":o=hn;break;case"focusin":u="focus",o=an;break;case"focusout":u="blur",o=an;break;case"beforeblur":case"afterblur":o=an;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":o=nn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":o=rn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":o=gn;break;case fr:case hr:case mr:o=ln;break;case yr:o=vn;break;case"scroll":case"scrollend":o=en;break;case"wheel":o=An;break;case"copy":case"cut":case"paste":o=sn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":o=mn;break;case"toggle":case"beforetoggle":o=yn}var c=!!(4&t),d=!c&&("scroll"===e||"scrollend"===e),p=c?null!==s?s+"Capture":null:s;c=[];for(var f,h=r;null!==h;){var m=h;if(f=m.stateNode,5!==(m=m.tag)&&26!==m&&27!==m||null===f||null===p||null!=(m=Dt(h,p))&&c.push(Nc(h,m,f)),d)break;h=h.return}0<c.length&&(s=new o(s,u,null,n,i),l.push({event:s,listeners:c}))}}if(!(7&t)){if(o="mouseout"===e||"pointerout"===e,(!(s="mouseover"===e||"pointerover"===e)||n===Bt||!(u=n.relatedTarget||n.fromElement)||!We(u)&&!u[je])&&(o||s)&&(s=i.window===i?i:(s=i.ownerDocument)?s.defaultView||s.parentWindow:window,o?(o=r,null!==(u=(u=n.relatedTarget||n.toElement)?We(u):null)&&(d=D(u),c=u.tag,u!==d||5!==c&&27!==c&&6!==c)&&(u=null)):(o=null,u=r),o!==u)){if(c=nn,m="onMouseLeave",p="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(c=mn,m="onPointerLeave",p="onPointerEnter",h="pointer"),d=null==o?s:Qe(o),f=null==u?s:Qe(u),(s=new c(m,h+"leave",o,n,i)).target=d,s.relatedTarget=f,m=null,We(i)===r&&((c=new c(p,h+"enter",u,n,i)).target=f,c.relatedTarget=d,m=c),d=m,o&&u)e:{for(p=u,h=0,f=c=o;f;f=Dc(f))h++;for(f=0,m=p;m;m=Dc(m))f++;for(;0<h-f;)c=Dc(c),h--;for(;0<f-h;)p=Dc(p),f--;for(;h--;){if(c===p||null!==p&&c===p.alternate)break e;c=Dc(c),p=Dc(p)}c=null}else c=null;null!==o&&Fc(l,s,o,c,!1),null!==u&&null!==d&&Fc(l,d,u,c,!0)}if("select"===(o=(s=r?Qe(r):window).nodeName&&s.nodeName.toLowerCase())||"input"===o&&"file"===s.type)var g=Dn;else if(Mn(s))if(Fn)g=Wn;else{g=Vn;var v=$n}else!(o=s.nodeName)||"input"!==o.toLowerCase()||"checkbox"!==s.type&&"radio"!==s.type?r&&St(r.elementType)&&(g=Dn):g=Hn;switch(g&&(g=g(e,r))?zn(l,g,n,i):(v&&v(e,s,r),"focusout"===e&&r&&"number"===s.type&&null!=r.memoizedProps.value&&At(s,"number",s.value)),v=r?Qe(r):window,e){case"focusin":(Mn(v)||"true"===v.contentEditable)&&(rr=v,ir=r,ar=null);break;case"focusout":ar=ir=rr=null;break;case"mousedown":lr=!0;break;case"contextmenu":case"mouseup":case"dragend":lr=!1,sr(l,n,i);break;case"selectionchange":if(nr)break;case"keydown":case"keyup":sr(l,n,i)}var A;if(wn)e:{switch(e){case"compositionstart":var y="onCompositionStart";break e;case"compositionend":y="onCompositionEnd";break e;case"compositionupdate":y="onCompositionUpdate";break e}y=void 0}else Pn?kn(e,n)&&(y="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(y="onCompositionStart");y&&(xn&&"ko"!==n.locale&&(Pn||"onCompositionStart"!==y?"onCompositionEnd"===y&&Pn&&(A=Ut()):(Gt="value"in(jt=i)?jt.value:jt.textContent,Pn=!0)),0<(v=Ic(r,y)).length&&(y=new on(y,e,null,n,i),l.push({event:y,listeners:v}),(A||null!==(A=Tn(n)))&&(y.data=A))),(A=Cn?function(e,t){switch(e){case"compositionend":return Tn(t);case"keypress":return 32!==t.which?null:(Sn=!0,En);case"textInput":return(e=t.data)===En&&Sn?null:e;default:return null}}(e,n):function(e,t){if(Pn)return"compositionend"===e||!wn&&kn(e,t)?(e=Ut(),Yt=Gt=jt=null,Pn=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return xn&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(y=Ic(r,"onBeforeInput")).length&&(v=new on("onBeforeInput","beforeinput",null,n,i),l.push({event:v,listeners:y}),v.data=A),function(e,t,n,r,i){if("submit"===t&&n&&n.stateNode===i){var a=_c((i[Re]||null).action),l=r.submitter;l&&null!==(t=(t=l[Re]||null)?_c(t.formAction):l.getAttribute("formAction"))&&(a=t,l=null);var s=new Zt("action","action",null,r,i);e.push({event:s,listeners:[{instance:null,listener:function(){if(r.defaultPrevented){if(0!==hc){var e=l?Cc(i,l):new FormData(i);cl(n,{pending:!0,data:e,method:i.method,action:a},null,e)}}else"function"==typeof a&&(s.preventDefault(),e=l?Cc(i,l):new FormData(i),cl(n,{pending:!0,data:e,method:i.method,action:a},a,e))},currentTarget:i}]})}}(l,e,r,n,i)}Tc(l,t)}))}function Nc(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Ic(e,t){for(var n=t+"Capture",r=[];null!==e;){var i=e,a=i.stateNode;5!==(i=i.tag)&&26!==i&&27!==i||null===a||(null!=(i=Dt(e,n))&&r.unshift(Nc(e,i,a)),null!=(i=Dt(e,t))&&r.push(Nc(e,i,a))),e=e.return}return r}function Dc(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag&&27!==e.tag);return e||null}function Fc(e,t,n,r,i){for(var a=t._reactName,l=[];null!==n&&n!==r;){var s=n,o=s.alternate,u=s.stateNode;if(s=s.tag,null!==o&&o===r)break;5!==s&&26!==s&&27!==s||null===u||(o=u,i?null!=(u=Dt(n,a))&&l.unshift(Nc(n,u,o)):i||null!=(u=Dt(n,a))&&l.push(Nc(n,u,o))),n=n.return}0!==l.length&&e.push({event:t,listeners:l})}var Rc=/\r\n?/g,jc=/\u0000|\uFFFD/g;function Gc(e){return("string"==typeof e?e:""+e).replace(Rc,"\n").replace(jc,"")}function Yc(e,t){return t=Gc(t),Gc(e)===t}function Uc(){}function $c(e,t,n,r,i,a){switch(n){case"children":"string"==typeof r?"body"===t||"textarea"===t&&""===r||_t(e,r):("number"==typeof r||"bigint"==typeof r)&&"body"!==t&&_t(e,""+r);break;case"className":st(e,"class",r);break;case"tabIndex":st(e,"tabindex",r);break;case"dir":case"role":case"viewBox":case"width":case"height":st(e,n,r);break;case"style":Et(e,r,a);break;case"data":if("object"!==t){st(e,"data",r);break}case"src":case"href":if(""===r&&("a"!==t||"href"!==n)){e.removeAttribute(n);break}if(null==r||"function"==typeof r||"symbol"==typeof r||"boolean"==typeof r){e.removeAttribute(n);break}r=Pt(""+r),e.setAttribute(n,r);break;case"action":case"formAction":if("function"==typeof r){e.setAttribute(n,"javascript:throw new Error('A React form was unexpectedly submitted. If you called form.submit() manually, consider using form.requestSubmit() instead. If you\\'re trying to use event.stopPropagation() in a submit event handler, consider also calling event.preventDefault().')");break}if("function"==typeof a&&("formAction"===n?("input"!==t&&$c(e,t,"name",i.name,i,null),$c(e,t,"formEncType",i.formEncType,i,null),$c(e,t,"formMethod",i.formMethod,i,null),$c(e,t,"formTarget",i.formTarget,i,null)):($c(e,t,"encType",i.encType,i,null),$c(e,t,"method",i.method,i,null),$c(e,t,"target",i.target,i,null))),null==r||"symbol"==typeof r||"boolean"==typeof r){e.removeAttribute(n);break}r=Pt(""+r),e.setAttribute(n,r);break;case"onClick":null!=r&&(e.onclick=Uc);break;case"onScroll":null!=r&&Pc("scroll",e);break;case"onScrollEnd":null!=r&&Pc("scrollend",e);break;case"dangerouslySetInnerHTML":if(null!=r){if("object"!=typeof r||!("__html"in r))throw Error(l(61));if(null!=(n=r.__html)){if(null!=i.children)throw Error(l(60));e.innerHTML=n}}break;case"multiple":e.multiple=r&&"function"!=typeof r&&"symbol"!=typeof r;break;case"muted":e.muted=r&&"function"!=typeof r&&"symbol"!=typeof r;break;case"suppressContentEditableWarning":case"suppressHydrationWarning":case"defaultValue":case"defaultChecked":case"innerHTML":case"ref":case"autoFocus":break;case"xlinkHref":if(null==r||"function"==typeof r||"boolean"==typeof r||"symbol"==typeof r){e.removeAttribute("xlink:href");break}n=Pt(""+r),e.setAttributeNS("http://www.w3.org/1999/xlink","xlink:href",n);break;case"contentEditable":case"spellCheck":case"draggable":case"value":case"autoReverse":case"externalResourcesRequired":case"focusable":case"preserveAlpha":null!=r&&"function"!=typeof r&&"symbol"!=typeof r?e.setAttribute(n,""+r):e.removeAttribute(n);break;case"inert":case"allowFullScreen":case"async":case"autoPlay":case"controls":case"default":case"defer":case"disabled":case"disablePictureInPicture":case"disableRemotePlayback":case"formNoValidate":case"hidden":case"loop":case"noModule":case"noValidate":case"open":case"playsInline":case"readOnly":case"required":case"reversed":case"scoped":case"seamless":case"itemScope":r&&"function"!=typeof r&&"symbol"!=typeof r?e.setAttribute(n,""):e.removeAttribute(n);break;case"capture":case"download":!0===r?e.setAttribute(n,""):!1!==r&&null!=r&&"function"!=typeof r&&"symbol"!=typeof r?e.setAttribute(n,r):e.removeAttribute(n);break;case"cols":case"rows":case"size":case"span":null!=r&&"function"!=typeof r&&"symbol"!=typeof r&&!isNaN(r)&&1<=r?e.setAttribute(n,r):e.removeAttribute(n);break;case"rowSpan":case"start":null==r||"function"==typeof r||"symbol"==typeof r||isNaN(r)?e.removeAttribute(n):e.setAttribute(n,r);break;case"popover":Pc("beforetoggle",e),Pc("toggle",e),lt(e,"popover",r);break;case"xlinkActuate":ot(e,"http://www.w3.org/1999/xlink","xlink:actuate",r);break;case"xlinkArcrole":ot(e,"http://www.w3.org/1999/xlink","xlink:arcrole",r);break;case"xlinkRole":ot(e,"http://www.w3.org/1999/xlink","xlink:role",r);break;case"xlinkShow":ot(e,"http://www.w3.org/1999/xlink","xlink:show",r);break;case"xlinkTitle":ot(e,"http://www.w3.org/1999/xlink","xlink:title",r);break;case"xlinkType":ot(e,"http://www.w3.org/1999/xlink","xlink:type",r);break;case"xmlBase":ot(e,"http://www.w3.org/XML/1998/namespace","xml:base",r);break;case"xmlLang":ot(e,"http://www.w3.org/XML/1998/namespace","xml:lang",r);break;case"xmlSpace":ot(e,"http://www.w3.org/XML/1998/namespace","xml:space",r);break;case"is":lt(e,"is",r);break;case"innerText":case"textContent":break;default:(!(2<n.length)||"o"!==n[0]&&"O"!==n[0]||"n"!==n[1]&&"N"!==n[1])&&lt(e,n=kt.get(n)||n,r)}}function Vc(e,t,n,r,i,a){switch(n){case"style":Et(e,r,a);break;case"dangerouslySetInnerHTML":if(null!=r){if("object"!=typeof r||!("__html"in r))throw Error(l(61));if(null!=(n=r.__html)){if(null!=i.children)throw Error(l(60));e.innerHTML=n}}break;case"children":"string"==typeof r?_t(e,r):("number"==typeof r||"bigint"==typeof r)&&_t(e,""+r);break;case"onScroll":null!=r&&Pc("scroll",e);break;case"onScrollEnd":null!=r&&Pc("scrollend",e);break;case"onClick":null!=r&&(e.onclick=Uc);break;case"suppressContentEditableWarning":case"suppressHydrationWarning":case"innerHTML":case"ref":case"innerText":case"textContent":break;default:Je.hasOwnProperty(n)||("o"!==n[0]||"n"!==n[1]||(i=n.endsWith("Capture"),t=n.slice(2,i?n.length-7:void 0),"function"==typeof(a=null!=(a=e[Re]||null)?a[n]:null)&&e.removeEventListener(t,a,i),"function"!=typeof r)?n in e?e[n]=r:!0===r?e.setAttribute(n,""):lt(e,n,r):("function"!=typeof a&&null!==a&&(n in e?e[n]=null:e.hasAttribute(n)&&e.removeAttribute(n)),e.addEventListener(t,r,i)))}}function Hc(e,t,n){switch(t){case"div":case"span":case"svg":case"path":case"a":case"g":case"p":case"li":break;case"img":Pc("error",e),Pc("load",e);var r,i=!1,a=!1;for(r in n)if(n.hasOwnProperty(r)){var s=n[r];if(null!=s)switch(r){case"src":i=!0;break;case"srcSet":a=!0;break;case"children":case"dangerouslySetInnerHTML":throw Error(l(137,t));default:$c(e,t,r,s,n,null)}}return a&&$c(e,t,"srcSet",n.srcSet,n,null),void(i&&$c(e,t,"src",n.src,n,null));case"input":Pc("invalid",e);var o=r=s=a=null,u=null,c=null;for(i in n)if(n.hasOwnProperty(i)){var d=n[i];if(null!=d)switch(i){case"name":a=d;break;case"type":s=d;break;case"checked":u=d;break;case"defaultChecked":c=d;break;case"value":r=d;break;case"defaultValue":o=d;break;case"children":case"dangerouslySetInnerHTML":if(null!=d)throw Error(l(137,t));break;default:$c(e,t,i,d,n,null)}}return vt(e,r,o,u,c,s,a,!1),void dt(e);case"select":for(a in Pc("invalid",e),i=s=r=null,n)if(n.hasOwnProperty(a)&&null!=(o=n[a]))switch(a){case"value":r=o;break;case"defaultValue":s=o;break;case"multiple":i=o;default:$c(e,t,a,o,n,null)}return t=r,n=s,e.multiple=!!i,void(null!=t?yt(e,!!i,t,!1):null!=n&&yt(e,!!i,n,!0));case"textarea":for(s in Pc("invalid",e),r=a=i=null,n)if(n.hasOwnProperty(s)&&null!=(o=n[s]))switch(s){case"value":i=o;break;case"defaultValue":a=o;break;case"children":r=o;break;case"dangerouslySetInnerHTML":if(null!=o)throw Error(l(91));break;default:$c(e,t,s,o,n,null)}return wt(e,i,a,r),void dt(e);case"option":for(u in n)n.hasOwnProperty(u)&&null!=(i=n[u])&&("selected"===u?e.selected=i&&"function"!=typeof i&&"symbol"!=typeof i:$c(e,t,u,i,n,null));return;case"dialog":Pc("cancel",e),Pc("close",e);break;case"iframe":case"object":Pc("load",e);break;case"video":case"audio":for(i=0;i<Sc.length;i++)Pc(Sc[i],e);break;case"image":Pc("error",e),Pc("load",e);break;case"details":Pc("toggle",e);break;case"embed":case"source":case"link":Pc("error",e),Pc("load",e);case"area":case"base":case"br":case"col":case"hr":case"keygen":case"meta":case"param":case"track":case"wbr":case"menuitem":for(c in n)if(n.hasOwnProperty(c)&&null!=(i=n[c]))switch(c){case"children":case"dangerouslySetInnerHTML":throw Error(l(137,t));default:$c(e,t,c,i,n,null)}return;default:if(St(t)){for(d in n)n.hasOwnProperty(d)&&void 0!==(i=n[d])&&Vc(e,t,d,i,n,void 0);return}}for(o in n)n.hasOwnProperty(o)&&null!=(i=n[o])&&$c(e,t,o,i,n,null)}var Wc=null,qc=null;function Qc(e){return 9===e.nodeType?e:e.ownerDocument}function Xc(e){switch(e){case"http://www.w3.org/2000/svg":return 1;case"http://www.w3.org/1998/Math/MathML":return 2;default:return 0}}function Kc(e,t){if(0===e)switch(t){case"svg":return 1;case"math":return 2;default:return 0}return 1===e&&"foreignObject"===t?0:e}function Zc(e,t){return"textarea"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"bigint"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var Jc=null,ed="function"==typeof setTimeout?setTimeout:void 0,td="function"==typeof clearTimeout?clearTimeout:void 0,nd="function"==typeof Promise?Promise:void 0,rd="function"==typeof queueMicrotask?queueMicrotask:void 0!==nd?function(e){return nd.resolve(null).then(e).catch(id)}:ed;function id(e){setTimeout((function(){throw e}))}function ad(e,t){var n=t,r=0;do{var i=n.nextSibling;if(e.removeChild(n),i&&8===i.nodeType)if("/$"===(n=i.data)){if(0===r)return e.removeChild(i),void mp(t);r--}else"$"!==n&&"$?"!==n&&"$!"!==n||r++;n=i}while(n);mp(t)}function ld(e){var t=e.firstChild;for(t&&10===t.nodeType&&(t=t.nextSibling);t;){var n=t;switch(t=t.nextSibling,n.nodeName){case"HTML":case"HEAD":case"BODY":ld(n),He(n);continue;case"SCRIPT":case"STYLE":continue;case"LINK":if("stylesheet"===n.rel.toLowerCase())continue}e.removeChild(n)}}function sd(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break;if(8===t){if("$"===(t=e.data)||"$!"===t||"$?"===t||"F!"===t||"F"===t)break;if("/$"===t)return null}}return e}function od(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}function ud(e,t,n){switch(t=Qc(n),e){case"html":if(!(e=t.documentElement))throw Error(l(452));return e;case"head":if(!(e=t.head))throw Error(l(453));return e;case"body":if(!(e=t.body))throw Error(l(454));return e;default:throw Error(l(451))}}var cd=new Map,dd=new Set;function pd(e){return"function"==typeof e.getRootNode?e.getRootNode():e.ownerDocument}var fd=Y.d;Y.d={f:function(){var e=fd.f(),t=Fu();return e||t},r:function(e){var t=qe(e);null!==t&&5===t.tag&&"form"===t.type?pl(t):fd.r(e)},D:function(e){fd.D(e),md("dns-prefetch",e,null)},C:function(e,t){fd.C(e,t),md("preconnect",e,t)},L:function(e,t,n){fd.L(e,t,n);var r=hd;if(r&&e&&t){var i='link[rel="preload"][as="'+mt(t)+'"]';"image"===t&&n&&n.imageSrcSet?(i+='[imagesrcset="'+mt(n.imageSrcSet)+'"]',"string"==typeof n.imageSizes&&(i+='[imagesizes="'+mt(n.imageSizes)+'"]')):i+='[href="'+mt(e)+'"]';var a=i;switch(t){case"style":a=vd(e);break;case"script":a=bd(e)}cd.has(a)||(e=M({rel:"preload",href:"image"===t&&n&&n.imageSrcSet?void 0:e,as:t},n),cd.set(a,e),null!==r.querySelector(i)||"style"===t&&r.querySelector(Ad(a))||"script"===t&&r.querySelector(wd(a))||(Hc(t=r.createElement("link"),"link",e),Ke(t),r.head.appendChild(t)))}},m:function(e,t){fd.m(e,t);var n=hd;if(n&&e){var r=t&&"string"==typeof t.as?t.as:"script",i='link[rel="modulepreload"][as="'+mt(r)+'"][href="'+mt(e)+'"]',a=i;switch(r){case"audioworklet":case"paintworklet":case"serviceworker":case"sharedworker":case"worker":case"script":a=bd(e)}if(!cd.has(a)&&(e=M({rel:"modulepreload",href:e},t),cd.set(a,e),null===n.querySelector(i))){switch(r){case"audioworklet":case"paintworklet":case"serviceworker":case"sharedworker":case"worker":case"script":if(n.querySelector(wd(a)))return}Hc(r=n.createElement("link"),"link",e),Ke(r),n.head.appendChild(r)}}},X:function(e,t){fd.X(e,t);var n=hd;if(n&&e){var r=Xe(n).hoistableScripts,i=bd(e),a=r.get(i);a||((a=n.querySelector(wd(i)))||(e=M({src:e,async:!0},t),(t=cd.get(i))&&Ed(e,t),Ke(a=n.createElement("script")),Hc(a,"link",e),n.head.appendChild(a)),a={type:"script",instance:a,count:1,state:null},r.set(i,a))}},S:function(e,t,n){fd.S(e,t,n);var r=hd;if(r&&e){var i=Xe(r).hoistableStyles,a=vd(e);t=t||"default";var l=i.get(a);if(!l){var s={loading:0,preload:null};if(l=r.querySelector(Ad(a)))s.loading=5;else{e=M({rel:"stylesheet",href:e,"data-precedence":t},n),(n=cd.get(a))&&xd(e,n);var o=l=r.createElement("link");Ke(o),Hc(o,"link",e),o._p=new Promise((function(e,t){o.onload=e,o.onerror=t})),o.addEventListener("load",(function(){s.loading|=1})),o.addEventListener("error",(function(){s.loading|=2})),s.loading|=4,Cd(l,t,r)}l={type:"stylesheet",instance:l,count:1,state:s},i.set(a,l)}}},M:function(e,t){fd.M(e,t);var n=hd;if(n&&e){var r=Xe(n).hoistableScripts,i=bd(e),a=r.get(i);a||((a=n.querySelector(wd(i)))||(e=M({src:e,async:!0,type:"module"},t),(t=cd.get(i))&&Ed(e,t),Ke(a=n.createElement("script")),Hc(a,"link",e),n.head.appendChild(a)),a={type:"script",instance:a,count:1,state:null},r.set(i,a))}}};var hd="undefined"==typeof document?null:document;function md(e,t,n){var r=hd;if(r&&"string"==typeof t&&t){var i=mt(t);i='link[rel="'+e+'"][href="'+i+'"]',"string"==typeof n&&(i+='[crossorigin="'+n+'"]'),dd.has(i)||(dd.add(i),e={rel:e,crossOrigin:n,href:t},null===r.querySelector(i)&&(Hc(t=r.createElement("link"),"link",e),Ke(t),r.head.appendChild(t)))}}function gd(e,t,n,r){var i,a,s,o,u=(u=K.current)?pd(u):null;if(!u)throw Error(l(446));switch(e){case"meta":case"title":return null;case"style":return"string"==typeof n.precedence&&"string"==typeof n.href?(t=vd(n.href),(r=(n=Xe(u).hoistableStyles).get(t))||(r={type:"style",instance:null,count:0,state:null},n.set(t,r)),r):{type:"void",instance:null,count:0,state:null};case"link":if("stylesheet"===n.rel&&"string"==typeof n.href&&"string"==typeof n.precedence){e=vd(n.href);var c=Xe(u).hoistableStyles,d=c.get(e);if(d||(u=u.ownerDocument||u,d={type:"stylesheet",instance:null,count:0,state:{loading:0,preload:null}},c.set(e,d),(c=u.querySelector(Ad(e)))&&!c._p&&(d.instance=c,d.state.loading=5),cd.has(e)||(n={rel:"preload",as:"style",href:n.href,crossOrigin:n.crossOrigin,integrity:n.integrity,media:n.media,hrefLang:n.hrefLang,referrerPolicy:n.referrerPolicy},cd.set(e,n),c||(i=u,a=e,s=n,o=d.state,i.querySelector('link[rel="preload"][as="style"]['+a+"]")?o.loading=1:(a=i.createElement("link"),o.preload=a,a.addEventListener("load",(function(){return o.loading|=1})),a.addEventListener("error",(function(){return o.loading|=2})),Hc(a,"link",s),Ke(a),i.head.appendChild(a))))),t&&null===r)throw Error(l(528,""));return d}if(t&&null!==r)throw Error(l(529,""));return null;case"script":return t=n.async,"string"==typeof(n=n.src)&&t&&"function"!=typeof t&&"symbol"!=typeof t?(t=bd(n),(r=(n=Xe(u).hoistableScripts).get(t))||(r={type:"script",instance:null,count:0,state:null},n.set(t,r)),r):{type:"void",instance:null,count:0,state:null};default:throw Error(l(444,e))}}function vd(e){return'href="'+mt(e)+'"'}function Ad(e){return'link[rel="stylesheet"]['+e+"]"}function yd(e){return M({},e,{"data-precedence":e.precedence,precedence:null})}function bd(e){return'[src="'+mt(e)+'"]'}function wd(e){return"script[async]"+e}function _d(e,t,n){if(t.count++,null===t.instance)switch(t.type){case"style":var r=e.querySelector('style[data-href~="'+mt(n.href)+'"]');if(r)return t.instance=r,Ke(r),r;var i=M({},n,{"data-href":n.href,"data-precedence":n.precedence,href:null,precedence:null});return Ke(r=(e.ownerDocument||e).createElement("style")),Hc(r,"style",i),Cd(r,n.precedence,e),t.instance=r;case"stylesheet":i=vd(n.href);var a=e.querySelector(Ad(i));if(a)return t.state.loading|=4,t.instance=a,Ke(a),a;r=yd(n),(i=cd.get(i))&&xd(r,i),Ke(a=(e.ownerDocument||e).createElement("link"));var s=a;return s._p=new Promise((function(e,t){s.onload=e,s.onerror=t})),Hc(a,"link",r),t.state.loading|=4,Cd(a,n.precedence,e),t.instance=a;case"script":return a=bd(n.src),(i=e.querySelector(wd(a)))?(t.instance=i,Ke(i),i):(r=n,(i=cd.get(a))&&Ed(r=M({},n),i),Ke(i=(e=e.ownerDocument||e).createElement("script")),Hc(i,"link",r),e.head.appendChild(i),t.instance=i);case"void":return null;default:throw Error(l(443,t.type))}else"stylesheet"===t.type&&!(4&t.state.loading)&&(r=t.instance,t.state.loading|=4,Cd(r,n.precedence,e));return t.instance}function Cd(e,t,n){for(var r=n.querySelectorAll('link[rel="stylesheet"][data-precedence],style[data-precedence]'),i=r.length?r[r.length-1]:null,a=i,l=0;l<r.length;l++){var s=r[l];if(s.dataset.precedence===t)a=s;else if(a!==i)break}a?a.parentNode.insertBefore(e,a.nextSibling):(t=9===n.nodeType?n.head:n).insertBefore(e,t.firstChild)}function xd(e,t){null==e.crossOrigin&&(e.crossOrigin=t.crossOrigin),null==e.referrerPolicy&&(e.referrerPolicy=t.referrerPolicy),null==e.title&&(e.title=t.title)}function Ed(e,t){null==e.crossOrigin&&(e.crossOrigin=t.crossOrigin),null==e.referrerPolicy&&(e.referrerPolicy=t.referrerPolicy),null==e.integrity&&(e.integrity=t.integrity)}var Sd=null;function kd(e,t,n){if(null===Sd){var r=new Map,i=Sd=new Map;i.set(n,r)}else(r=(i=Sd).get(n))||(r=new Map,i.set(n,r));if(r.has(e))return r;for(r.set(e,null),n=n.getElementsByTagName(e),i=0;i<n.length;i++){var a=n[i];if(!(a[Ve]||a[Fe]||"link"===e&&"stylesheet"===a.getAttribute("rel"))&&"http://www.w3.org/2000/svg"!==a.namespaceURI){var l=a.getAttribute(t)||"";l=e+l;var s=r.get(l);s?s.push(a):r.set(l,[a])}}return r}function Td(e,t,n){(e=e.ownerDocument||e).head.insertBefore(n,"title"===t?e.querySelector("head > title"):null)}function Pd(e){return!!("stylesheet"!==e.type||3&e.state.loading)}var Bd=null;function Md(){}function zd(){if(this.count--,0===this.count)if(this.stylesheets)Ld(this,this.stylesheets);else if(this.unsuspend){var e=this.unsuspend;this.unsuspend=null,e()}}var Od=null;function Ld(e,t){e.stylesheets=null,null!==e.unsuspend&&(e.count++,Od=new Map,t.forEach(Nd,e),Od=null,zd.call(e))}function Nd(e,t){if(!(4&t.state.loading)){var n=Od.get(e);if(n)var r=n.get(null);else{n=new Map,Od.set(e,n);for(var i=e.querySelectorAll("link[data-precedence],style[data-precedence]"),a=0;a<i.length;a++){var l=i[a];"LINK"!==l.nodeName&&"not all"===l.getAttribute("media")||(n.set(l.dataset.precedence,l),r=l)}r&&n.set(null,r)}l=(i=t.instance).getAttribute("data-precedence"),(a=n.get(l)||r)===r&&n.set(null,i),n.set(l,i),this.count++,r=zd.bind(this),i.addEventListener("load",r),i.addEventListener("error",r),a?a.parentNode.insertBefore(i,a.nextSibling):(e=9===e.nodeType?e.head:e).insertBefore(i,e.firstChild),t.state.loading|=4}}var Id={$$typeof:g,Provider:null,Consumer:null,_currentValue:U,_currentValue2:U,_threadCount:0};function Dd(e,t,n,r,i,a,l,s){this.tag=1,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.next=this.pendingContext=this.context=this.cancelPendingCommit=null,this.callbackPriority=0,this.expirationTimes=Me(-1),this.entangledLanes=this.shellSuspendCounter=this.errorRecoveryDisabledLanes=this.finishedLanes=this.expiredLanes=this.warmLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=Me(0),this.hiddenUpdates=Me(null),this.identifierPrefix=r,this.onUncaughtError=i,this.onCaughtError=a,this.onRecoverableError=l,this.pooledCache=null,this.pooledCacheLanes=0,this.formState=s,this.incompleteTransitions=new Map}function Fd(e,t,n,r,i,a,l,s,o,u,c,d){return e=new Dd(e,t,n,l,s,o,u,d),t=1,!0===a&&(t|=24),a=No(3,null,null,t),e.current=a,a.stateNode=e,(t=ji()).refCount++,e.pooledCache=t,t.refCount++,a.memoizedState={element:r,isDehydrated:n,cache:t},Ts(a),e}function Rd(e){return e?e=zr:zr}function jd(e,t,n,r,i,a){i=Rd(i),null===r.context?r.context=i:r.pendingContext=i,(r=Bs(t)).payload={element:n},null!==(a=void 0===a?null:a)&&(r.callback=a),null!==(n=Ms(e,r,t))&&(zu(n,0,t),zs(n,e,t))}function Gd(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function Yd(e,t){Gd(e,t),(e=e.alternate)&&Gd(e,t)}function Ud(e){if(13===e.tag){var t=Pr(e,67108864);null!==t&&zu(t,0,67108864),Yd(e,67108864)}}var $d=!0;function Vd(e,t,n,r){var i=B.T;B.T=null;var a=Y.p;try{Y.p=2,Wd(e,t,n,r)}finally{Y.p=a,B.T=i}}function Hd(e,t,n,r){var i=B.T;B.T=null;var a=Y.p;try{Y.p=8,Wd(e,t,n,r)}finally{Y.p=a,B.T=i}}function Wd(e,t,n,r){if($d){var i=qd(r);if(null===i)Lc(e,t,r,Qd,n),lp(e,r);else if(function(e,t,n,r,i){switch(t){case"focusin":return Jd=sp(Jd,e,t,n,r,i),!0;case"dragenter":return ep=sp(ep,e,t,n,r,i),!0;case"mouseover":return tp=sp(tp,e,t,n,r,i),!0;case"pointerover":var a=i.pointerId;return np.set(a,sp(np.get(a)||null,e,t,n,r,i)),!0;case"gotpointercapture":return a=i.pointerId,rp.set(a,sp(rp.get(a)||null,e,t,n,r,i)),!0}return!1}(i,e,t,n,r))r.stopPropagation();else if(lp(e,r),4&t&&-1<ap.indexOf(e)){for(;null!==i;){var a=qe(i);if(null!==a)switch(a.tag){case 3:if((a=a.stateNode).current.memoizedState.isDehydrated){var l=Ee(a.pendingLanes);if(0!==l){var s=a;for(s.pendingLanes|=2,s.entangledLanes|=2;l;){var o=1<<31-be(l);s.entanglements[1]|=o,l&=~o}mc(a),!(6&eu)&&(bu=oe()+500,gc(0,!1))}}break;case 13:null!==(s=Pr(a,2))&&zu(s,0,2),Fu(),Yd(a,2)}if(null===(a=qd(r))&&Lc(e,t,r,Qd,n),a===i)break;i=a}null!==i&&r.stopPropagation()}else Lc(e,t,r,null,n)}}function qd(e){return Xd(e=Mt(e))}var Qd=null;function Xd(e){if(Qd=null,null!==(e=We(e))){var t=D(e);if(null===t)e=null;else{var n=t.tag;if(13===n){if(null!==(e=F(t)))return e;e=null}else if(3===n){if(t.stateNode.current.memoizedState.isDehydrated)return 3===t.tag?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null)}}return Qd=e,null}function Kd(e){switch(e){case"beforetoggle":case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"toggle":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 2;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 8;case"message":switch(ue()){case ce:return 2;case de:return 8;case pe:case fe:return 32;case he:return 268435456;default:return 32}default:return 32}}var Zd=!1,Jd=null,ep=null,tp=null,np=new Map,rp=new Map,ip=[],ap="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset".split(" ");function lp(e,t){switch(e){case"focusin":case"focusout":Jd=null;break;case"dragenter":case"dragleave":ep=null;break;case"mouseover":case"mouseout":tp=null;break;case"pointerover":case"pointerout":np.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":rp.delete(t.pointerId)}}function sp(e,t,n,r,i,a){return null===e||e.nativeEvent!==a?(e={blockedOn:t,domEventName:n,eventSystemFlags:r,nativeEvent:a,targetContainers:[i]},null!==t&&null!==(t=qe(t))&&Ud(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==i&&-1===t.indexOf(i)&&t.push(i),e)}function op(e){var t=We(e.target);if(null!==t){var n=D(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=F(n)))return e.blockedOn=t,void function(e){var t=Y.p;try{return Y.p=e,function(){if(13===n.tag){var e=Bu(),t=Pr(n,e);null!==t&&zu(t,0,e),Yd(n,e)}}()}finally{Y.p=t}}(e.priority)}else if(3===t&&n.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function up(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=qd(e.nativeEvent);if(null!==n)return null!==(t=qe(n))&&Ud(t),e.blockedOn=n,!1;var r=new(n=e.nativeEvent).constructor(n.type,n);Bt=r,n.target.dispatchEvent(r),Bt=null,t.shift()}return!0}function cp(e,t,n){up(e)&&n.delete(t)}function dp(){Zd=!1,null!==Jd&&up(Jd)&&(Jd=null),null!==ep&&up(ep)&&(ep=null),null!==tp&&up(tp)&&(tp=null),np.forEach(cp),rp.forEach(cp)}function pp(e,t){e.blockedOn===t&&(e.blockedOn=null,Zd||(Zd=!0,r.unstable_scheduleCallback(r.unstable_NormalPriority,dp)))}var fp=null;function hp(e){fp!==e&&(fp=e,r.unstable_scheduleCallback(r.unstable_NormalPriority,(function(){fp===e&&(fp=null);for(var t=0;t<e.length;t+=3){var n=e[t],r=e[t+1],i=e[t+2];if("function"!=typeof r){if(null===Xd(r||n))continue;break}var a=qe(n);null!==a&&(e.splice(t,3),t-=3,cl(a,{pending:!0,data:i,method:n.method,action:r},r,i))}})))}function mp(e){function t(t){return pp(t,e)}null!==Jd&&pp(Jd,e),null!==ep&&pp(ep,e),null!==tp&&pp(tp,e),np.forEach(t),rp.forEach(t);for(var n=0;n<ip.length;n++){var r=ip[n];r.blockedOn===e&&(r.blockedOn=null)}for(;0<ip.length&&null===(n=ip[0]).blockedOn;)op(n),null===n.blockedOn&&ip.shift();if(null!=(n=(e.ownerDocument||e).$$reactFormReplay))for(r=0;r<n.length;r+=3){var i=n[r],a=n[r+1],l=i[Re]||null;if("function"==typeof a)l||hp(n);else if(l){var s=null;if(a&&a.hasAttribute("formAction")){if(i=a,l=a[Re]||null)s=l.formAction;else if(null!==Xd(i))continue}else s=l.action;"function"==typeof s?n[r+1]=s:(n.splice(r,3),r-=3),hp(n)}}}function gp(e){this._internalRoot=e}function vp(e){this._internalRoot=e}vp.prototype.render=gp.prototype.render=function(e){var t=this._internalRoot;if(null===t)throw Error(l(409));jd(t.current,Bu(),e,t,null,null)},vp.prototype.unmount=gp.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var t=e.containerInfo;0===e.tag&&tc(),jd(e.current,2,null,e,null,null),Fu(),t[je]=null}},vp.prototype.unstable_scheduleHydration=function(e){if(e){var t=Ie();e={blockedOn:null,target:e,priority:t};for(var n=0;n<ip.length&&0!==t&&t<ip[n].priority;n++);ip.splice(n,0,e),0===n&&op(e)}};var Ap=i.version;if("19.0.0"!==Ap)throw Error(l(527,Ap,"19.0.0"));Y.findDOMNode=function(e){var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(l(188));throw e=Object.keys(e).join(","),Error(l(268,e))}return e=function(e){var t=e.alternate;if(!t){if(null===(t=D(e)))throw Error(l(188));return t!==e?null:e}for(var n=e,r=t;;){var i=n.return;if(null===i)break;var a=i.alternate;if(null===a){if(null!==(r=i.return)){n=r;continue}break}if(i.child===a.child){for(a=i.child;a;){if(a===n)return R(i),e;if(a===r)return R(i),t;a=a.sibling}throw Error(l(188))}if(n.return!==r.return)n=i,r=a;else{for(var s=!1,o=i.child;o;){if(o===n){s=!0,n=i,r=a;break}if(o===r){s=!0,r=i,n=a;break}o=o.sibling}if(!s){for(o=a.child;o;){if(o===n){s=!0,n=a,r=i;break}if(o===r){s=!0,r=a,n=i;break}o=o.sibling}if(!s)throw Error(l(189))}}if(n.alternate!==r)throw Error(l(190))}if(3!==n.tag)throw Error(l(188));return n.stateNode.current===n?e:t}(t),null===(e=null!==e?j(e):null)?null:e.stateNode};var yp={bundleType:0,version:"19.0.0",rendererPackageName:"react-dom",currentDispatcherRef:B,findFiberByHostInstance:We,reconcilerVersion:"19.0.0"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var bp=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!bp.isDisabled&&bp.supportsFiber)try{ve=bp.inject(yp),Ae=bp}catch(e){}}t.createRoot=function(e,t){if(!s(e))throw Error(l(299));var n=!1,r="",i=Ll,a=Nl,o=Il;return null!=t&&(!0===t.unstable_strictMode&&(n=!0),void 0!==t.identifierPrefix&&(r=t.identifierPrefix),void 0!==t.onUncaughtError&&(i=t.onUncaughtError),void 0!==t.onCaughtError&&(a=t.onCaughtError),void 0!==t.onRecoverableError&&(o=t.onRecoverableError),void 0!==t.unstable_transitionCallbacks&&t.unstable_transitionCallbacks),t=Fd(e,1,!1,null,0,n,r,i,a,o,0,null),e[je]=t.current,zc(8===e.nodeType?e.parentNode:e),new gp(t)},t.hydrateRoot=function(e,t,n){if(!s(e))throw Error(l(299));var r=!1,i="",a=Ll,o=Nl,u=Il,c=null;return null!=n&&(!0===n.unstable_strictMode&&(r=!0),void 0!==n.identifierPrefix&&(i=n.identifierPrefix),void 0!==n.onUncaughtError&&(a=n.onUncaughtError),void 0!==n.onCaughtError&&(o=n.onCaughtError),void 0!==n.onRecoverableError&&(u=n.onRecoverableError),void 0!==n.unstable_transitionCallbacks&&n.unstable_transitionCallbacks,void 0!==n.formState&&(c=n.formState)),(t=Fd(e,1,!0,t,0,r,i,a,o,u,0,c)).context=Rd(null),n=t.current,(i=Bs(r=Bu())).callback=null,Ms(n,i,r),t.current.lanes=r,ze(t,r),mc(t),e[je]=t.current,zc(e),new vp(t)},t.version="19.0.0"},221:(e,t,n)=>{var r=n(540);function i(e){var t="https://react.dev/errors/"+e;if(1<arguments.length){t+="?args[]="+encodeURIComponent(arguments[1]);for(var n=2;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n])}return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}function a(){}var l={d:{f:a,r:function(){throw Error(i(522))},D:a,C:a,L:a,m:a,X:a,S:a,M:a},p:0,findDOMNode:null},s=Symbol.for("react.portal"),o=r.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE;function u(e,t){return"font"===e?"":"string"==typeof t?"use-credentials"===t?t:"":void 0}t.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE=l,t.createPortal=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!t||1!==t.nodeType&&9!==t.nodeType&&11!==t.nodeType)throw Error(i(299));return function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:s,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)},t.flushSync=function(e){var t=o.T,n=l.p;try{if(o.T=null,l.p=2,e)return e()}finally{o.T=t,l.p=n,l.d.f()}},t.preconnect=function(e,t){"string"==typeof e&&(t=t?"string"==typeof(t=t.crossOrigin)?"use-credentials"===t?t:"":void 0:null,l.d.C(e,t))},t.prefetchDNS=function(e){"string"==typeof e&&l.d.D(e)},t.preinit=function(e,t){if("string"==typeof e&&t&&"string"==typeof t.as){var n=t.as,r=u(n,t.crossOrigin),i="string"==typeof t.integrity?t.integrity:void 0,a="string"==typeof t.fetchPriority?t.fetchPriority:void 0;"style"===n?l.d.S(e,"string"==typeof t.precedence?t.precedence:void 0,{crossOrigin:r,integrity:i,fetchPriority:a}):"script"===n&&l.d.X(e,{crossOrigin:r,integrity:i,fetchPriority:a,nonce:"string"==typeof t.nonce?t.nonce:void 0})}},t.preinitModule=function(e,t){if("string"==typeof e)if("object"==typeof t&&null!==t){if(null==t.as||"script"===t.as){var n=u(t.as,t.crossOrigin);l.d.M(e,{crossOrigin:n,integrity:"string"==typeof t.integrity?t.integrity:void 0,nonce:"string"==typeof t.nonce?t.nonce:void 0})}}else null==t&&l.d.M(e)},t.preload=function(e,t){if("string"==typeof e&&"object"==typeof t&&null!==t&&"string"==typeof t.as){var n=t.as,r=u(n,t.crossOrigin);l.d.L(e,n,{crossOrigin:r,integrity:"string"==typeof t.integrity?t.integrity:void 0,nonce:"string"==typeof t.nonce?t.nonce:void 0,type:"string"==typeof t.type?t.type:void 0,fetchPriority:"string"==typeof t.fetchPriority?t.fetchPriority:void 0,referrerPolicy:"string"==typeof t.referrerPolicy?t.referrerPolicy:void 0,imageSrcSet:"string"==typeof t.imageSrcSet?t.imageSrcSet:void 0,imageSizes:"string"==typeof t.imageSizes?t.imageSizes:void 0,media:"string"==typeof t.media?t.media:void 0})}},t.preloadModule=function(e,t){if("string"==typeof e)if(t){var n=u(t.as,t.crossOrigin);l.d.m(e,{as:"string"==typeof t.as&&"script"!==t.as?t.as:void 0,crossOrigin:n,integrity:"string"==typeof t.integrity?t.integrity:void 0})}else l.d.m(e)},t.requestFormReset=function(e){l.d.r(e)},t.unstable_batchedUpdates=function(e,t){return e(t)},t.useFormState=function(e,t,n){return o.H.useFormState(e,t,n)},t.useFormStatus=function(){return o.H.useHostTransitionStatus()},t.version="19.0.0"},338:(e,t,n)=>{!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(247)},961:(e,t,n)=>{!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(221)},869:(e,t)=>{var n=Symbol.for("react.transitional.element"),r=Symbol.for("react.portal"),i=Symbol.for("react.fragment"),a=Symbol.for("react.strict_mode"),l=Symbol.for("react.profiler"),s=Symbol.for("react.consumer"),o=Symbol.for("react.context"),u=Symbol.for("react.forward_ref"),c=Symbol.for("react.suspense"),d=Symbol.for("react.memo"),p=Symbol.for("react.lazy"),f=Symbol.iterator,h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},m=Object.assign,g={};function v(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||h}function A(){}function y(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||h}v.prototype.isReactComponent={},v.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},v.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},A.prototype=v.prototype;var b=y.prototype=new A;b.constructor=y,m(b,v.prototype),b.isPureReactComponent=!0;var w=Array.isArray,_={H:null,A:null,T:null,S:null},C=Object.prototype.hasOwnProperty;function x(e,t,r,i,a,l){return r=l.ref,{$$typeof:n,type:e,key:t,ref:void 0!==r?r:null,props:l}}function E(e){return"object"==typeof e&&null!==e&&e.$$typeof===n}var S=/\/+/g;function k(e,t){return"object"==typeof e&&null!==e&&null!=e.key?(n=""+e.key,r={"=":"=0",":":"=2"},"$"+n.replace(/[=:]/g,(function(e){return r[e]}))):t.toString(36);var n,r}function T(){}function P(e,t,i,a,l){var s=typeof e;"undefined"!==s&&"boolean"!==s||(e=null);var o,u,c=!1;if(null===e)c=!0;else switch(s){case"bigint":case"string":case"number":c=!0;break;case"object":switch(e.$$typeof){case n:case r:c=!0;break;case p:return P((c=e._init)(e._payload),t,i,a,l)}}if(c)return l=l(e),c=""===a?"."+k(e,0):a,w(l)?(i="",null!=c&&(i=c.replace(S,"$&/")+"/"),P(l,t,i,"",(function(e){return e}))):null!=l&&(E(l)&&(o=l,u=i+(null==l.key||e&&e.key===l.key?"":(""+l.key).replace(S,"$&/")+"/")+c,l=x(o.type,u,void 0,0,0,o.props)),t.push(l)),1;c=0;var d,h=""===a?".":a+":";if(w(e))for(var m=0;m<e.length;m++)c+=P(a=e[m],t,i,s=h+k(a,m),l);else if("function"==typeof(m=null===(d=e)||"object"!=typeof d?null:"function"==typeof(d=f&&d[f]||d["@@iterator"])?d:null))for(e=m.call(e),m=0;!(a=e.next()).done;)c+=P(a=a.value,t,i,s=h+k(a,m++),l);else if("object"===s){if("function"==typeof e.then)return P(function(e){switch(e.status){case"fulfilled":return e.value;case"rejected":throw e.reason;default:switch("string"==typeof e.status?e.then(T,T):(e.status="pending",e.then((function(t){"pending"===e.status&&(e.status="fulfilled",e.value=t)}),(function(t){"pending"===e.status&&(e.status="rejected",e.reason=t)}))),e.status){case"fulfilled":return e.value;case"rejected":throw e.reason}}throw e}(e),t,i,a,l);throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.")}return c}function B(e,t,n){if(null==e)return e;var r=[],i=0;return P(e,r,"","",(function(e){return t.call(n,e,i++)})),r}function M(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var z="function"==typeof reportError?reportError:function(e){if("object"==typeof window&&"function"==typeof window.ErrorEvent){var t=new window.ErrorEvent("error",{bubbles:!0,cancelable:!0,message:"object"==typeof e&&null!==e&&"string"==typeof e.message?String(e.message):String(e),error:e});if(!window.dispatchEvent(t))return}else if("object"==typeof process&&"function"==typeof process.emit)return void process.emit("uncaughtException",e);console.error(e)};function O(){}t.Children={map:B,forEach:function(e,t,n){B(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return B(e,(function(){t++})),t},toArray:function(e){return B(e,(function(e){return e}))||[]},only:function(e){if(!E(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=v,t.Fragment=i,t.Profiler=l,t.PureComponent=y,t.StrictMode=a,t.Suspense=c,t.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE=_,t.act=function(){throw Error("act(...) is not supported in production builds of React.")},t.cache=function(e){return function(){return e.apply(null,arguments)}},t.cloneElement=function(e,t,n){if(null==e)throw Error("The argument must be a React element, but you passed "+e+".");var r=m({},e.props),i=e.key;if(null!=t)for(a in t.ref,void 0!==t.key&&(i=""+t.key),t)!C.call(t,a)||"key"===a||"__self"===a||"__source"===a||"ref"===a&&void 0===t.ref||(r[a]=t[a]);var a=arguments.length-2;if(1===a)r.children=n;else if(1<a){for(var l=Array(a),s=0;s<a;s++)l[s]=arguments[s+2];r.children=l}return x(e.type,i,void 0,0,0,r)},t.createContext=function(e){return(e={$$typeof:o,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider=e,e.Consumer={$$typeof:s,_context:e},e},t.createElement=function(e,t,n){var r,i={},a=null;if(null!=t)for(r in void 0!==t.key&&(a=""+t.key),t)C.call(t,r)&&"key"!==r&&"__self"!==r&&"__source"!==r&&(i[r]=t[r]);var l=arguments.length-2;if(1===l)i.children=n;else if(1<l){for(var s=Array(l),o=0;o<l;o++)s[o]=arguments[o+2];i.children=s}if(e&&e.defaultProps)for(r in l=e.defaultProps)void 0===i[r]&&(i[r]=l[r]);return x(e,a,void 0,0,0,i)},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:u,render:e}},t.isValidElement=E,t.lazy=function(e){return{$$typeof:p,_payload:{_status:-1,_result:e},_init:M}},t.memo=function(e,t){return{$$typeof:d,type:e,compare:void 0===t?null:t}},t.startTransition=function(e){var t=_.T,n={};_.T=n;try{var r=e(),i=_.S;null!==i&&i(n,r),"object"==typeof r&&null!==r&&"function"==typeof r.then&&r.then(O,z)}catch(e){z(e)}finally{_.T=t}},t.unstable_useCacheRefresh=function(){return _.H.useCacheRefresh()},t.use=function(e){return _.H.use(e)},t.useActionState=function(e,t,n){return _.H.useActionState(e,t,n)},t.useCallback=function(e,t){return _.H.useCallback(e,t)},t.useContext=function(e){return _.H.useContext(e)},t.useDebugValue=function(){},t.useDeferredValue=function(e,t){return _.H.useDeferredValue(e,t)},t.useEffect=function(e,t){return _.H.useEffect(e,t)},t.useId=function(){return _.H.useId()},t.useImperativeHandle=function(e,t,n){return _.H.useImperativeHandle(e,t,n)},t.useInsertionEffect=function(e,t){return _.H.useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return _.H.useLayoutEffect(e,t)},t.useMemo=function(e,t){return _.H.useMemo(e,t)},t.useOptimistic=function(e,t){return _.H.useOptimistic(e,t)},t.useReducer=function(e,t,n){return _.H.useReducer(e,t,n)},t.useRef=function(e){return _.H.useRef(e)},t.useState=function(e){return _.H.useState(e)},t.useSyncExternalStore=function(e,t,n){return _.H.useSyncExternalStore(e,t,n)},t.useTransition=function(){return _.H.useTransition()},t.version="19.0.0"},540:(e,t,n)=>{e.exports=n(869)},477:(e,t)=>{function n(e,t){var n=e.length;e.push(t);e:for(;0<n;){var r=n-1>>>1,i=e[r];if(!(0<a(i,t)))break e;e[r]=t,e[n]=i,n=r}}function r(e){return 0===e.length?null:e[0]}function i(e){if(0===e.length)return null;var t=e[0],n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,i=e.length,l=i>>>1;r<l;){var s=2*(r+1)-1,o=e[s],u=s+1,c=e[u];if(0>a(o,n))u<i&&0>a(c,o)?(e[r]=c,e[u]=n,r=u):(e[r]=o,e[s]=n,r=s);else{if(!(u<i&&0>a(c,n)))break e;e[r]=c,e[u]=n,r=u}}}return t}function a(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}if(t.unstable_now=void 0,"object"==typeof performance&&"function"==typeof performance.now){var l=performance;t.unstable_now=function(){return l.now()}}else{var s=Date,o=s.now();t.unstable_now=function(){return s.now()-o}}var u=[],c=[],d=1,p=null,f=3,h=!1,m=!1,g=!1,v="function"==typeof setTimeout?setTimeout:null,A="function"==typeof clearTimeout?clearTimeout:null,y="undefined"!=typeof setImmediate?setImmediate:null;function b(e){for(var t=r(c);null!==t;){if(null===t.callback)i(c);else{if(!(t.startTime<=e))break;i(c),t.sortIndex=t.expirationTime,n(u,t)}t=r(c)}}function w(e){if(g=!1,b(e),!m)if(null!==r(u))m=!0,M();else{var t=r(c);null!==t&&z(w,t.startTime-e)}}var _,C=!1,x=-1,E=5,S=-1;function k(){return!(t.unstable_now()-S<E)}function T(){if(C){var e=t.unstable_now();S=e;var n=!0;try{e:{m=!1,g&&(g=!1,A(x),x=-1),h=!0;var a=f;try{t:{for(b(e),p=r(u);null!==p&&!(p.expirationTime>e&&k());){var l=p.callback;if("function"==typeof l){p.callback=null,f=p.priorityLevel;var s=l(p.expirationTime<=e);if(e=t.unstable_now(),"function"==typeof s){p.callback=s,b(e),n=!0;break t}p===r(u)&&i(u),b(e)}else i(u);p=r(u)}if(null!==p)n=!0;else{var o=r(c);null!==o&&z(w,o.startTime-e),n=!1}}break e}finally{p=null,f=a,h=!1}n=void 0}}finally{n?_():C=!1}}}if("function"==typeof y)_=function(){y(T)};else if("undefined"!=typeof MessageChannel){var P=new MessageChannel,B=P.port2;P.port1.onmessage=T,_=function(){B.postMessage(null)}}else _=function(){v(T,0)};function M(){C||(C=!0,_())}function z(e,n){x=v((function(){e(t.unstable_now())}),n)}t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){m||h||(m=!0,M())},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):E=0<e?Math.floor(1e3/e):5},t.unstable_getCurrentPriorityLevel=function(){return f},t.unstable_getFirstCallbackNode=function(){return r(u)},t.unstable_next=function(e){switch(f){case 1:case 2:case 3:var t=3;break;default:t=f}var n=f;f=t;try{return e()}finally{f=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=function(){},t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=f;f=e;try{return t()}finally{f=n}},t.unstable_scheduleCallback=function(e,i,a){var l=t.unstable_now();switch(a="object"==typeof a&&null!==a&&"number"==typeof(a=a.delay)&&0<a?l+a:l,e){case 1:var s=-1;break;case 2:s=250;break;case 5:s=1073741823;break;case 4:s=1e4;break;default:s=5e3}return e={id:d++,callback:i,priorityLevel:e,startTime:a,expirationTime:s=a+s,sortIndex:-1},a>l?(e.sortIndex=a,n(c,e),null===r(u)&&e===r(c)&&(g?(A(x),x=-1):g=!0,z(w,a-l))):(e.sortIndex=s,n(u,e),m||h||(m=!0,M())),e},t.unstable_shouldYield=k,t.unstable_wrapCallback=function(e){var t=f;return function(){var n=f;f=t;try{return e.apply(this,arguments)}finally{f=n}}}},982:(e,t,n)=>{e.exports=n(477)},72:e=>{var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var a={},l=[],s=0;s<e.length;s++){var o=e[s],u=r.base?o[0]+r.base:o[0],c=a[u]||0,d="".concat(u," ").concat(c);a[u]=c+1;var p=n(d),f={css:o[1],media:o[2],sourceMap:o[3],supports:o[4],layer:o[5]};if(-1!==p)t[p].references++,t[p].updater(f);else{var h=i(f,r);r.byIndex=s,t.splice(s,0,{identifier:d,updater:h,references:1})}l.push(d)}return l}function i(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,i){var a=r(e=e||[],i=i||{});return function(e){e=e||[];for(var l=0;l<a.length;l++){var s=n(a[l]);t[s].references--}for(var o=r(e,i),u=0;u<a.length;u++){var c=n(a[u]);0===t[c].references&&(t[c].updater(),t.splice(c,1))}a=o}}},659:e=>{var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},159:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},56:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},825:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var i=void 0!==n.layer;i&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,i&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var a=n.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},113:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},85:e=>{e.exports="data:application/font-woff;charset=utf-8;base64, d09GRgABAAAAAAZgABAAAAAADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGRlRNAAAGRAAAABoAAAAci6qHkUdERUYAAAWgAAAAIwAAACQAYABXR1BPUwAABhQAAAAuAAAANuAY7+xHU1VCAAAFxAAAAFAAAABm2fPczU9TLzIAAAHcAAAASgAAAGBP9V5RY21hcAAAAkQAAACIAAABYt6F0cBjdnQgAAACzAAAAAQAAAAEABEBRGdhc3AAAAWYAAAACAAAAAj//wADZ2x5ZgAAAywAAADMAAAD2MHtryVoZWFkAAABbAAAADAAAAA2E2+eoWhoZWEAAAGcAAAAHwAAACQC9gDzaG10eAAAAigAAAAZAAAArgJkABFsb2NhAAAC0AAAAFoAAABaFQAUGG1heHAAAAG8AAAAHwAAACAAcABAbmFtZQAAA/gAAAE5AAACXvFdBwlwb3N0AAAFNAAAAGIAAACE5s74hXjaY2BkYGAAYpf5Hu/j+W2+MnAzMYDAzaX6QjD6/4//Bxj5GA8AuRwMYGkAPywL13jaY2BkYGA88P8Agx4j+/8fQDYfA1AEBWgDAIB2BOoAeNpjYGRgYNBh4GdgYgABEMnIABJzYNADCQAACWgAsQB42mNgYfzCOIGBlYGB0YcxjYGBwR1Kf2WQZGhhYGBiYGVmgAFGBiQQkOaawtDAoMBQxXjg/wEGPcYDDA4wNUA2CCgwsAAAO4EL6gAAeNpj2M0gyAACqxgGNWBkZ2D4/wMA+xkDdgAAAHjaY2BgYGaAYBkGRgYQiAHyGMF8FgYHIM3DwMHABGQrMOgyWDLEM1T9/w8UBfEMgLzE////P/5//f/V/xv+r4eaAAeMbAxwIUYmIMHEgKYAYjUcsDAwsLKxc3BycfPw8jEQA/gZBASFhEVExcQlJKWkZWTl5BUUlZRVVNXUNTQZBgMAAMR+E+gAEQFEAAAAKgAqACoANAA+AEgAUgBcAGYAcAB6AIQAjgCYAKIArAC2AMAAygDUAN4A6ADyAPwBBgEQARoBJAEuATgBQgFMAVYBYAFqAXQBfgGIAZIBnAGmAbIBzgHsAAB42u2NMQ6CUAyGW568x9AneYYgm4MJbhKFaExIOAVX8ApewSt4Bic4AfeAid3VOBixDxfPYEza5O+Xfi04YADggiUIULCuEJK8VhO4bSvpdnktHI5QCYtdi2sl8ZnXaHlqUrNKzdKcT8cjlq+rwZSvIVczNiezsfnP/uznmfPFBNODM2K7MTQ45YEAZqGP81AmGGcF3iPqOop0r1SPTaTbVkfUe4HXj97wYE+yNwWYxwWu4v1ugWHgo3S1XdZEVqWM7ET0cfnLGxWfkgR42o2PvWrDMBSFj/IHLaF0zKjRgdiVMwScNRAoWUoH78Y2icB/yIY09An6AH2Bdu/UB+yxopYshQiEvnvu0dURgDt8QeC8PDw7Fpji3fEA4z/PEJ6YOB5hKh4dj3EvXhxPqH/SKUY3rJ7srZ4FZnh1PMAtPhwP6fl2PMJMPDgeQ4rY8YT6Gzao0eAEA409DuggmTnFnOcSCiEiLMgxCiTI6Cq5DZUd3Qmp10vO0LaLTd2cjN4fOumlc7lUYbSQcZFkutRG7g6JKZKy0RmdLY680CDnEJ+UMkpFFe1RN7nxdVpXrC4aTtnaurOnYercZg2YVmLN/d/gczfEimrE/fs/bOuq29Zmn8tloORaXgZgGa78yO9/cnXm2BpaGvq25Dv9S4E9+5SIc9PqupJKhYFSSl47+Qcr1mYNAAAAeNptw0cKwkAAAMDZJA8Q7OUJvkLsPfZ6zFVERPy8qHh2YER+3i/BP83vIBLLySsoKimrqKqpa2hp6+jq6RsYGhmbmJqZSy0sraxtbO3sHRydnEMU4uR6yx7JJXveP7WrDycAAAAAAAH//wACeNpjYGRgYOABYhkgZgJCZgZNBkYGLQZtIJsFLMYAAAw3ALgAeNolizEKgDAQBCchRbC2sFER0YD6qVQiBCv/H9ezGI6Z5XBAw8CBK/m5iQQVauVbXLnOrMZv2oLdKFa8Pjuru2hJzGabmOSLzNMzvutpB3N42mNgZGBg4GKQYzBhYMxJLMlj4GBgAYow/P/PAJJhLM6sSoWKfWCAAwDAjgbRAAB42mNgYGBkAIIbCZo5IPrmUn0hGA0AO8EFTQAA"}},t={};function n(r){var i=t[r];if(void 0!==i)return i.exports;var a=t[r]={id:r,exports:{}};return e[r](a,a.exports,n),a.exports}n.m=e,n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.b=document.baseURI||self.location.href,n.nc=void 0;var r=n(540),i=n(338),a=n(72),l=n.n(a),s=n(825),o=n.n(s),u=n(659),c=n.n(u),d=n(56),p=n.n(d),f=n(159),h=n.n(f),m=n(113),g=n.n(m),v=n(870),A={};function y(e){return null!==e&&"object"==typeof e&&"constructor"in e&&e.constructor===Object}function b(e,t){void 0===e&&(e={}),void 0===t&&(t={}),Object.keys(t).forEach((n=>{void 0===e[n]?e[n]=t[n]:y(t[n])&&y(e[n])&&Object.keys(t[n]).length>0&&b(e[n],t[n])}))}A.styleTagTransform=g(),A.setAttributes=p(),A.insert=c().bind(null,"head"),A.domAPI=o(),A.insertStyleElement=h(),l()(v.A,A),v.A&&v.A.locals&&v.A.locals;const w={body:{},addEventListener(){},removeEventListener(){},activeElement:{blur(){},nodeName:""},querySelector:()=>null,querySelectorAll:()=>[],getElementById:()=>null,createEvent:()=>({initEvent(){}}),createElement:()=>({children:[],childNodes:[],style:{},setAttribute(){},getElementsByTagName:()=>[]}),createElementNS:()=>({}),importNode:()=>null,location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""}};function _(){const e="undefined"!=typeof document?document:{};return b(e,w),e}const C={document:w,navigator:{userAgent:""},location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""},history:{replaceState(){},pushState(){},go(){},back(){}},CustomEvent:function(){return this},addEventListener(){},removeEventListener(){},getComputedStyle:()=>({getPropertyValue:()=>""}),Image(){},Date(){},screen:{},setTimeout(){},clearTimeout(){},matchMedia:()=>({}),requestAnimationFrame:e=>"undefined"==typeof setTimeout?(e(),null):setTimeout(e,0),cancelAnimationFrame(e){"undefined"!=typeof setTimeout&&clearTimeout(e)}};function x(){const e="undefined"!=typeof window?window:{};return b(e,C),e}function E(e,t){return void 0===t&&(t=0),setTimeout(e,t)}function S(){return Date.now()}function k(e){return"object"==typeof e&&null!==e&&e.constructor&&"Object"===Object.prototype.toString.call(e).slice(8,-1)}function T(){const e=Object(arguments.length<=0?void 0:arguments[0]),t=["__proto__","constructor","prototype"];for(let r=1;r<arguments.length;r+=1){const i=r<0||arguments.length<=r?void 0:arguments[r];if(null!=i&&(n=i,!("undefined"!=typeof window&&void 0!==window.HTMLElement?n instanceof HTMLElement:n&&(1===n.nodeType||11===n.nodeType)))){const n=Object.keys(Object(i)).filter((e=>t.indexOf(e)<0));for(let t=0,r=n.length;t<r;t+=1){const r=n[t],a=Object.getOwnPropertyDescriptor(i,r);void 0!==a&&a.enumerable&&(k(e[r])&&k(i[r])?i[r].__swiper__?e[r]=i[r]:T(e[r],i[r]):!k(e[r])&&k(i[r])?(e[r]={},i[r].__swiper__?e[r]=i[r]:T(e[r],i[r])):e[r]=i[r])}}}var n;return e}function P(e,t,n){e.style.setProperty(t,n)}function B(e){let{swiper:t,targetPosition:n,side:r}=e;const i=x(),a=-t.translate;let l,s=null;const o=t.params.speed;t.wrapperEl.style.scrollSnapType="none",i.cancelAnimationFrame(t.cssModeFrameID);const u=n>a?"next":"prev",c=(e,t)=>"next"===u&&e>=t||"prev"===u&&e<=t,d=()=>{l=(new Date).getTime(),null===s&&(s=l);const e=Math.max(Math.min((l-s)/o,1),0),u=.5-Math.cos(e*Math.PI)/2;let p=a+u*(n-a);if(c(p,n)&&(p=n),t.wrapperEl.scrollTo({[r]:p}),c(p,n))return t.wrapperEl.style.overflow="hidden",t.wrapperEl.style.scrollSnapType="",setTimeout((()=>{t.wrapperEl.style.overflow="",t.wrapperEl.scrollTo({[r]:p})})),void i.cancelAnimationFrame(t.cssModeFrameID);t.cssModeFrameID=i.requestAnimationFrame(d)};d()}function M(e,t){void 0===t&&(t="");const n=[...e.children];return e instanceof HTMLSlotElement&&n.push(...e.assignedElements()),t?n.filter((e=>e.matches(t))):n}function z(e){try{return void console.warn(e)}catch(e){}}function O(e,t){void 0===t&&(t=[]);const n=document.createElement(e);return n.classList.add(...Array.isArray(t)?t:function(e){return void 0===e&&(e=""),e.trim().split(" ").filter((e=>!!e.trim()))}(t)),n}function L(e,t){return x().getComputedStyle(e,null).getPropertyValue(t)}function N(e){let t,n=e;if(n){for(t=0;null!==(n=n.previousSibling);)1===n.nodeType&&(t+=1);return t}}function I(e,t){const n=[];let r=e.parentElement;for(;r;)t?r.matches(t)&&n.push(r):n.push(r),r=r.parentElement;return n}function D(e,t,n){const r=x();return n?e["width"===t?"offsetWidth":"offsetHeight"]+parseFloat(r.getComputedStyle(e,null).getPropertyValue("width"===t?"margin-right":"margin-top"))+parseFloat(r.getComputedStyle(e,null).getPropertyValue("width"===t?"margin-left":"margin-bottom")):e.offsetWidth}function F(e){return(Array.isArray(e)?e:[e]).filter((e=>!!e))}let R,j,G;function Y(){return R||(R=function(){const e=x(),t=_();return{smoothScroll:t.documentElement&&t.documentElement.style&&"scrollBehavior"in t.documentElement.style,touch:!!("ontouchstart"in e||e.DocumentTouch&&t instanceof e.DocumentTouch)}}()),R}function U(e){return void 0===e&&(e={}),j||(j=function(e){let{userAgent:t}=void 0===e?{}:e;const n=Y(),r=x(),i=r.navigator.platform,a=t||r.navigator.userAgent,l={ios:!1,android:!1},s=r.screen.width,o=r.screen.height,u=a.match(/(Android);?[\s\/]+([\d.]+)?/);let c=a.match(/(iPad).*OS\s([\d_]+)/);const d=a.match(/(iPod)(.*OS\s([\d_]+))?/),p=!c&&a.match(/(iPhone\sOS|iOS)\s([\d_]+)/),f="Win32"===i;let h="MacIntel"===i;return!c&&h&&n.touch&&["1024x1366","1366x1024","834x1194","1194x834","834x1112","1112x834","768x1024","1024x768","820x1180","1180x820","810x1080","1080x810"].indexOf(`${s}x${o}`)>=0&&(c=a.match(/(Version)\/([\d.]+)/),c||(c=[0,1,"13_0_0"]),h=!1),u&&!f&&(l.os="android",l.android=!0),(c||p||d)&&(l.os="ios",l.ios=!0),l}(e)),j}var $={on(e,t,n){const r=this;if(!r.eventsListeners||r.destroyed)return r;if("function"!=typeof t)return r;const i=n?"unshift":"push";return e.split(" ").forEach((e=>{r.eventsListeners[e]||(r.eventsListeners[e]=[]),r.eventsListeners[e][i](t)})),r},once(e,t,n){const r=this;if(!r.eventsListeners||r.destroyed)return r;if("function"!=typeof t)return r;function i(){r.off(e,i),i.__emitterProxy&&delete i.__emitterProxy;for(var n=arguments.length,a=new Array(n),l=0;l<n;l++)a[l]=arguments[l];t.apply(r,a)}return i.__emitterProxy=t,r.on(e,i,n)},onAny(e,t){const n=this;if(!n.eventsListeners||n.destroyed)return n;if("function"!=typeof e)return n;const r=t?"unshift":"push";return n.eventsAnyListeners.indexOf(e)<0&&n.eventsAnyListeners[r](e),n},offAny(e){const t=this;if(!t.eventsListeners||t.destroyed)return t;if(!t.eventsAnyListeners)return t;const n=t.eventsAnyListeners.indexOf(e);return n>=0&&t.eventsAnyListeners.splice(n,1),t},off(e,t){const n=this;return!n.eventsListeners||n.destroyed?n:n.eventsListeners?(e.split(" ").forEach((e=>{void 0===t?n.eventsListeners[e]=[]:n.eventsListeners[e]&&n.eventsListeners[e].forEach(((r,i)=>{(r===t||r.__emitterProxy&&r.__emitterProxy===t)&&n.eventsListeners[e].splice(i,1)}))})),n):n},emit(){const e=this;if(!e.eventsListeners||e.destroyed)return e;if(!e.eventsListeners)return e;let t,n,r;for(var i=arguments.length,a=new Array(i),l=0;l<i;l++)a[l]=arguments[l];return"string"==typeof a[0]||Array.isArray(a[0])?(t=a[0],n=a.slice(1,a.length),r=e):(t=a[0].events,n=a[0].data,r=a[0].context||e),n.unshift(r),(Array.isArray(t)?t:t.split(" ")).forEach((t=>{e.eventsAnyListeners&&e.eventsAnyListeners.length&&e.eventsAnyListeners.forEach((e=>{e.apply(r,[t,...n])})),e.eventsListeners&&e.eventsListeners[t]&&e.eventsListeners[t].forEach((e=>{e.apply(r,n)}))})),e}};const V=(e,t,n)=>{t&&!e.classList.contains(n)?e.classList.add(n):!t&&e.classList.contains(n)&&e.classList.remove(n)},H=(e,t,n)=>{t&&!e.classList.contains(n)?e.classList.add(n):!t&&e.classList.contains(n)&&e.classList.remove(n)},W=(e,t)=>{if(!e||e.destroyed||!e.params)return;const n=t.closest(e.isElement?"swiper-slide":`.${e.params.slideClass}`);if(n){let t=n.querySelector(`.${e.params.lazyPreloaderClass}`);!t&&e.isElement&&(n.shadowRoot?t=n.shadowRoot.querySelector(`.${e.params.lazyPreloaderClass}`):requestAnimationFrame((()=>{n.shadowRoot&&(t=n.shadowRoot.querySelector(`.${e.params.lazyPreloaderClass}`),t&&t.remove())}))),t&&t.remove()}},q=(e,t)=>{if(!e.slides[t])return;const n=e.slides[t].querySelector('[loading="lazy"]');n&&n.removeAttribute("loading")},Q=e=>{if(!e||e.destroyed||!e.params)return;let t=e.params.lazyPreloadPrevNext;const n=e.slides.length;if(!n||!t||t<0)return;t=Math.min(t,n);const r="auto"===e.params.slidesPerView?e.slidesPerViewDynamic():Math.ceil(e.params.slidesPerView),i=e.activeIndex;if(e.params.grid&&e.params.grid.rows>1){const n=i,a=[n-t];return a.push(...Array.from({length:t}).map(((e,t)=>n+r+t))),void e.slides.forEach(((t,n)=>{a.includes(t.column)&&q(e,n)}))}const a=i+r-1;if(e.params.rewind||e.params.loop)for(let r=i-t;r<=a+t;r+=1){const t=(r%n+n)%n;(t<i||t>a)&&q(e,t)}else for(let r=Math.max(i-t,0);r<=Math.min(a+t,n-1);r+=1)r!==i&&(r>a||r<i)&&q(e,r)};var X={updateSize:function(){const e=this;let t,n;const r=e.el;t=void 0!==e.params.width&&null!==e.params.width?e.params.width:r.clientWidth,n=void 0!==e.params.height&&null!==e.params.height?e.params.height:r.clientHeight,0===t&&e.isHorizontal()||0===n&&e.isVertical()||(t=t-parseInt(L(r,"padding-left")||0,10)-parseInt(L(r,"padding-right")||0,10),n=n-parseInt(L(r,"padding-top")||0,10)-parseInt(L(r,"padding-bottom")||0,10),Number.isNaN(t)&&(t=0),Number.isNaN(n)&&(n=0),Object.assign(e,{width:t,height:n,size:e.isHorizontal()?t:n}))},updateSlides:function(){const e=this;function t(t,n){return parseFloat(t.getPropertyValue(e.getDirectionLabel(n))||0)}const n=e.params,{wrapperEl:r,slidesEl:i,size:a,rtlTranslate:l,wrongRTL:s}=e,o=e.virtual&&n.virtual.enabled,u=o?e.virtual.slides.length:e.slides.length,c=M(i,`.${e.params.slideClass}, swiper-slide`),d=o?e.virtual.slides.length:c.length;let p=[];const f=[],h=[];let m=n.slidesOffsetBefore;"function"==typeof m&&(m=n.slidesOffsetBefore.call(e));let g=n.slidesOffsetAfter;"function"==typeof g&&(g=n.slidesOffsetAfter.call(e));const v=e.snapGrid.length,A=e.slidesGrid.length;let y=n.spaceBetween,b=-m,w=0,_=0;if(void 0===a)return;"string"==typeof y&&y.indexOf("%")>=0?y=parseFloat(y.replace("%",""))/100*a:"string"==typeof y&&(y=parseFloat(y)),e.virtualSize=-y,c.forEach((e=>{l?e.style.marginLeft="":e.style.marginRight="",e.style.marginBottom="",e.style.marginTop=""})),n.centeredSlides&&n.cssMode&&(P(r,"--swiper-centered-offset-before",""),P(r,"--swiper-centered-offset-after",""));const C=n.grid&&n.grid.rows>1&&e.grid;let x;C?e.grid.initSlides(c):e.grid&&e.grid.unsetSlides();const E="auto"===n.slidesPerView&&n.breakpoints&&Object.keys(n.breakpoints).filter((e=>void 0!==n.breakpoints[e].slidesPerView)).length>0;for(let r=0;r<d;r+=1){let i;if(x=0,c[r]&&(i=c[r]),C&&e.grid.updateSlide(r,i,c),!c[r]||"none"!==L(i,"display")){if("auto"===n.slidesPerView){E&&(c[r].style[e.getDirectionLabel("width")]="");const a=getComputedStyle(i),l=i.style.transform,s=i.style.webkitTransform;if(l&&(i.style.transform="none"),s&&(i.style.webkitTransform="none"),n.roundLengths)x=e.isHorizontal()?D(i,"width",!0):D(i,"height",!0);else{const e=t(a,"width"),n=t(a,"padding-left"),r=t(a,"padding-right"),l=t(a,"margin-left"),s=t(a,"margin-right"),o=a.getPropertyValue("box-sizing");if(o&&"border-box"===o)x=e+l+s;else{const{clientWidth:t,offsetWidth:a}=i;x=e+n+r+l+s+(a-t)}}l&&(i.style.transform=l),s&&(i.style.webkitTransform=s),n.roundLengths&&(x=Math.floor(x))}else x=(a-(n.slidesPerView-1)*y)/n.slidesPerView,n.roundLengths&&(x=Math.floor(x)),c[r]&&(c[r].style[e.getDirectionLabel("width")]=`${x}px`);c[r]&&(c[r].swiperSlideSize=x),h.push(x),n.centeredSlides?(b=b+x/2+w/2+y,0===w&&0!==r&&(b=b-a/2-y),0===r&&(b=b-a/2-y),Math.abs(b)<.001&&(b=0),n.roundLengths&&(b=Math.floor(b)),_%n.slidesPerGroup==0&&p.push(b),f.push(b)):(n.roundLengths&&(b=Math.floor(b)),(_-Math.min(e.params.slidesPerGroupSkip,_))%e.params.slidesPerGroup==0&&p.push(b),f.push(b),b=b+x+y),e.virtualSize+=x+y,w=x,_+=1}}if(e.virtualSize=Math.max(e.virtualSize,a)+g,l&&s&&("slide"===n.effect||"coverflow"===n.effect)&&(r.style.width=`${e.virtualSize+y}px`),n.setWrapperSize&&(r.style[e.getDirectionLabel("width")]=`${e.virtualSize+y}px`),C&&e.grid.updateWrapperSize(x,p),!n.centeredSlides){const t=[];for(let r=0;r<p.length;r+=1){let i=p[r];n.roundLengths&&(i=Math.floor(i)),p[r]<=e.virtualSize-a&&t.push(i)}p=t,Math.floor(e.virtualSize-a)-Math.floor(p[p.length-1])>1&&p.push(e.virtualSize-a)}if(o&&n.loop){const t=h[0]+y;if(n.slidesPerGroup>1){const r=Math.ceil((e.virtual.slidesBefore+e.virtual.slidesAfter)/n.slidesPerGroup),i=t*n.slidesPerGroup;for(let e=0;e<r;e+=1)p.push(p[p.length-1]+i)}for(let r=0;r<e.virtual.slidesBefore+e.virtual.slidesAfter;r+=1)1===n.slidesPerGroup&&p.push(p[p.length-1]+t),f.push(f[f.length-1]+t),e.virtualSize+=t}if(0===p.length&&(p=[0]),0!==y){const t=e.isHorizontal()&&l?"marginLeft":e.getDirectionLabel("marginRight");c.filter(((e,t)=>!(n.cssMode&&!n.loop)||t!==c.length-1)).forEach((e=>{e.style[t]=`${y}px`}))}if(n.centeredSlides&&n.centeredSlidesBounds){let e=0;h.forEach((t=>{e+=t+(y||0)})),e-=y;const t=e>a?e-a:0;p=p.map((e=>e<=0?-m:e>t?t+g:e))}if(n.centerInsufficientSlides){let e=0;h.forEach((t=>{e+=t+(y||0)})),e-=y;const t=(n.slidesOffsetBefore||0)+(n.slidesOffsetAfter||0);if(e+t<a){const n=(a-e-t)/2;p.forEach(((e,t)=>{p[t]=e-n})),f.forEach(((e,t)=>{f[t]=e+n}))}}if(Object.assign(e,{slides:c,snapGrid:p,slidesGrid:f,slidesSizesGrid:h}),n.centeredSlides&&n.cssMode&&!n.centeredSlidesBounds){P(r,"--swiper-centered-offset-before",-p[0]+"px"),P(r,"--swiper-centered-offset-after",e.size/2-h[h.length-1]/2+"px");const t=-e.snapGrid[0],n=-e.slidesGrid[0];e.snapGrid=e.snapGrid.map((e=>e+t)),e.slidesGrid=e.slidesGrid.map((e=>e+n))}if(d!==u&&e.emit("slidesLengthChange"),p.length!==v&&(e.params.watchOverflow&&e.checkOverflow(),e.emit("snapGridLengthChange")),f.length!==A&&e.emit("slidesGridLengthChange"),n.watchSlidesProgress&&e.updateSlidesOffset(),e.emit("slidesUpdated"),!(o||n.cssMode||"slide"!==n.effect&&"fade"!==n.effect)){const t=`${n.containerModifierClass}backface-hidden`,r=e.el.classList.contains(t);d<=n.maxBackfaceHiddenSlides?r||e.el.classList.add(t):r&&e.el.classList.remove(t)}},updateAutoHeight:function(e){const t=this,n=[],r=t.virtual&&t.params.virtual.enabled;let i,a=0;"number"==typeof e?t.setTransition(e):!0===e&&t.setTransition(t.params.speed);const l=e=>r?t.slides[t.getSlideIndexByData(e)]:t.slides[e];if("auto"!==t.params.slidesPerView&&t.params.slidesPerView>1)if(t.params.centeredSlides)(t.visibleSlides||[]).forEach((e=>{n.push(e)}));else for(i=0;i<Math.ceil(t.params.slidesPerView);i+=1){const e=t.activeIndex+i;if(e>t.slides.length&&!r)break;n.push(l(e))}else n.push(l(t.activeIndex));for(i=0;i<n.length;i+=1)if(void 0!==n[i]){const e=n[i].offsetHeight;a=e>a?e:a}(a||0===a)&&(t.wrapperEl.style.height=`${a}px`)},updateSlidesOffset:function(){const e=this,t=e.slides,n=e.isElement?e.isHorizontal()?e.wrapperEl.offsetLeft:e.wrapperEl.offsetTop:0;for(let r=0;r<t.length;r+=1)t[r].swiperSlideOffset=(e.isHorizontal()?t[r].offsetLeft:t[r].offsetTop)-n-e.cssOverflowAdjustment()},updateSlidesProgress:function(e){void 0===e&&(e=this&&this.translate||0);const t=this,n=t.params,{slides:r,rtlTranslate:i,snapGrid:a}=t;if(0===r.length)return;void 0===r[0].swiperSlideOffset&&t.updateSlidesOffset();let l=-e;i&&(l=e),t.visibleSlidesIndexes=[],t.visibleSlides=[];let s=n.spaceBetween;"string"==typeof s&&s.indexOf("%")>=0?s=parseFloat(s.replace("%",""))/100*t.size:"string"==typeof s&&(s=parseFloat(s));for(let e=0;e<r.length;e+=1){const o=r[e];let u=o.swiperSlideOffset;n.cssMode&&n.centeredSlides&&(u-=r[0].swiperSlideOffset);const c=(l+(n.centeredSlides?t.minTranslate():0)-u)/(o.swiperSlideSize+s),d=(l-a[0]+(n.centeredSlides?t.minTranslate():0)-u)/(o.swiperSlideSize+s),p=-(l-u),f=p+t.slidesSizesGrid[e],h=p>=0&&p<=t.size-t.slidesSizesGrid[e],m=p>=0&&p<t.size-1||f>1&&f<=t.size||p<=0&&f>=t.size;m&&(t.visibleSlides.push(o),t.visibleSlidesIndexes.push(e)),V(o,m,n.slideVisibleClass),V(o,h,n.slideFullyVisibleClass),o.progress=i?-c:c,o.originalProgress=i?-d:d}},updateProgress:function(e){const t=this;if(void 0===e){const n=t.rtlTranslate?-1:1;e=t&&t.translate&&t.translate*n||0}const n=t.params,r=t.maxTranslate()-t.minTranslate();let{progress:i,isBeginning:a,isEnd:l,progressLoop:s}=t;const o=a,u=l;if(0===r)i=0,a=!0,l=!0;else{i=(e-t.minTranslate())/r;const n=Math.abs(e-t.minTranslate())<1,s=Math.abs(e-t.maxTranslate())<1;a=n||i<=0,l=s||i>=1,n&&(i=0),s&&(i=1)}if(n.loop){const n=t.getSlideIndexByData(0),r=t.getSlideIndexByData(t.slides.length-1),i=t.slidesGrid[n],a=t.slidesGrid[r],l=t.slidesGrid[t.slidesGrid.length-1],o=Math.abs(e);s=o>=i?(o-i)/l:(o+l-a)/l,s>1&&(s-=1)}Object.assign(t,{progress:i,progressLoop:s,isBeginning:a,isEnd:l}),(n.watchSlidesProgress||n.centeredSlides&&n.autoHeight)&&t.updateSlidesProgress(e),a&&!o&&t.emit("reachBeginning toEdge"),l&&!u&&t.emit("reachEnd toEdge"),(o&&!a||u&&!l)&&t.emit("fromEdge"),t.emit("progress",i)},updateSlidesClasses:function(){const e=this,{slides:t,params:n,slidesEl:r,activeIndex:i}=e,a=e.virtual&&n.virtual.enabled,l=e.grid&&n.grid&&n.grid.rows>1,s=e=>M(r,`.${n.slideClass}${e}, swiper-slide${e}`)[0];let o,u,c;if(a)if(n.loop){let t=i-e.virtual.slidesBefore;t<0&&(t=e.virtual.slides.length+t),t>=e.virtual.slides.length&&(t-=e.virtual.slides.length),o=s(`[data-swiper-slide-index="${t}"]`)}else o=s(`[data-swiper-slide-index="${i}"]`);else l?(o=t.filter((e=>e.column===i))[0],c=t.filter((e=>e.column===i+1))[0],u=t.filter((e=>e.column===i-1))[0]):o=t[i];o&&(l||(c=function(e,t){const n=[];for(;e.nextElementSibling;){const r=e.nextElementSibling;t?r.matches(t)&&n.push(r):n.push(r),e=r}return n}(o,`.${n.slideClass}, swiper-slide`)[0],n.loop&&!c&&(c=t[0]),u=function(e,t){const n=[];for(;e.previousElementSibling;){const r=e.previousElementSibling;t?r.matches(t)&&n.push(r):n.push(r),e=r}return n}(o,`.${n.slideClass}, swiper-slide`)[0],n.loop&&0===!u&&(u=t[t.length-1]))),t.forEach((e=>{H(e,e===o,n.slideActiveClass),H(e,e===c,n.slideNextClass),H(e,e===u,n.slidePrevClass)})),e.emitSlidesClasses()},updateActiveIndex:function(e){const t=this,n=t.rtlTranslate?t.translate:-t.translate,{snapGrid:r,params:i,activeIndex:a,realIndex:l,snapIndex:s}=t;let o,u=e;const c=e=>{let n=e-t.virtual.slidesBefore;return n<0&&(n=t.virtual.slides.length+n),n>=t.virtual.slides.length&&(n-=t.virtual.slides.length),n};if(void 0===u&&(u=function(e){const{slidesGrid:t,params:n}=e,r=e.rtlTranslate?e.translate:-e.translate;let i;for(let e=0;e<t.length;e+=1)void 0!==t[e+1]?r>=t[e]&&r<t[e+1]-(t[e+1]-t[e])/2?i=e:r>=t[e]&&r<t[e+1]&&(i=e+1):r>=t[e]&&(i=e);return n.normalizeSlideIndex&&(i<0||void 0===i)&&(i=0),i}(t)),r.indexOf(n)>=0)o=r.indexOf(n);else{const e=Math.min(i.slidesPerGroupSkip,u);o=e+Math.floor((u-e)/i.slidesPerGroup)}if(o>=r.length&&(o=r.length-1),u===a&&!t.params.loop)return void(o!==s&&(t.snapIndex=o,t.emit("snapIndexChange")));if(u===a&&t.params.loop&&t.virtual&&t.params.virtual.enabled)return void(t.realIndex=c(u));const d=t.grid&&i.grid&&i.grid.rows>1;let p;if(t.virtual&&i.virtual.enabled&&i.loop)p=c(u);else if(d){const e=t.slides.filter((e=>e.column===u))[0];let n=parseInt(e.getAttribute("data-swiper-slide-index"),10);Number.isNaN(n)&&(n=Math.max(t.slides.indexOf(e),0)),p=Math.floor(n/i.grid.rows)}else if(t.slides[u]){const e=t.slides[u].getAttribute("data-swiper-slide-index");p=e?parseInt(e,10):u}else p=u;Object.assign(t,{previousSnapIndex:s,snapIndex:o,previousRealIndex:l,realIndex:p,previousIndex:a,activeIndex:u}),t.initialized&&Q(t),t.emit("activeIndexChange"),t.emit("snapIndexChange"),(t.initialized||t.params.runCallbacksOnInit)&&(l!==p&&t.emit("realIndexChange"),t.emit("slideChange"))},updateClickedSlide:function(e,t){const n=this,r=n.params;let i=e.closest(`.${r.slideClass}, swiper-slide`);!i&&n.isElement&&t&&t.length>1&&t.includes(e)&&[...t.slice(t.indexOf(e)+1,t.length)].forEach((e=>{!i&&e.matches&&e.matches(`.${r.slideClass}, swiper-slide`)&&(i=e)}));let a,l=!1;if(i)for(let e=0;e<n.slides.length;e+=1)if(n.slides[e]===i){l=!0,a=e;break}if(!i||!l)return n.clickedSlide=void 0,void(n.clickedIndex=void 0);n.clickedSlide=i,n.virtual&&n.params.virtual.enabled?n.clickedIndex=parseInt(i.getAttribute("data-swiper-slide-index"),10):n.clickedIndex=a,r.slideToClickedSlide&&void 0!==n.clickedIndex&&n.clickedIndex!==n.activeIndex&&n.slideToClickedSlide()}},K={getTranslate:function(e){void 0===e&&(e=this.isHorizontal()?"x":"y");const{params:t,rtlTranslate:n,translate:r,wrapperEl:i}=this;if(t.virtualTranslate)return n?-r:r;if(t.cssMode)return r;let a=function(e,t){void 0===t&&(t="x");const n=x();let r,i,a;const l=function(e){const t=x();let n;return t.getComputedStyle&&(n=t.getComputedStyle(e,null)),!n&&e.currentStyle&&(n=e.currentStyle),n||(n=e.style),n}(e);return n.WebKitCSSMatrix?(i=l.transform||l.webkitTransform,i.split(",").length>6&&(i=i.split(", ").map((e=>e.replace(",","."))).join(", ")),a=new n.WebKitCSSMatrix("none"===i?"":i)):(a=l.MozTransform||l.OTransform||l.MsTransform||l.msTransform||l.transform||l.getPropertyValue("transform").replace("translate(","matrix(1, 0, 0, 1,"),r=a.toString().split(",")),"x"===t&&(i=n.WebKitCSSMatrix?a.m41:16===r.length?parseFloat(r[12]):parseFloat(r[4])),"y"===t&&(i=n.WebKitCSSMatrix?a.m42:16===r.length?parseFloat(r[13]):parseFloat(r[5])),i||0}(i,e);return a+=this.cssOverflowAdjustment(),n&&(a=-a),a||0},setTranslate:function(e,t){const n=this,{rtlTranslate:r,params:i,wrapperEl:a,progress:l}=n;let s,o=0,u=0;n.isHorizontal()?o=r?-e:e:u=e,i.roundLengths&&(o=Math.floor(o),u=Math.floor(u)),n.previousTranslate=n.translate,n.translate=n.isHorizontal()?o:u,i.cssMode?a[n.isHorizontal()?"scrollLeft":"scrollTop"]=n.isHorizontal()?-o:-u:i.virtualTranslate||(n.isHorizontal()?o-=n.cssOverflowAdjustment():u-=n.cssOverflowAdjustment(),a.style.transform=`translate3d(${o}px, ${u}px, 0px)`);const c=n.maxTranslate()-n.minTranslate();s=0===c?0:(e-n.minTranslate())/c,s!==l&&n.updateProgress(e),n.emit("setTranslate",n.translate,t)},minTranslate:function(){return-this.snapGrid[0]},maxTranslate:function(){return-this.snapGrid[this.snapGrid.length-1]},translateTo:function(e,t,n,r,i){void 0===e&&(e=0),void 0===t&&(t=this.params.speed),void 0===n&&(n=!0),void 0===r&&(r=!0);const a=this,{params:l,wrapperEl:s}=a;if(a.animating&&l.preventInteractionOnTransition)return!1;const o=a.minTranslate(),u=a.maxTranslate();let c;if(c=r&&e>o?o:r&&e<u?u:e,a.updateProgress(c),l.cssMode){const e=a.isHorizontal();if(0===t)s[e?"scrollLeft":"scrollTop"]=-c;else{if(!a.support.smoothScroll)return B({swiper:a,targetPosition:-c,side:e?"left":"top"}),!0;s.scrollTo({[e?"left":"top"]:-c,behavior:"smooth"})}return!0}return 0===t?(a.setTransition(0),a.setTranslate(c),n&&(a.emit("beforeTransitionStart",t,i),a.emit("transitionEnd"))):(a.setTransition(t),a.setTranslate(c),n&&(a.emit("beforeTransitionStart",t,i),a.emit("transitionStart")),a.animating||(a.animating=!0,a.onTranslateToWrapperTransitionEnd||(a.onTranslateToWrapperTransitionEnd=function(e){a&&!a.destroyed&&e.target===this&&(a.wrapperEl.removeEventListener("transitionend",a.onTranslateToWrapperTransitionEnd),a.onTranslateToWrapperTransitionEnd=null,delete a.onTranslateToWrapperTransitionEnd,a.animating=!1,n&&a.emit("transitionEnd"))}),a.wrapperEl.addEventListener("transitionend",a.onTranslateToWrapperTransitionEnd))),!0}};function Z(e){let{swiper:t,runCallbacks:n,direction:r,step:i}=e;const{activeIndex:a,previousIndex:l}=t;let s=r;if(s||(s=a>l?"next":a<l?"prev":"reset"),t.emit(`transition${i}`),n&&a!==l){if("reset"===s)return void t.emit(`slideResetTransition${i}`);t.emit(`slideChangeTransition${i}`),"next"===s?t.emit(`slideNextTransition${i}`):t.emit(`slidePrevTransition${i}`)}}var J={setTransition:function(e,t){const n=this;n.params.cssMode||(n.wrapperEl.style.transitionDuration=`${e}ms`,n.wrapperEl.style.transitionDelay=0===e?"0ms":""),n.emit("setTransition",e,t)},transitionStart:function(e,t){void 0===e&&(e=!0);const n=this,{params:r}=n;r.cssMode||(r.autoHeight&&n.updateAutoHeight(),Z({swiper:n,runCallbacks:e,direction:t,step:"Start"}))},transitionEnd:function(e,t){void 0===e&&(e=!0);const n=this,{params:r}=n;n.animating=!1,r.cssMode||(n.setTransition(0),Z({swiper:n,runCallbacks:e,direction:t,step:"End"}))}},ee={slideTo:function(e,t,n,r,i){void 0===e&&(e=0),void 0===n&&(n=!0),"string"==typeof e&&(e=parseInt(e,10));const a=this;let l=e;l<0&&(l=0);const{params:s,snapGrid:o,slidesGrid:u,previousIndex:c,activeIndex:d,rtlTranslate:p,wrapperEl:f,enabled:h}=a;if(!h&&!r&&!i||a.destroyed||a.animating&&s.preventInteractionOnTransition)return!1;void 0===t&&(t=a.params.speed);const m=Math.min(a.params.slidesPerGroupSkip,l);let g=m+Math.floor((l-m)/a.params.slidesPerGroup);g>=o.length&&(g=o.length-1);const v=-o[g];if(s.normalizeSlideIndex)for(let e=0;e<u.length;e+=1){const t=-Math.floor(100*v),n=Math.floor(100*u[e]),r=Math.floor(100*u[e+1]);void 0!==u[e+1]?t>=n&&t<r-(r-n)/2?l=e:t>=n&&t<r&&(l=e+1):t>=n&&(l=e)}if(a.initialized&&l!==d){if(!a.allowSlideNext&&(p?v>a.translate&&v>a.minTranslate():v<a.translate&&v<a.minTranslate()))return!1;if(!a.allowSlidePrev&&v>a.translate&&v>a.maxTranslate()&&(d||0)!==l)return!1}let A;l!==(c||0)&&n&&a.emit("beforeSlideChangeStart"),a.updateProgress(v),A=l>d?"next":l<d?"prev":"reset";const y=a.virtual&&a.params.virtual.enabled;if((!y||!i)&&(p&&-v===a.translate||!p&&v===a.translate))return a.updateActiveIndex(l),s.autoHeight&&a.updateAutoHeight(),a.updateSlidesClasses(),"slide"!==s.effect&&a.setTranslate(v),"reset"!==A&&(a.transitionStart(n,A),a.transitionEnd(n,A)),!1;if(s.cssMode){const e=a.isHorizontal(),n=p?v:-v;if(0===t)y&&(a.wrapperEl.style.scrollSnapType="none",a._immediateVirtual=!0),y&&!a._cssModeVirtualInitialSet&&a.params.initialSlide>0?(a._cssModeVirtualInitialSet=!0,requestAnimationFrame((()=>{f[e?"scrollLeft":"scrollTop"]=n}))):f[e?"scrollLeft":"scrollTop"]=n,y&&requestAnimationFrame((()=>{a.wrapperEl.style.scrollSnapType="",a._immediateVirtual=!1}));else{if(!a.support.smoothScroll)return B({swiper:a,targetPosition:n,side:e?"left":"top"}),!0;f.scrollTo({[e?"left":"top"]:n,behavior:"smooth"})}return!0}return a.setTransition(t),a.setTranslate(v),a.updateActiveIndex(l),a.updateSlidesClasses(),a.emit("beforeTransitionStart",t,r),a.transitionStart(n,A),0===t?a.transitionEnd(n,A):a.animating||(a.animating=!0,a.onSlideToWrapperTransitionEnd||(a.onSlideToWrapperTransitionEnd=function(e){a&&!a.destroyed&&e.target===this&&(a.wrapperEl.removeEventListener("transitionend",a.onSlideToWrapperTransitionEnd),a.onSlideToWrapperTransitionEnd=null,delete a.onSlideToWrapperTransitionEnd,a.transitionEnd(n,A))}),a.wrapperEl.addEventListener("transitionend",a.onSlideToWrapperTransitionEnd)),!0},slideToLoop:function(e,t,n,r){void 0===e&&(e=0),void 0===n&&(n=!0),"string"==typeof e&&(e=parseInt(e,10));const i=this;if(i.destroyed)return;void 0===t&&(t=i.params.speed);const a=i.grid&&i.params.grid&&i.params.grid.rows>1;let l=e;if(i.params.loop)if(i.virtual&&i.params.virtual.enabled)l+=i.virtual.slidesBefore;else{let e;if(a){const t=l*i.params.grid.rows;e=i.slides.filter((e=>1*e.getAttribute("data-swiper-slide-index")===t))[0].column}else e=i.getSlideIndexByData(l);const t=a?Math.ceil(i.slides.length/i.params.grid.rows):i.slides.length,{centeredSlides:n}=i.params;let s=i.params.slidesPerView;"auto"===s?s=i.slidesPerViewDynamic():(s=Math.ceil(parseFloat(i.params.slidesPerView,10)),n&&s%2==0&&(s+=1));let o=t-e<s;if(n&&(o=o||e<Math.ceil(s/2)),r&&n&&"auto"!==i.params.slidesPerView&&!a&&(o=!1),o){const r=n?e<i.activeIndex?"prev":"next":e-i.activeIndex-1<i.params.slidesPerView?"next":"prev";i.loopFix({direction:r,slideTo:!0,activeSlideIndex:"next"===r?e+1:e-t+1,slideRealIndex:"next"===r?i.realIndex:void 0})}if(a){const e=l*i.params.grid.rows;l=i.slides.filter((t=>1*t.getAttribute("data-swiper-slide-index")===e))[0].column}else l=i.getSlideIndexByData(l)}return requestAnimationFrame((()=>{i.slideTo(l,t,n,r)})),i},slideNext:function(e,t,n){void 0===t&&(t=!0);const r=this,{enabled:i,params:a,animating:l}=r;if(!i||r.destroyed)return r;void 0===e&&(e=r.params.speed);let s=a.slidesPerGroup;"auto"===a.slidesPerView&&1===a.slidesPerGroup&&a.slidesPerGroupAuto&&(s=Math.max(r.slidesPerViewDynamic("current",!0),1));const o=r.activeIndex<a.slidesPerGroupSkip?1:s,u=r.virtual&&a.virtual.enabled;if(a.loop){if(l&&!u&&a.loopPreventsSliding)return!1;if(r.loopFix({direction:"next"}),r._clientLeft=r.wrapperEl.clientLeft,r.activeIndex===r.slides.length-1&&a.cssMode)return requestAnimationFrame((()=>{r.slideTo(r.activeIndex+o,e,t,n)})),!0}return a.rewind&&r.isEnd?r.slideTo(0,e,t,n):r.slideTo(r.activeIndex+o,e,t,n)},slidePrev:function(e,t,n){void 0===t&&(t=!0);const r=this,{params:i,snapGrid:a,slidesGrid:l,rtlTranslate:s,enabled:o,animating:u}=r;if(!o||r.destroyed)return r;void 0===e&&(e=r.params.speed);const c=r.virtual&&i.virtual.enabled;if(i.loop){if(u&&!c&&i.loopPreventsSliding)return!1;r.loopFix({direction:"prev"}),r._clientLeft=r.wrapperEl.clientLeft}function d(e){return e<0?-Math.floor(Math.abs(e)):Math.floor(e)}const p=d(s?r.translate:-r.translate),f=a.map((e=>d(e)));let h=a[f.indexOf(p)-1];if(void 0===h&&i.cssMode){let e;a.forEach(((t,n)=>{p>=t&&(e=n)})),void 0!==e&&(h=a[e>0?e-1:e])}let m=0;if(void 0!==h&&(m=l.indexOf(h),m<0&&(m=r.activeIndex-1),"auto"===i.slidesPerView&&1===i.slidesPerGroup&&i.slidesPerGroupAuto&&(m=m-r.slidesPerViewDynamic("previous",!0)+1,m=Math.max(m,0))),i.rewind&&r.isBeginning){const i=r.params.virtual&&r.params.virtual.enabled&&r.virtual?r.virtual.slides.length-1:r.slides.length-1;return r.slideTo(i,e,t,n)}return i.loop&&0===r.activeIndex&&i.cssMode?(requestAnimationFrame((()=>{r.slideTo(m,e,t,n)})),!0):r.slideTo(m,e,t,n)},slideReset:function(e,t,n){void 0===t&&(t=!0);const r=this;if(!r.destroyed)return void 0===e&&(e=r.params.speed),r.slideTo(r.activeIndex,e,t,n)},slideToClosest:function(e,t,n,r){void 0===t&&(t=!0),void 0===r&&(r=.5);const i=this;if(i.destroyed)return;void 0===e&&(e=i.params.speed);let a=i.activeIndex;const l=Math.min(i.params.slidesPerGroupSkip,a),s=l+Math.floor((a-l)/i.params.slidesPerGroup),o=i.rtlTranslate?i.translate:-i.translate;if(o>=i.snapGrid[s]){const e=i.snapGrid[s];o-e>(i.snapGrid[s+1]-e)*r&&(a+=i.params.slidesPerGroup)}else{const e=i.snapGrid[s-1];o-e<=(i.snapGrid[s]-e)*r&&(a-=i.params.slidesPerGroup)}return a=Math.max(a,0),a=Math.min(a,i.slidesGrid.length-1),i.slideTo(a,e,t,n)},slideToClickedSlide:function(){const e=this;if(e.destroyed)return;const{params:t,slidesEl:n}=e,r="auto"===t.slidesPerView?e.slidesPerViewDynamic():t.slidesPerView;let i,a=e.clickedIndex;const l=e.isElement?"swiper-slide":`.${t.slideClass}`;if(t.loop){if(e.animating)return;i=parseInt(e.clickedSlide.getAttribute("data-swiper-slide-index"),10),t.centeredSlides?a<e.loopedSlides-r/2||a>e.slides.length-e.loopedSlides+r/2?(e.loopFix(),a=e.getSlideIndex(M(n,`${l}[data-swiper-slide-index="${i}"]`)[0]),E((()=>{e.slideTo(a)}))):e.slideTo(a):a>e.slides.length-r?(e.loopFix(),a=e.getSlideIndex(M(n,`${l}[data-swiper-slide-index="${i}"]`)[0]),E((()=>{e.slideTo(a)}))):e.slideTo(a)}else e.slideTo(a)}},te={loopCreate:function(e){const t=this,{params:n,slidesEl:r}=t;if(!n.loop||t.virtual&&t.params.virtual.enabled)return;const i=()=>{M(r,`.${n.slideClass}, swiper-slide`).forEach(((e,t)=>{e.setAttribute("data-swiper-slide-index",t)}))},a=t.grid&&n.grid&&n.grid.rows>1,l=n.slidesPerGroup*(a?n.grid.rows:1),s=t.slides.length%l!=0,o=a&&t.slides.length%n.grid.rows!=0,u=e=>{for(let r=0;r<e;r+=1){const e=t.isElement?O("swiper-slide",[n.slideBlankClass]):O("div",[n.slideClass,n.slideBlankClass]);t.slidesEl.append(e)}};s?(n.loopAddBlankSlides?(u(l-t.slides.length%l),t.recalcSlides(),t.updateSlides()):z("Swiper Loop Warning: The number of slides is not even to slidesPerGroup, loop mode may not function properly. You need to add more slides (or make duplicates, or empty slides)"),i()):o?(n.loopAddBlankSlides?(u(n.grid.rows-t.slides.length%n.grid.rows),t.recalcSlides(),t.updateSlides()):z("Swiper Loop Warning: The number of slides is not even to grid.rows, loop mode may not function properly. You need to add more slides (or make duplicates, or empty slides)"),i()):i(),t.loopFix({slideRealIndex:e,direction:n.centeredSlides?void 0:"next"})},loopFix:function(e){let{slideRealIndex:t,slideTo:n=!0,direction:r,setTranslate:i,activeSlideIndex:a,byController:l,byMousewheel:s}=void 0===e?{}:e;const o=this;if(!o.params.loop)return;o.emit("beforeLoopFix");const{slides:u,allowSlidePrev:c,allowSlideNext:d,slidesEl:p,params:f}=o,{centeredSlides:h}=f;if(o.allowSlidePrev=!0,o.allowSlideNext=!0,o.virtual&&f.virtual.enabled)return n&&(f.centeredSlides||0!==o.snapIndex?f.centeredSlides&&o.snapIndex<f.slidesPerView?o.slideTo(o.virtual.slides.length+o.snapIndex,0,!1,!0):o.snapIndex===o.snapGrid.length-1&&o.slideTo(o.virtual.slidesBefore,0,!1,!0):o.slideTo(o.virtual.slides.length,0,!1,!0)),o.allowSlidePrev=c,o.allowSlideNext=d,void o.emit("loopFix");let m=f.slidesPerView;"auto"===m?m=o.slidesPerViewDynamic():(m=Math.ceil(parseFloat(f.slidesPerView,10)),h&&m%2==0&&(m+=1));const g=f.slidesPerGroupAuto?m:f.slidesPerGroup;let v=g;v%g!=0&&(v+=g-v%g),v+=f.loopAdditionalSlides,o.loopedSlides=v;const A=o.grid&&f.grid&&f.grid.rows>1;u.length<m+v?z("Swiper Loop Warning: The number of slides is not enough for loop mode, it will be disabled and not function properly. You need to add more slides (or make duplicates) or lower the values of slidesPerView and slidesPerGroup parameters"):A&&"row"===f.grid.fill&&z("Swiper Loop Warning: Loop mode is not compatible with grid.fill = `row`");const y=[],b=[];let w=o.activeIndex;void 0===a?a=o.getSlideIndex(u.filter((e=>e.classList.contains(f.slideActiveClass)))[0]):w=a;const _="next"===r||!r,C="prev"===r||!r;let x=0,E=0;const S=A?Math.ceil(u.length/f.grid.rows):u.length,k=(A?u[a].column:a)+(h&&void 0===i?-m/2+.5:0);if(k<v){x=Math.max(v-k,g);for(let e=0;e<v-k;e+=1){const t=e-Math.floor(e/S)*S;if(A){const e=S-t-1;for(let t=u.length-1;t>=0;t-=1)u[t].column===e&&y.push(t)}else y.push(S-t-1)}}else if(k+m>S-v){E=Math.max(k-(S-2*v),g);for(let e=0;e<E;e+=1){const t=e-Math.floor(e/S)*S;A?u.forEach(((e,n)=>{e.column===t&&b.push(n)})):b.push(t)}}if(o.__preventObserver__=!0,requestAnimationFrame((()=>{o.__preventObserver__=!1})),C&&y.forEach((e=>{u[e].swiperLoopMoveDOM=!0,p.prepend(u[e]),u[e].swiperLoopMoveDOM=!1})),_&&b.forEach((e=>{u[e].swiperLoopMoveDOM=!0,p.append(u[e]),u[e].swiperLoopMoveDOM=!1})),o.recalcSlides(),"auto"===f.slidesPerView?o.updateSlides():A&&(y.length>0&&C||b.length>0&&_)&&o.slides.forEach(((e,t)=>{o.grid.updateSlide(t,e,o.slides)})),f.watchSlidesProgress&&o.updateSlidesOffset(),n)if(y.length>0&&C){if(void 0===t){const e=o.slidesGrid[w],t=o.slidesGrid[w+x]-e;s?o.setTranslate(o.translate-t):(o.slideTo(w+Math.ceil(x),0,!1,!0),i&&(o.touchEventsData.startTranslate=o.touchEventsData.startTranslate-t,o.touchEventsData.currentTranslate=o.touchEventsData.currentTranslate-t))}else if(i){const e=A?y.length/f.grid.rows:y.length;o.slideTo(o.activeIndex+e,0,!1,!0),o.touchEventsData.currentTranslate=o.translate}}else if(b.length>0&&_)if(void 0===t){const e=o.slidesGrid[w],t=o.slidesGrid[w-E]-e;s?o.setTranslate(o.translate-t):(o.slideTo(w-E,0,!1,!0),i&&(o.touchEventsData.startTranslate=o.touchEventsData.startTranslate-t,o.touchEventsData.currentTranslate=o.touchEventsData.currentTranslate-t))}else{const e=A?b.length/f.grid.rows:b.length;o.slideTo(o.activeIndex-e,0,!1,!0)}if(o.allowSlidePrev=c,o.allowSlideNext=d,o.controller&&o.controller.control&&!l){const e={slideRealIndex:t,direction:r,setTranslate:i,activeSlideIndex:a,byController:!0};Array.isArray(o.controller.control)?o.controller.control.forEach((t=>{!t.destroyed&&t.params.loop&&t.loopFix({...e,slideTo:t.params.slidesPerView===f.slidesPerView&&n})})):o.controller.control instanceof o.constructor&&o.controller.control.params.loop&&o.controller.control.loopFix({...e,slideTo:o.controller.control.params.slidesPerView===f.slidesPerView&&n})}o.emit("loopFix")},loopDestroy:function(){const e=this,{params:t,slidesEl:n}=e;if(!t.loop||e.virtual&&e.params.virtual.enabled)return;e.recalcSlides();const r=[];e.slides.forEach((e=>{const t=void 0===e.swiperSlideIndex?1*e.getAttribute("data-swiper-slide-index"):e.swiperSlideIndex;r[t]=e})),e.slides.forEach((e=>{e.removeAttribute("data-swiper-slide-index")})),r.forEach((e=>{n.append(e)})),e.recalcSlides(),e.slideTo(e.realIndex,0)}},ne={setGrabCursor:function(e){const t=this;if(!t.params.simulateTouch||t.params.watchOverflow&&t.isLocked||t.params.cssMode)return;const n="container"===t.params.touchEventsTarget?t.el:t.wrapperEl;t.isElement&&(t.__preventObserver__=!0),n.style.cursor="move",n.style.cursor=e?"grabbing":"grab",t.isElement&&requestAnimationFrame((()=>{t.__preventObserver__=!1}))},unsetGrabCursor:function(){const e=this;e.params.watchOverflow&&e.isLocked||e.params.cssMode||(e.isElement&&(e.__preventObserver__=!0),e["container"===e.params.touchEventsTarget?"el":"wrapperEl"].style.cursor="",e.isElement&&requestAnimationFrame((()=>{e.__preventObserver__=!1})))}};function re(e,t,n){const r=x(),{params:i}=e,a=i.edgeSwipeDetection,l=i.edgeSwipeThreshold;return!a||!(n<=l||n>=r.innerWidth-l)||"prevent"===a&&(t.preventDefault(),!0)}function ie(e){const t=this,n=_();let r=e;r.originalEvent&&(r=r.originalEvent);const i=t.touchEventsData;if("pointerdown"===r.type){if(null!==i.pointerId&&i.pointerId!==r.pointerId)return;i.pointerId=r.pointerId}else"touchstart"===r.type&&1===r.targetTouches.length&&(i.touchId=r.targetTouches[0].identifier);if("touchstart"===r.type)return void re(t,r,r.targetTouches[0].pageX);const{params:a,touches:l,enabled:s}=t;if(!s)return;if(!a.simulateTouch&&"mouse"===r.pointerType)return;if(t.animating&&a.preventInteractionOnTransition)return;!t.animating&&a.cssMode&&a.loop&&t.loopFix();let o=r.target;if("wrapper"===a.touchEventsTarget&&!function(e,t){const n=t.contains(e);return!n&&t instanceof HTMLSlotElement?[...t.assignedElements()].includes(e):n}(o,t.wrapperEl))return;if("which"in r&&3===r.which)return;if("button"in r&&r.button>0)return;if(i.isTouched&&i.isMoved)return;const u=!!a.noSwipingClass&&""!==a.noSwipingClass,c=r.composedPath?r.composedPath():r.path;u&&r.target&&r.target.shadowRoot&&c&&(o=c[0]);const d=a.noSwipingSelector?a.noSwipingSelector:`.${a.noSwipingClass}`,p=!(!r.target||!r.target.shadowRoot);if(a.noSwiping&&(p?function(e,t){return void 0===t&&(t=this),function t(n){if(!n||n===_()||n===x())return null;n.assignedSlot&&(n=n.assignedSlot);const r=n.closest(e);return r||n.getRootNode?r||t(n.getRootNode().host):null}(t)}(d,o):o.closest(d)))return void(t.allowClick=!0);if(a.swipeHandler&&!o.closest(a.swipeHandler))return;l.currentX=r.pageX,l.currentY=r.pageY;const f=l.currentX,h=l.currentY;if(!re(t,r,f))return;Object.assign(i,{isTouched:!0,isMoved:!1,allowTouchCallbacks:!0,isScrolling:void 0,startMoving:void 0}),l.startX=f,l.startY=h,i.touchStartTime=S(),t.allowClick=!0,t.updateSize(),t.swipeDirection=void 0,a.threshold>0&&(i.allowThresholdMove=!1);let m=!0;o.matches(i.focusableElements)&&(m=!1,"SELECT"===o.nodeName&&(i.isTouched=!1)),n.activeElement&&n.activeElement.matches(i.focusableElements)&&n.activeElement!==o&&("mouse"===r.pointerType||"mouse"!==r.pointerType&&!o.matches(i.focusableElements))&&n.activeElement.blur();const g=m&&t.allowTouchMove&&a.touchStartPreventDefault;!a.touchStartForcePreventDefault&&!g||o.isContentEditable||r.preventDefault(),a.freeMode&&a.freeMode.enabled&&t.freeMode&&t.animating&&!a.cssMode&&t.freeMode.onTouchStart(),t.emit("touchStart",r)}function ae(e){const t=_(),n=this,r=n.touchEventsData,{params:i,touches:a,rtlTranslate:l,enabled:s}=n;if(!s)return;if(!i.simulateTouch&&"mouse"===e.pointerType)return;let o,u=e;if(u.originalEvent&&(u=u.originalEvent),"pointermove"===u.type){if(null!==r.touchId)return;if(u.pointerId!==r.pointerId)return}if("touchmove"===u.type){if(o=[...u.changedTouches].filter((e=>e.identifier===r.touchId))[0],!o||o.identifier!==r.touchId)return}else o=u;if(!r.isTouched)return void(r.startMoving&&r.isScrolling&&n.emit("touchMoveOpposite",u));const c=o.pageX,d=o.pageY;if(u.preventedByNestedSwiper)return a.startX=c,void(a.startY=d);if(!n.allowTouchMove)return u.target.matches(r.focusableElements)||(n.allowClick=!1),void(r.isTouched&&(Object.assign(a,{startX:c,startY:d,currentX:c,currentY:d}),r.touchStartTime=S()));if(i.touchReleaseOnEdges&&!i.loop)if(n.isVertical()){if(d<a.startY&&n.translate<=n.maxTranslate()||d>a.startY&&n.translate>=n.minTranslate())return r.isTouched=!1,void(r.isMoved=!1)}else if(c<a.startX&&n.translate<=n.maxTranslate()||c>a.startX&&n.translate>=n.minTranslate())return;if(t.activeElement&&t.activeElement.matches(r.focusableElements)&&t.activeElement!==u.target&&"mouse"!==u.pointerType&&t.activeElement.blur(),t.activeElement&&u.target===t.activeElement&&u.target.matches(r.focusableElements))return r.isMoved=!0,void(n.allowClick=!1);r.allowTouchCallbacks&&n.emit("touchMove",u),a.previousX=a.currentX,a.previousY=a.currentY,a.currentX=c,a.currentY=d;const p=a.currentX-a.startX,f=a.currentY-a.startY;if(n.params.threshold&&Math.sqrt(p**2+f**2)<n.params.threshold)return;if(void 0===r.isScrolling){let e;n.isHorizontal()&&a.currentY===a.startY||n.isVertical()&&a.currentX===a.startX?r.isScrolling=!1:p*p+f*f>=25&&(e=180*Math.atan2(Math.abs(f),Math.abs(p))/Math.PI,r.isScrolling=n.isHorizontal()?e>i.touchAngle:90-e>i.touchAngle)}if(r.isScrolling&&n.emit("touchMoveOpposite",u),void 0===r.startMoving&&(a.currentX===a.startX&&a.currentY===a.startY||(r.startMoving=!0)),r.isScrolling||"touchmove"===u.type&&r.preventTouchMoveFromPointerMove)return void(r.isTouched=!1);if(!r.startMoving)return;n.allowClick=!1,!i.cssMode&&u.cancelable&&u.preventDefault(),i.touchMoveStopPropagation&&!i.nested&&u.stopPropagation();let h=n.isHorizontal()?p:f,m=n.isHorizontal()?a.currentX-a.previousX:a.currentY-a.previousY;i.oneWayMovement&&(h=Math.abs(h)*(l?1:-1),m=Math.abs(m)*(l?1:-1)),a.diff=h,h*=i.touchRatio,l&&(h=-h,m=-m);const g=n.touchesDirection;n.swipeDirection=h>0?"prev":"next",n.touchesDirection=m>0?"prev":"next";const v=n.params.loop&&!i.cssMode,A="next"===n.touchesDirection&&n.allowSlideNext||"prev"===n.touchesDirection&&n.allowSlidePrev;if(!r.isMoved){if(v&&A&&n.loopFix({direction:n.swipeDirection}),r.startTranslate=n.getTranslate(),n.setTransition(0),n.animating){const e=new window.CustomEvent("transitionend",{bubbles:!0,cancelable:!0,detail:{bySwiperTouchMove:!0}});n.wrapperEl.dispatchEvent(e)}r.allowMomentumBounce=!1,!i.grabCursor||!0!==n.allowSlideNext&&!0!==n.allowSlidePrev||n.setGrabCursor(!0),n.emit("sliderFirstMove",u)}if((new Date).getTime(),r.isMoved&&r.allowThresholdMove&&g!==n.touchesDirection&&v&&A&&Math.abs(h)>=1)return Object.assign(a,{startX:c,startY:d,currentX:c,currentY:d,startTranslate:r.currentTranslate}),r.loopSwapReset=!0,void(r.startTranslate=r.currentTranslate);n.emit("sliderMove",u),r.isMoved=!0,r.currentTranslate=h+r.startTranslate;let y=!0,b=i.resistanceRatio;if(i.touchReleaseOnEdges&&(b=0),h>0?(v&&A&&r.allowThresholdMove&&r.currentTranslate>(i.centeredSlides?n.minTranslate()-n.slidesSizesGrid[n.activeIndex+1]-("auto"!==i.slidesPerView&&n.slides.length-i.slidesPerView>=2?n.slidesSizesGrid[n.activeIndex+1]+n.params.spaceBetween:0)-n.params.spaceBetween:n.minTranslate())&&n.loopFix({direction:"prev",setTranslate:!0,activeSlideIndex:0}),r.currentTranslate>n.minTranslate()&&(y=!1,i.resistance&&(r.currentTranslate=n.minTranslate()-1+(-n.minTranslate()+r.startTranslate+h)**b))):h<0&&(v&&A&&r.allowThresholdMove&&r.currentTranslate<(i.centeredSlides?n.maxTranslate()+n.slidesSizesGrid[n.slidesSizesGrid.length-1]+n.params.spaceBetween+("auto"!==i.slidesPerView&&n.slides.length-i.slidesPerView>=2?n.slidesSizesGrid[n.slidesSizesGrid.length-1]+n.params.spaceBetween:0):n.maxTranslate())&&n.loopFix({direction:"next",setTranslate:!0,activeSlideIndex:n.slides.length-("auto"===i.slidesPerView?n.slidesPerViewDynamic():Math.ceil(parseFloat(i.slidesPerView,10)))}),r.currentTranslate<n.maxTranslate()&&(y=!1,i.resistance&&(r.currentTranslate=n.maxTranslate()+1-(n.maxTranslate()-r.startTranslate-h)**b))),y&&(u.preventedByNestedSwiper=!0),!n.allowSlideNext&&"next"===n.swipeDirection&&r.currentTranslate<r.startTranslate&&(r.currentTranslate=r.startTranslate),!n.allowSlidePrev&&"prev"===n.swipeDirection&&r.currentTranslate>r.startTranslate&&(r.currentTranslate=r.startTranslate),n.allowSlidePrev||n.allowSlideNext||(r.currentTranslate=r.startTranslate),i.threshold>0){if(!(Math.abs(h)>i.threshold||r.allowThresholdMove))return void(r.currentTranslate=r.startTranslate);if(!r.allowThresholdMove)return r.allowThresholdMove=!0,a.startX=a.currentX,a.startY=a.currentY,r.currentTranslate=r.startTranslate,void(a.diff=n.isHorizontal()?a.currentX-a.startX:a.currentY-a.startY)}i.followFinger&&!i.cssMode&&((i.freeMode&&i.freeMode.enabled&&n.freeMode||i.watchSlidesProgress)&&(n.updateActiveIndex(),n.updateSlidesClasses()),i.freeMode&&i.freeMode.enabled&&n.freeMode&&n.freeMode.onTouchMove(),n.updateProgress(r.currentTranslate),n.setTranslate(r.currentTranslate))}function le(e){const t=this,n=t.touchEventsData;let r,i=e;if(i.originalEvent&&(i=i.originalEvent),"touchend"===i.type||"touchcancel"===i.type){if(r=[...i.changedTouches].filter((e=>e.identifier===n.touchId))[0],!r||r.identifier!==n.touchId)return}else{if(null!==n.touchId)return;if(i.pointerId!==n.pointerId)return;r=i}if(["pointercancel","pointerout","pointerleave","contextmenu"].includes(i.type)&&(!["pointercancel","contextmenu"].includes(i.type)||!t.browser.isSafari&&!t.browser.isWebView))return;n.pointerId=null,n.touchId=null;const{params:a,touches:l,rtlTranslate:s,slidesGrid:o,enabled:u}=t;if(!u)return;if(!a.simulateTouch&&"mouse"===i.pointerType)return;if(n.allowTouchCallbacks&&t.emit("touchEnd",i),n.allowTouchCallbacks=!1,!n.isTouched)return n.isMoved&&a.grabCursor&&t.setGrabCursor(!1),n.isMoved=!1,void(n.startMoving=!1);a.grabCursor&&n.isMoved&&n.isTouched&&(!0===t.allowSlideNext||!0===t.allowSlidePrev)&&t.setGrabCursor(!1);const c=S(),d=c-n.touchStartTime;if(t.allowClick){const e=i.path||i.composedPath&&i.composedPath();t.updateClickedSlide(e&&e[0]||i.target,e),t.emit("tap click",i),d<300&&c-n.lastClickTime<300&&t.emit("doubleTap doubleClick",i)}if(n.lastClickTime=S(),E((()=>{t.destroyed||(t.allowClick=!0)})),!n.isTouched||!n.isMoved||!t.swipeDirection||0===l.diff&&!n.loopSwapReset||n.currentTranslate===n.startTranslate&&!n.loopSwapReset)return n.isTouched=!1,n.isMoved=!1,void(n.startMoving=!1);let p;if(n.isTouched=!1,n.isMoved=!1,n.startMoving=!1,p=a.followFinger?s?t.translate:-t.translate:-n.currentTranslate,a.cssMode)return;if(a.freeMode&&a.freeMode.enabled)return void t.freeMode.onTouchEnd({currentPos:p});const f=p>=-t.maxTranslate()&&!t.params.loop;let h=0,m=t.slidesSizesGrid[0];for(let e=0;e<o.length;e+=e<a.slidesPerGroupSkip?1:a.slidesPerGroup){const t=e<a.slidesPerGroupSkip-1?1:a.slidesPerGroup;void 0!==o[e+t]?(f||p>=o[e]&&p<o[e+t])&&(h=e,m=o[e+t]-o[e]):(f||p>=o[e])&&(h=e,m=o[o.length-1]-o[o.length-2])}let g=null,v=null;a.rewind&&(t.isBeginning?v=a.virtual&&a.virtual.enabled&&t.virtual?t.virtual.slides.length-1:t.slides.length-1:t.isEnd&&(g=0));const A=(p-o[h])/m,y=h<a.slidesPerGroupSkip-1?1:a.slidesPerGroup;if(d>a.longSwipesMs){if(!a.longSwipes)return void t.slideTo(t.activeIndex);"next"===t.swipeDirection&&(A>=a.longSwipesRatio?t.slideTo(a.rewind&&t.isEnd?g:h+y):t.slideTo(h)),"prev"===t.swipeDirection&&(A>1-a.longSwipesRatio?t.slideTo(h+y):null!==v&&A<0&&Math.abs(A)>a.longSwipesRatio?t.slideTo(v):t.slideTo(h))}else{if(!a.shortSwipes)return void t.slideTo(t.activeIndex);!t.navigation||i.target!==t.navigation.nextEl&&i.target!==t.navigation.prevEl?("next"===t.swipeDirection&&t.slideTo(null!==g?g:h+y),"prev"===t.swipeDirection&&t.slideTo(null!==v?v:h)):i.target===t.navigation.nextEl?t.slideTo(h+y):t.slideTo(h)}}function se(){const e=this,{params:t,el:n}=e;if(n&&0===n.offsetWidth)return;t.breakpoints&&e.setBreakpoint();const{allowSlideNext:r,allowSlidePrev:i,snapGrid:a}=e,l=e.virtual&&e.params.virtual.enabled;e.allowSlideNext=!0,e.allowSlidePrev=!0,e.updateSize(),e.updateSlides(),e.updateSlidesClasses();const s=l&&t.loop;!("auto"===t.slidesPerView||t.slidesPerView>1)||!e.isEnd||e.isBeginning||e.params.centeredSlides||s?e.params.loop&&!l?e.slideToLoop(e.realIndex,0,!1,!0):e.slideTo(e.activeIndex,0,!1,!0):e.slideTo(e.slides.length-1,0,!1,!0),e.autoplay&&e.autoplay.running&&e.autoplay.paused&&(clearTimeout(e.autoplay.resizeTimeout),e.autoplay.resizeTimeout=setTimeout((()=>{e.autoplay&&e.autoplay.running&&e.autoplay.paused&&e.autoplay.resume()}),500)),e.allowSlidePrev=i,e.allowSlideNext=r,e.params.watchOverflow&&a!==e.snapGrid&&e.checkOverflow()}function oe(e){const t=this;t.enabled&&(t.allowClick||(t.params.preventClicks&&e.preventDefault(),t.params.preventClicksPropagation&&t.animating&&(e.stopPropagation(),e.stopImmediatePropagation())))}function ue(){const e=this,{wrapperEl:t,rtlTranslate:n,enabled:r}=e;if(!r)return;let i;e.previousTranslate=e.translate,e.isHorizontal()?e.translate=-t.scrollLeft:e.translate=-t.scrollTop,0===e.translate&&(e.translate=0),e.updateActiveIndex(),e.updateSlidesClasses();const a=e.maxTranslate()-e.minTranslate();i=0===a?0:(e.translate-e.minTranslate())/a,i!==e.progress&&e.updateProgress(n?-e.translate:e.translate),e.emit("setTranslate",e.translate,!1)}function ce(e){const t=this;W(t,e.target),t.params.cssMode||"auto"!==t.params.slidesPerView&&!t.params.autoHeight||t.update()}function de(){const e=this;e.documentTouchHandlerProceeded||(e.documentTouchHandlerProceeded=!0,e.params.touchReleaseOnEdges&&(e.el.style.touchAction="auto"))}const pe=(e,t)=>{const n=_(),{params:r,el:i,wrapperEl:a,device:l}=e,s=!!r.nested,o="on"===t?"addEventListener":"removeEventListener",u=t;i&&"string"!=typeof i&&(n[o]("touchstart",e.onDocumentTouchStart,{passive:!1,capture:s}),i[o]("touchstart",e.onTouchStart,{passive:!1}),i[o]("pointerdown",e.onTouchStart,{passive:!1}),n[o]("touchmove",e.onTouchMove,{passive:!1,capture:s}),n[o]("pointermove",e.onTouchMove,{passive:!1,capture:s}),n[o]("touchend",e.onTouchEnd,{passive:!0}),n[o]("pointerup",e.onTouchEnd,{passive:!0}),n[o]("pointercancel",e.onTouchEnd,{passive:!0}),n[o]("touchcancel",e.onTouchEnd,{passive:!0}),n[o]("pointerout",e.onTouchEnd,{passive:!0}),n[o]("pointerleave",e.onTouchEnd,{passive:!0}),n[o]("contextmenu",e.onTouchEnd,{passive:!0}),(r.preventClicks||r.preventClicksPropagation)&&i[o]("click",e.onClick,!0),r.cssMode&&a[o]("scroll",e.onScroll),r.updateOnWindowResize?e[u](l.ios||l.android?"resize orientationchange observerUpdate":"resize observerUpdate",se,!0):e[u]("observerUpdate",se,!0),i[o]("load",e.onLoad,{capture:!0}))};var fe={attachEvents:function(){const e=this,{params:t}=e;e.onTouchStart=ie.bind(e),e.onTouchMove=ae.bind(e),e.onTouchEnd=le.bind(e),e.onDocumentTouchStart=de.bind(e),t.cssMode&&(e.onScroll=ue.bind(e)),e.onClick=oe.bind(e),e.onLoad=ce.bind(e),pe(e,"on")},detachEvents:function(){pe(this,"off")}};const he=(e,t)=>e.grid&&t.grid&&t.grid.rows>1;var me={setBreakpoint:function(){const e=this,{realIndex:t,initialized:n,params:r,el:i}=e,a=r.breakpoints;if(!a||a&&0===Object.keys(a).length)return;const l=e.getBreakpoint(a,e.params.breakpointsBase,e.el);if(!l||e.currentBreakpoint===l)return;const s=(l in a?a[l]:void 0)||e.originalParams,o=he(e,r),u=he(e,s),c=e.params.grabCursor,d=s.grabCursor,p=r.enabled;o&&!u?(i.classList.remove(`${r.containerModifierClass}grid`,`${r.containerModifierClass}grid-column`),e.emitContainerClasses()):!o&&u&&(i.classList.add(`${r.containerModifierClass}grid`),(s.grid.fill&&"column"===s.grid.fill||!s.grid.fill&&"column"===r.grid.fill)&&i.classList.add(`${r.containerModifierClass}grid-column`),e.emitContainerClasses()),c&&!d?e.unsetGrabCursor():!c&&d&&e.setGrabCursor(),["navigation","pagination","scrollbar"].forEach((t=>{if(void 0===s[t])return;const n=r[t]&&r[t].enabled,i=s[t]&&s[t].enabled;n&&!i&&e[t].disable(),!n&&i&&e[t].enable()}));const f=s.direction&&s.direction!==r.direction,h=r.loop&&(s.slidesPerView!==r.slidesPerView||f),m=r.loop;f&&n&&e.changeDirection(),T(e.params,s);const g=e.params.enabled,v=e.params.loop;Object.assign(e,{allowTouchMove:e.params.allowTouchMove,allowSlideNext:e.params.allowSlideNext,allowSlidePrev:e.params.allowSlidePrev}),p&&!g?e.disable():!p&&g&&e.enable(),e.currentBreakpoint=l,e.emit("_beforeBreakpoint",s),n&&(h?(e.loopDestroy(),e.loopCreate(t),e.updateSlides()):!m&&v?(e.loopCreate(t),e.updateSlides()):m&&!v&&e.loopDestroy()),e.emit("breakpoint",s)},getBreakpoint:function(e,t,n){if(void 0===t&&(t="window"),!e||"container"===t&&!n)return;let r=!1;const i=x(),a="window"===t?i.innerHeight:n.clientHeight,l=Object.keys(e).map((e=>{if("string"==typeof e&&0===e.indexOf("@")){const t=parseFloat(e.substr(1));return{value:a*t,point:e}}return{value:e,point:e}}));l.sort(((e,t)=>parseInt(e.value,10)-parseInt(t.value,10)));for(let e=0;e<l.length;e+=1){const{point:a,value:s}=l[e];"window"===t?i.matchMedia(`(min-width: ${s}px)`).matches&&(r=a):s<=n.clientWidth&&(r=a)}return r||"max"}},ge={addClasses:function(){const e=this,{classNames:t,params:n,rtl:r,el:i,device:a}=e,l=function(e,t){const n=[];return e.forEach((e=>{"object"==typeof e?Object.keys(e).forEach((r=>{e[r]&&n.push(t+r)})):"string"==typeof e&&n.push(t+e)})),n}(["initialized",n.direction,{"free-mode":e.params.freeMode&&n.freeMode.enabled},{autoheight:n.autoHeight},{rtl:r},{grid:n.grid&&n.grid.rows>1},{"grid-column":n.grid&&n.grid.rows>1&&"column"===n.grid.fill},{android:a.android},{ios:a.ios},{"css-mode":n.cssMode},{centered:n.cssMode&&n.centeredSlides},{"watch-progress":n.watchSlidesProgress}],n.containerModifierClass);t.push(...l),i.classList.add(...t),e.emitContainerClasses()},removeClasses:function(){const{el:e,classNames:t}=this;e&&"string"!=typeof e&&(e.classList.remove(...t),this.emitContainerClasses())}},ve={init:!0,direction:"horizontal",oneWayMovement:!1,swiperElementNodeName:"SWIPER-CONTAINER",touchEventsTarget:"wrapper",initialSlide:0,speed:300,cssMode:!1,updateOnWindowResize:!0,resizeObserver:!0,nested:!1,createElements:!1,eventsPrefix:"swiper",enabled:!0,focusableElements:"input, select, option, textarea, button, video, label",width:null,height:null,preventInteractionOnTransition:!1,userAgent:null,url:null,edgeSwipeDetection:!1,edgeSwipeThreshold:20,autoHeight:!1,setWrapperSize:!1,virtualTranslate:!1,effect:"slide",breakpoints:void 0,breakpointsBase:"window",spaceBetween:0,slidesPerView:1,slidesPerGroup:1,slidesPerGroupSkip:0,slidesPerGroupAuto:!1,centeredSlides:!1,centeredSlidesBounds:!1,slidesOffsetBefore:0,slidesOffsetAfter:0,normalizeSlideIndex:!0,centerInsufficientSlides:!1,watchOverflow:!0,roundLengths:!1,touchRatio:1,touchAngle:45,simulateTouch:!0,shortSwipes:!0,longSwipes:!0,longSwipesRatio:.5,longSwipesMs:300,followFinger:!0,allowTouchMove:!0,threshold:5,touchMoveStopPropagation:!1,touchStartPreventDefault:!0,touchStartForcePreventDefault:!1,touchReleaseOnEdges:!1,uniqueNavElements:!0,resistance:!0,resistanceRatio:.85,watchSlidesProgress:!1,grabCursor:!1,preventClicks:!0,preventClicksPropagation:!0,slideToClickedSlide:!1,loop:!1,loopAddBlankSlides:!0,loopAdditionalSlides:0,loopPreventsSliding:!0,rewind:!1,allowSlidePrev:!0,allowSlideNext:!0,swipeHandler:null,noSwiping:!0,noSwipingClass:"swiper-no-swiping",noSwipingSelector:null,passiveListeners:!0,maxBackfaceHiddenSlides:10,containerModifierClass:"swiper-",slideClass:"swiper-slide",slideBlankClass:"swiper-slide-blank",slideActiveClass:"swiper-slide-active",slideVisibleClass:"swiper-slide-visible",slideFullyVisibleClass:"swiper-slide-fully-visible",slideNextClass:"swiper-slide-next",slidePrevClass:"swiper-slide-prev",wrapperClass:"swiper-wrapper",lazyPreloaderClass:"swiper-lazy-preloader",lazyPreloadPrevNext:0,runCallbacksOnInit:!0,_emitClasses:!1};function Ae(e,t){return function(n){void 0===n&&(n={});const r=Object.keys(n)[0],i=n[r];"object"==typeof i&&null!==i?(!0===e[r]&&(e[r]={enabled:!0}),"navigation"===r&&e[r]&&e[r].enabled&&!e[r].prevEl&&!e[r].nextEl&&(e[r].auto=!0),["pagination","scrollbar"].indexOf(r)>=0&&e[r]&&e[r].enabled&&!e[r].el&&(e[r].auto=!0),r in e&&"enabled"in i?("object"!=typeof e[r]||"enabled"in e[r]||(e[r].enabled=!0),e[r]||(e[r]={enabled:!1}),T(t,n)):T(t,n)):T(t,n)}}const ye={eventsEmitter:$,update:X,translate:K,transition:J,slide:ee,loop:te,grabCursor:ne,events:fe,breakpoints:me,checkOverflow:{checkOverflow:function(){const e=this,{isLocked:t,params:n}=e,{slidesOffsetBefore:r}=n;if(r){const t=e.slides.length-1,n=e.slidesGrid[t]+e.slidesSizesGrid[t]+2*r;e.isLocked=e.size>n}else e.isLocked=1===e.snapGrid.length;!0===n.allowSlideNext&&(e.allowSlideNext=!e.isLocked),!0===n.allowSlidePrev&&(e.allowSlidePrev=!e.isLocked),t&&t!==e.isLocked&&(e.isEnd=!1),t!==e.isLocked&&e.emit(e.isLocked?"lock":"unlock")}},classes:ge},be={};class we{constructor(){let e,t;for(var n=arguments.length,r=new Array(n),i=0;i<n;i++)r[i]=arguments[i];1===r.length&&r[0].constructor&&"Object"===Object.prototype.toString.call(r[0]).slice(8,-1)?t=r[0]:[e,t]=r,t||(t={}),t=T({},t),e&&!t.el&&(t.el=e);const a=_();if(t.el&&"string"==typeof t.el&&a.querySelectorAll(t.el).length>1){const e=[];return a.querySelectorAll(t.el).forEach((n=>{const r=T({},t,{el:n});e.push(new we(r))})),e}const l=this;l.__swiper__=!0,l.support=Y(),l.device=U({userAgent:t.userAgent}),l.browser=(G||(G=function(){const e=x(),t=U();let n=!1;function r(){const t=e.navigator.userAgent.toLowerCase();return t.indexOf("safari")>=0&&t.indexOf("chrome")<0&&t.indexOf("android")<0}if(r()){const t=String(e.navigator.userAgent);if(t.includes("Version/")){const[e,r]=t.split("Version/")[1].split(" ")[0].split(".").map((e=>Number(e)));n=e<16||16===e&&r<2}}const i=/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(e.navigator.userAgent),a=r();return{isSafari:n||a,needPerspectiveFix:n,need3dFix:a||i&&t.ios,isWebView:i}}()),G),l.eventsListeners={},l.eventsAnyListeners=[],l.modules=[...l.__modules__],t.modules&&Array.isArray(t.modules)&&l.modules.push(...t.modules);const s={};l.modules.forEach((e=>{e({params:t,swiper:l,extendParams:Ae(t,s),on:l.on.bind(l),once:l.once.bind(l),off:l.off.bind(l),emit:l.emit.bind(l)})}));const o=T({},ve,s);return l.params=T({},o,be,t),l.originalParams=T({},l.params),l.passedParams=T({},t),l.params&&l.params.on&&Object.keys(l.params.on).forEach((e=>{l.on(e,l.params.on[e])})),l.params&&l.params.onAny&&l.onAny(l.params.onAny),Object.assign(l,{enabled:l.params.enabled,el:e,classNames:[],slides:[],slidesGrid:[],snapGrid:[],slidesSizesGrid:[],isHorizontal:()=>"horizontal"===l.params.direction,isVertical:()=>"vertical"===l.params.direction,activeIndex:0,realIndex:0,isBeginning:!0,isEnd:!1,translate:0,previousTranslate:0,progress:0,velocity:0,animating:!1,cssOverflowAdjustment(){return Math.trunc(this.translate/2**23)*2**23},allowSlideNext:l.params.allowSlideNext,allowSlidePrev:l.params.allowSlidePrev,touchEventsData:{isTouched:void 0,isMoved:void 0,allowTouchCallbacks:void 0,touchStartTime:void 0,isScrolling:void 0,currentTranslate:void 0,startTranslate:void 0,allowThresholdMove:void 0,focusableElements:l.params.focusableElements,lastClickTime:0,clickTimeout:void 0,velocities:[],allowMomentumBounce:void 0,startMoving:void 0,pointerId:null,touchId:null},allowClick:!0,allowTouchMove:l.params.allowTouchMove,touches:{startX:0,startY:0,currentX:0,currentY:0,diff:0},imagesToLoad:[],imagesLoaded:0}),l.emit("_swiper"),l.params.init&&l.init(),l}getDirectionLabel(e){return this.isHorizontal()?e:{width:"height","margin-top":"margin-left","margin-bottom ":"margin-right","margin-left":"margin-top","margin-right":"margin-bottom","padding-left":"padding-top","padding-right":"padding-bottom",marginRight:"marginBottom"}[e]}getSlideIndex(e){const{slidesEl:t,params:n}=this,r=N(M(t,`.${n.slideClass}, swiper-slide`)[0]);return N(e)-r}getSlideIndexByData(e){return this.getSlideIndex(this.slides.filter((t=>1*t.getAttribute("data-swiper-slide-index")===e))[0])}recalcSlides(){const{slidesEl:e,params:t}=this;this.slides=M(e,`.${t.slideClass}, swiper-slide`)}enable(){const e=this;e.enabled||(e.enabled=!0,e.params.grabCursor&&e.setGrabCursor(),e.emit("enable"))}disable(){const e=this;e.enabled&&(e.enabled=!1,e.params.grabCursor&&e.unsetGrabCursor(),e.emit("disable"))}setProgress(e,t){const n=this;e=Math.min(Math.max(e,0),1);const r=n.minTranslate(),i=(n.maxTranslate()-r)*e+r;n.translateTo(i,void 0===t?0:t),n.updateActiveIndex(),n.updateSlidesClasses()}emitContainerClasses(){const e=this;if(!e.params._emitClasses||!e.el)return;const t=e.el.className.split(" ").filter((t=>0===t.indexOf("swiper")||0===t.indexOf(e.params.containerModifierClass)));e.emit("_containerClasses",t.join(" "))}getSlideClasses(e){const t=this;return t.destroyed?"":e.className.split(" ").filter((e=>0===e.indexOf("swiper-slide")||0===e.indexOf(t.params.slideClass))).join(" ")}emitSlidesClasses(){const e=this;if(!e.params._emitClasses||!e.el)return;const t=[];e.slides.forEach((n=>{const r=e.getSlideClasses(n);t.push({slideEl:n,classNames:r}),e.emit("_slideClass",n,r)})),e.emit("_slideClasses",t)}slidesPerViewDynamic(e,t){void 0===e&&(e="current"),void 0===t&&(t=!1);const{params:n,slides:r,slidesGrid:i,slidesSizesGrid:a,size:l,activeIndex:s}=this;let o=1;if("number"==typeof n.slidesPerView)return n.slidesPerView;if(n.centeredSlides){let e,t=r[s]?Math.ceil(r[s].swiperSlideSize):0;for(let n=s+1;n<r.length;n+=1)r[n]&&!e&&(t+=Math.ceil(r[n].swiperSlideSize),o+=1,t>l&&(e=!0));for(let n=s-1;n>=0;n-=1)r[n]&&!e&&(t+=r[n].swiperSlideSize,o+=1,t>l&&(e=!0))}else if("current"===e)for(let e=s+1;e<r.length;e+=1)(t?i[e]+a[e]-i[s]<l:i[e]-i[s]<l)&&(o+=1);else for(let e=s-1;e>=0;e-=1)i[s]-i[e]<l&&(o+=1);return o}update(){const e=this;if(!e||e.destroyed)return;const{snapGrid:t,params:n}=e;function r(){const t=e.rtlTranslate?-1*e.translate:e.translate,n=Math.min(Math.max(t,e.maxTranslate()),e.minTranslate());e.setTranslate(n),e.updateActiveIndex(),e.updateSlidesClasses()}let i;if(n.breakpoints&&e.setBreakpoint(),[...e.el.querySelectorAll('[loading="lazy"]')].forEach((t=>{t.complete&&W(e,t)})),e.updateSize(),e.updateSlides(),e.updateProgress(),e.updateSlidesClasses(),n.freeMode&&n.freeMode.enabled&&!n.cssMode)r(),n.autoHeight&&e.updateAutoHeight();else{if(("auto"===n.slidesPerView||n.slidesPerView>1)&&e.isEnd&&!n.centeredSlides){const t=e.virtual&&n.virtual.enabled?e.virtual.slides:e.slides;i=e.slideTo(t.length-1,0,!1,!0)}else i=e.slideTo(e.activeIndex,0,!1,!0);i||r()}n.watchOverflow&&t!==e.snapGrid&&e.checkOverflow(),e.emit("update")}changeDirection(e,t){void 0===t&&(t=!0);const n=this,r=n.params.direction;return e||(e="horizontal"===r?"vertical":"horizontal"),e===r||"horizontal"!==e&&"vertical"!==e||(n.el.classList.remove(`${n.params.containerModifierClass}${r}`),n.el.classList.add(`${n.params.containerModifierClass}${e}`),n.emitContainerClasses(),n.params.direction=e,n.slides.forEach((t=>{"vertical"===e?t.style.width="":t.style.height=""})),n.emit("changeDirection"),t&&n.update()),n}changeLanguageDirection(e){const t=this;t.rtl&&"rtl"===e||!t.rtl&&"ltr"===e||(t.rtl="rtl"===e,t.rtlTranslate="horizontal"===t.params.direction&&t.rtl,t.rtl?(t.el.classList.add(`${t.params.containerModifierClass}rtl`),t.el.dir="rtl"):(t.el.classList.remove(`${t.params.containerModifierClass}rtl`),t.el.dir="ltr"),t.update())}mount(e){const t=this;if(t.mounted)return!0;let n=e||t.params.el;if("string"==typeof n&&(n=document.querySelector(n)),!n)return!1;n.swiper=t,n.parentNode&&n.parentNode.host&&n.parentNode.host.nodeName===t.params.swiperElementNodeName.toUpperCase()&&(t.isElement=!0);const r=()=>`.${(t.params.wrapperClass||"").trim().split(" ").join(".")}`;let i=n&&n.shadowRoot&&n.shadowRoot.querySelector?n.shadowRoot.querySelector(r()):M(n,r())[0];return!i&&t.params.createElements&&(i=O("div",t.params.wrapperClass),n.append(i),M(n,`.${t.params.slideClass}`).forEach((e=>{i.append(e)}))),Object.assign(t,{el:n,wrapperEl:i,slidesEl:t.isElement&&!n.parentNode.host.slideSlots?n.parentNode.host:i,hostEl:t.isElement?n.parentNode.host:n,mounted:!0,rtl:"rtl"===n.dir.toLowerCase()||"rtl"===L(n,"direction"),rtlTranslate:"horizontal"===t.params.direction&&("rtl"===n.dir.toLowerCase()||"rtl"===L(n,"direction")),wrongRTL:"-webkit-box"===L(i,"display")}),!0}init(e){const t=this;if(t.initialized)return t;if(!1===t.mount(e))return t;t.emit("beforeInit"),t.params.breakpoints&&t.setBreakpoint(),t.addClasses(),t.updateSize(),t.updateSlides(),t.params.watchOverflow&&t.checkOverflow(),t.params.grabCursor&&t.enabled&&t.setGrabCursor(),t.params.loop&&t.virtual&&t.params.virtual.enabled?t.slideTo(t.params.initialSlide+t.virtual.slidesBefore,0,t.params.runCallbacksOnInit,!1,!0):t.slideTo(t.params.initialSlide,0,t.params.runCallbacksOnInit,!1,!0),t.params.loop&&t.loopCreate(),t.attachEvents();const n=[...t.el.querySelectorAll('[loading="lazy"]')];return t.isElement&&n.push(...t.hostEl.querySelectorAll('[loading="lazy"]')),n.forEach((e=>{e.complete?W(t,e):e.addEventListener("load",(e=>{W(t,e.target)}))})),Q(t),t.initialized=!0,Q(t),t.emit("init"),t.emit("afterInit"),t}destroy(e,t){void 0===e&&(e=!0),void 0===t&&(t=!0);const n=this,{params:r,el:i,wrapperEl:a,slides:l}=n;return void 0===n.params||n.destroyed||(n.emit("beforeDestroy"),n.initialized=!1,n.detachEvents(),r.loop&&n.loopDestroy(),t&&(n.removeClasses(),i&&"string"!=typeof i&&i.removeAttribute("style"),a&&a.removeAttribute("style"),l&&l.length&&l.forEach((e=>{e.classList.remove(r.slideVisibleClass,r.slideFullyVisibleClass,r.slideActiveClass,r.slideNextClass,r.slidePrevClass),e.removeAttribute("style"),e.removeAttribute("data-swiper-slide-index")}))),n.emit("destroy"),Object.keys(n.eventsListeners).forEach((e=>{n.off(e)})),!1!==e&&(n.el&&"string"!=typeof n.el&&(n.el.swiper=null),function(e){const t=e;Object.keys(t).forEach((e=>{try{t[e]=null}catch(e){}try{delete t[e]}catch(e){}}))}(n)),n.destroyed=!0),null}static extendDefaults(e){T(be,e)}static get extendedDefaults(){return be}static get defaults(){return ve}static installModule(e){we.prototype.__modules__||(we.prototype.__modules__=[]);const t=we.prototype.__modules__;"function"==typeof e&&t.indexOf(e)<0&&t.push(e)}static use(e){return Array.isArray(e)?(e.forEach((e=>we.installModule(e))),we):(we.installModule(e),we)}}Object.keys(ye).forEach((e=>{Object.keys(ye[e]).forEach((t=>{we.prototype[t]=ye[e][t]}))})),we.use([function(e){let{swiper:t,on:n,emit:r}=e;const i=x();let a=null,l=null;const s=()=>{t&&!t.destroyed&&t.initialized&&(r("beforeResize"),r("resize"))},o=()=>{t&&!t.destroyed&&t.initialized&&r("orientationchange")};n("init",(()=>{t.params.resizeObserver&&void 0!==i.ResizeObserver?t&&!t.destroyed&&t.initialized&&(a=new ResizeObserver((e=>{l=i.requestAnimationFrame((()=>{const{width:n,height:r}=t;let i=n,a=r;e.forEach((e=>{let{contentBoxSize:n,contentRect:r,target:l}=e;l&&l!==t.el||(i=r?r.width:(n[0]||n).inlineSize,a=r?r.height:(n[0]||n).blockSize)})),i===n&&a===r||s()}))})),a.observe(t.el)):(i.addEventListener("resize",s),i.addEventListener("orientationchange",o))})),n("destroy",(()=>{l&&i.cancelAnimationFrame(l),a&&a.unobserve&&t.el&&(a.unobserve(t.el),a=null),i.removeEventListener("resize",s),i.removeEventListener("orientationchange",o)}))},function(e){let{swiper:t,extendParams:n,on:r,emit:i}=e;const a=[],l=x(),s=function(e,n){void 0===n&&(n={});const r=new(l.MutationObserver||l.WebkitMutationObserver)((e=>{if(t.__preventObserver__)return;if(1===e.length)return void i("observerUpdate",e[0]);const n=function(){i("observerUpdate",e[0])};l.requestAnimationFrame?l.requestAnimationFrame(n):l.setTimeout(n,0)}));r.observe(e,{attributes:void 0===n.attributes||n.attributes,childList:t.isElement||(void 0===n.childList||n).childList,characterData:void 0===n.characterData||n.characterData}),a.push(r)};n({observer:!1,observeParents:!1,observeSlideChildren:!1}),r("init",(()=>{if(t.params.observer){if(t.params.observeParents){const e=I(t.hostEl);for(let t=0;t<e.length;t+=1)s(e[t])}s(t.hostEl,{childList:t.params.observeSlideChildren}),s(t.wrapperEl,{attributes:!1})}})),r("destroy",(()=>{a.forEach((e=>{e.disconnect()})),a.splice(0,a.length)}))}]);const _e=["eventsPrefix","injectStyles","injectStylesUrls","modules","init","_direction","oneWayMovement","swiperElementNodeName","touchEventsTarget","initialSlide","_speed","cssMode","updateOnWindowResize","resizeObserver","nested","focusableElements","_enabled","_width","_height","preventInteractionOnTransition","userAgent","url","_edgeSwipeDetection","_edgeSwipeThreshold","_freeMode","_autoHeight","setWrapperSize","virtualTranslate","_effect","breakpoints","breakpointsBase","_spaceBetween","_slidesPerView","maxBackfaceHiddenSlides","_grid","_slidesPerGroup","_slidesPerGroupSkip","_slidesPerGroupAuto","_centeredSlides","_centeredSlidesBounds","_slidesOffsetBefore","_slidesOffsetAfter","normalizeSlideIndex","_centerInsufficientSlides","_watchOverflow","roundLengths","touchRatio","touchAngle","simulateTouch","_shortSwipes","_longSwipes","longSwipesRatio","longSwipesMs","_followFinger","allowTouchMove","_threshold","touchMoveStopPropagation","touchStartPreventDefault","touchStartForcePreventDefault","touchReleaseOnEdges","uniqueNavElements","_resistance","_resistanceRatio","_watchSlidesProgress","_grabCursor","preventClicks","preventClicksPropagation","_slideToClickedSlide","_loop","loopAdditionalSlides","loopAddBlankSlides","loopPreventsSliding","_rewind","_allowSlidePrev","_allowSlideNext","_swipeHandler","_noSwiping","noSwipingClass","noSwipingSelector","passiveListeners","containerModifierClass","slideClass","slideActiveClass","slideVisibleClass","slideFullyVisibleClass","slideNextClass","slidePrevClass","slideBlankClass","wrapperClass","lazyPreloaderClass","lazyPreloadPrevNext","runCallbacksOnInit","observer","observeParents","observeSlideChildren","a11y","_autoplay","_controller","coverflowEffect","cubeEffect","fadeEffect","flipEffect","creativeEffect","cardsEffect","hashNavigation","history","keyboard","mousewheel","_navigation","_pagination","parallax","_scrollbar","_thumbs","virtual","zoom","control"];function Ce(e){return"object"==typeof e&&null!==e&&e.constructor&&"Object"===Object.prototype.toString.call(e).slice(8,-1)&&!e.__swiper__}function xe(e,t){const n=["__proto__","constructor","prototype"];Object.keys(t).filter((e=>n.indexOf(e)<0)).forEach((n=>{void 0===e[n]?e[n]=t[n]:Ce(t[n])&&Ce(e[n])&&Object.keys(t[n]).length>0?t[n].__swiper__?e[n]=t[n]:xe(e[n],t[n]):e[n]=t[n]}))}function Ee(e){return void 0===e&&(e={}),e.navigation&&void 0===e.navigation.nextEl&&void 0===e.navigation.prevEl}function Se(e){return void 0===e&&(e={}),e.pagination&&void 0===e.pagination.el}function ke(e){return void 0===e&&(e={}),e.scrollbar&&void 0===e.scrollbar.el}function Te(e){void 0===e&&(e="");const t=e.split(" ").map((e=>e.trim())).filter((e=>!!e)),n=[];return t.forEach((e=>{n.indexOf(e)<0&&n.push(e)})),n.join(" ")}function Pe(e){return void 0===e&&(e=""),e?e.includes("swiper-wrapper")?e:`swiper-wrapper ${e}`:"swiper-wrapper"}function Be(){return Be=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Be.apply(this,arguments)}function Me(e){return e.type&&e.type.displayName&&e.type.displayName.includes("SwiperSlide")}function ze(e){const t=[];return r.Children.toArray(e).forEach((e=>{Me(e)?t.push(e):e.props&&e.props.children&&ze(e.props.children).forEach((e=>t.push(e)))})),t}function Oe(e){const t=[],n={"container-start":[],"container-end":[],"wrapper-start":[],"wrapper-end":[]};return r.Children.toArray(e).forEach((e=>{if(Me(e))t.push(e);else if(e.props&&e.props.slot&&n[e.props.slot])n[e.props.slot].push(e);else if(e.props&&e.props.children){const r=ze(e.props.children);r.length>0?r.forEach((e=>t.push(e))):n["container-end"].push(e)}else n["container-end"].push(e)})),{slides:t,slots:n}}function Le(e,t){return"undefined"==typeof window?(0,r.useEffect)(e,t):(0,r.useLayoutEffect)(e,t)}const Ne=(0,r.createContext)(null),Ie=(0,r.createContext)(null),De=(0,r.forwardRef)((function(e,t){let{className:n,tag:i="div",wrapperTag:a="div",children:l,onSwiper:s,...o}=void 0===e?{}:e,u=!1;const[c,d]=(0,r.useState)("swiper"),[p,f]=(0,r.useState)(null),[h,m]=(0,r.useState)(!1),g=(0,r.useRef)(!1),v=(0,r.useRef)(null),A=(0,r.useRef)(null),y=(0,r.useRef)(null),b=(0,r.useRef)(null),w=(0,r.useRef)(null),_=(0,r.useRef)(null),C=(0,r.useRef)(null),x=(0,r.useRef)(null),{params:E,passedParams:S,rest:k,events:T}=function(e,t){void 0===e&&(e={}),void 0===t&&(t=!0);const n={on:{}},r={},i={};xe(n,ve),n._emitClasses=!0,n.init=!1;const a={},l=_e.map((e=>e.replace(/_/,""))),s=Object.assign({},e);return Object.keys(s).forEach((s=>{void 0!==e[s]&&(l.indexOf(s)>=0?Ce(e[s])?(n[s]={},i[s]={},xe(n[s],e[s]),xe(i[s],e[s])):(n[s]=e[s],i[s]=e[s]):0===s.search(/on[A-Z]/)&&"function"==typeof e[s]?t?r[`${s[2].toLowerCase()}${s.substr(3)}`]=e[s]:n.on[`${s[2].toLowerCase()}${s.substr(3)}`]=e[s]:a[s]=e[s])})),["navigation","pagination","scrollbar"].forEach((e=>{!0===n[e]&&(n[e]={}),!1===n[e]&&delete n[e]})),{params:n,passedParams:i,rest:a,events:r}}(o),{slides:P,slots:B}=Oe(l),M=()=>{m(!h)};Object.assign(E.on,{_containerClasses(e,t){d(t)}});const z=()=>{Object.assign(E.on,T),u=!0;const e={...E};if(delete e.wrapperClass,A.current=new we(e),A.current.virtual&&A.current.params.virtual.enabled){A.current.virtual.slides=P;const e={cache:!1,slides:P,renderExternal:f,renderExternalUpdate:!1};xe(A.current.params.virtual,e),xe(A.current.originalParams.virtual,e)}};return v.current||z(),A.current&&A.current.on("_beforeBreakpoint",M),(0,r.useEffect)((()=>()=>{A.current&&A.current.off("_beforeBreakpoint",M)})),(0,r.useEffect)((()=>{!g.current&&A.current&&(A.current.emitSlidesClasses(),g.current=!0)})),Le((()=>{if(t&&(t.current=v.current),v.current)return A.current.destroyed&&z(),function(e,t){let{el:n,nextEl:r,prevEl:i,paginationEl:a,scrollbarEl:l,swiper:s}=e;Ee(t)&&r&&i&&(s.params.navigation.nextEl=r,s.originalParams.navigation.nextEl=r,s.params.navigation.prevEl=i,s.originalParams.navigation.prevEl=i),Se(t)&&a&&(s.params.pagination.el=a,s.originalParams.pagination.el=a),ke(t)&&l&&(s.params.scrollbar.el=l,s.originalParams.scrollbar.el=l),s.init(n)}({el:v.current,nextEl:w.current,prevEl:_.current,paginationEl:C.current,scrollbarEl:x.current,swiper:A.current},E),s&&!A.current.destroyed&&s(A.current),()=>{A.current&&!A.current.destroyed&&A.current.destroy(!0,!1)}}),[]),Le((()=>{!u&&T&&A.current&&Object.keys(T).forEach((e=>{A.current.on(e,T[e])}));const e=function(e,t,n,r,i){const a=[];if(!t)return a;const l=e=>{a.indexOf(e)<0&&a.push(e)};if(n&&r){const e=r.map(i),t=n.map(i);e.join("")!==t.join("")&&l("children"),r.length!==n.length&&l("children")}return _e.filter((e=>"_"===e[0])).map((e=>e.replace(/_/,""))).forEach((n=>{if(n in e&&n in t)if(Ce(e[n])&&Ce(t[n])){const r=Object.keys(e[n]),i=Object.keys(t[n]);r.length!==i.length?l(n):(r.forEach((r=>{e[n][r]!==t[n][r]&&l(n)})),i.forEach((r=>{e[n][r]!==t[n][r]&&l(n)})))}else e[n]!==t[n]&&l(n)})),a}(S,y.current,P,b.current,(e=>e.key));return y.current=S,b.current=P,e.length&&A.current&&!A.current.destroyed&&function(e){let{swiper:t,slides:n,passedParams:r,changedParams:i,nextEl:a,prevEl:l,scrollbarEl:s,paginationEl:o}=e;const u=i.filter((e=>"children"!==e&&"direction"!==e&&"wrapperClass"!==e)),{params:c,pagination:d,navigation:p,scrollbar:f,virtual:h,thumbs:m}=t;let g,v,A,y,b,w,_,C;i.includes("thumbs")&&r.thumbs&&r.thumbs.swiper&&!r.thumbs.swiper.destroyed&&c.thumbs&&(!c.thumbs.swiper||c.thumbs.swiper.destroyed)&&(g=!0),i.includes("controller")&&r.controller&&r.controller.control&&c.controller&&!c.controller.control&&(v=!0),i.includes("pagination")&&r.pagination&&(r.pagination.el||o)&&(c.pagination||!1===c.pagination)&&d&&!d.el&&(A=!0),i.includes("scrollbar")&&r.scrollbar&&(r.scrollbar.el||s)&&(c.scrollbar||!1===c.scrollbar)&&f&&!f.el&&(y=!0),i.includes("navigation")&&r.navigation&&(r.navigation.prevEl||l)&&(r.navigation.nextEl||a)&&(c.navigation||!1===c.navigation)&&p&&!p.prevEl&&!p.nextEl&&(b=!0);const x=e=>{t[e]&&(t[e].destroy(),"navigation"===e?(t.isElement&&(t[e].prevEl.remove(),t[e].nextEl.remove()),c[e].prevEl=void 0,c[e].nextEl=void 0,t[e].prevEl=void 0,t[e].nextEl=void 0):(t.isElement&&t[e].el.remove(),c[e].el=void 0,t[e].el=void 0))};i.includes("loop")&&t.isElement&&(c.loop&&!r.loop?w=!0:!c.loop&&r.loop?_=!0:C=!0),u.forEach((e=>{if(Ce(c[e])&&Ce(r[e]))Object.assign(c[e],r[e]),"navigation"!==e&&"pagination"!==e&&"scrollbar"!==e||!("enabled"in r[e])||r[e].enabled||x(e);else{const t=r[e];!0!==t&&!1!==t||"navigation"!==e&&"pagination"!==e&&"scrollbar"!==e?c[e]=r[e]:!1===t&&x(e)}})),u.includes("controller")&&!v&&t.controller&&t.controller.control&&c.controller&&c.controller.control&&(t.controller.control=c.controller.control),i.includes("children")&&n&&h&&c.virtual.enabled?(h.slides=n,h.update(!0)):i.includes("virtual")&&h&&c.virtual.enabled&&(n&&(h.slides=n),h.update(!0)),i.includes("children")&&n&&c.loop&&(C=!0),g&&m.init()&&m.update(!0),v&&(t.controller.control=c.controller.control),A&&(!t.isElement||o&&"string"!=typeof o||(o=document.createElement("div"),o.classList.add("swiper-pagination"),o.part.add("pagination"),t.el.appendChild(o)),o&&(c.pagination.el=o),d.init(),d.render(),d.update()),y&&(!t.isElement||s&&"string"!=typeof s||(s=document.createElement("div"),s.classList.add("swiper-scrollbar"),s.part.add("scrollbar"),t.el.appendChild(s)),s&&(c.scrollbar.el=s),f.init(),f.updateSize(),f.setTranslate()),b&&(t.isElement&&(a&&"string"!=typeof a||(a=document.createElement("div"),a.classList.add("swiper-button-next"),a.innerHTML=t.hostEl.constructor.nextButtonSvg,a.part.add("button-next"),t.el.appendChild(a)),l&&"string"!=typeof l||(l=document.createElement("div"),l.classList.add("swiper-button-prev"),l.innerHTML=t.hostEl.constructor.prevButtonSvg,l.part.add("button-prev"),t.el.appendChild(l))),a&&(c.navigation.nextEl=a),l&&(c.navigation.prevEl=l),p.init(),p.update()),i.includes("allowSlideNext")&&(t.allowSlideNext=r.allowSlideNext),i.includes("allowSlidePrev")&&(t.allowSlidePrev=r.allowSlidePrev),i.includes("direction")&&t.changeDirection(r.direction,!1),(w||C)&&t.loopDestroy(),(_||C)&&t.loopCreate(),t.update()}({swiper:A.current,slides:P,passedParams:S,changedParams:e,nextEl:w.current,prevEl:_.current,scrollbarEl:x.current,paginationEl:C.current}),()=>{T&&A.current&&Object.keys(T).forEach((e=>{A.current.off(e,T[e])}))}})),Le((()=>{(e=>{!e||e.destroyed||!e.params.virtual||e.params.virtual&&!e.params.virtual.enabled||(e.updateSlides(),e.updateProgress(),e.updateSlidesClasses(),e.parallax&&e.params.parallax&&e.params.parallax.enabled&&e.parallax.setTranslate())})(A.current)}),[p]),r.createElement(i,Be({ref:v,className:Te(`${c}${n?` ${n}`:""}`)},k),r.createElement(Ie.Provider,{value:A.current},B["container-start"],r.createElement(a,{className:Pe(E.wrapperClass)},B["wrapper-start"],E.virtual?function(e,t,n){if(!n)return null;const i=e=>{let n=e;return e<0?n=t.length+e:n>=t.length&&(n-=t.length),n},a=e.isHorizontal()?{[e.rtlTranslate?"right":"left"]:`${n.offset}px`}:{top:`${n.offset}px`},{from:l,to:s}=n,o=e.params.loop?-t.length:0,u=e.params.loop?2*t.length:t.length,c=[];for(let e=o;e<u;e+=1)e>=l&&e<=s&&c.push(t[i(e)]);return c.map(((t,n)=>r.cloneElement(t,{swiper:e,style:a,key:t.props.virtualIndex||t.key||`slide-${n}`})))}(A.current,P,p):P.map(((e,t)=>r.cloneElement(e,{swiper:A.current,swiperSlideIndex:t}))),B["wrapper-end"]),Ee(E)&&r.createElement(r.Fragment,null,r.createElement("div",{ref:_,className:"swiper-button-prev"}),r.createElement("div",{ref:w,className:"swiper-button-next"})),ke(E)&&r.createElement("div",{ref:x,className:"swiper-scrollbar"}),Se(E)&&r.createElement("div",{ref:C,className:"swiper-pagination"}),B["container-end"]))}));De.displayName="Swiper";const Fe=(0,r.forwardRef)((function(e,t){let{tag:n="div",children:i,className:a="",swiper:l,zoom:s,lazy:o,virtualIndex:u,swiperSlideIndex:c,...d}=void 0===e?{}:e;const p=(0,r.useRef)(null),[f,h]=(0,r.useState)("swiper-slide"),[m,g]=(0,r.useState)(!1);function v(e,t,n){t===p.current&&h(n)}Le((()=>{if(void 0!==c&&(p.current.swiperSlideIndex=c),t&&(t.current=p.current),p.current&&l){if(!l.destroyed)return l.on("_slideClass",v),()=>{l&&l.off("_slideClass",v)};"swiper-slide"!==f&&h("swiper-slide")}})),Le((()=>{l&&p.current&&!l.destroyed&&h(l.getSlideClasses(p.current))}),[l]);const A={isActive:f.indexOf("swiper-slide-active")>=0,isVisible:f.indexOf("swiper-slide-visible")>=0,isPrev:f.indexOf("swiper-slide-prev")>=0,isNext:f.indexOf("swiper-slide-next")>=0},y=()=>"function"==typeof i?i(A):i;return r.createElement(n,Be({ref:p,className:Te(`${f}${a?` ${a}`:""}`),"data-swiper-slide-index":u,onLoad:()=>{g(!0)}},d),s&&r.createElement(Ne.Provider,{value:A},r.createElement("div",{className:"swiper-zoom-container","data-swiper-zoom":"number"==typeof s?s:void 0},y(),o&&!m&&r.createElement("div",{className:"swiper-lazy-preloader"}))),!s&&r.createElement(Ne.Provider,{value:A},y(),o&&!m&&r.createElement("div",{className:"swiper-lazy-preloader"})))}));function Re(e,t,n,r){return e.params.createElements&&Object.keys(r).forEach((i=>{if(!n[i]&&!0===n.auto){let a=M(e.el,`.${r[i]}`)[0];a||(a=O("div",r[i]),a.className=r[i],e.el.append(a)),n[i]=a,t[i]=a}})),n}function je(e){let{swiper:t,extendParams:n,on:r,emit:i}=e;function a(e){let n;return e&&"string"==typeof e&&t.isElement&&(n=t.el.querySelector(e)||t.hostEl.querySelector(e),n)?n:(e&&("string"==typeof e&&(n=[...document.querySelectorAll(e)]),t.params.uniqueNavElements&&"string"==typeof e&&n&&n.length>1&&1===t.el.querySelectorAll(e).length?n=t.el.querySelector(e):n&&1===n.length&&(n=n[0])),e&&!n?e:n)}function l(e,n){const r=t.params.navigation;(e=F(e)).forEach((e=>{e&&(e.classList[n?"add":"remove"](...r.disabledClass.split(" ")),"BUTTON"===e.tagName&&(e.disabled=n),t.params.watchOverflow&&t.enabled&&e.classList[t.isLocked?"add":"remove"](r.lockClass))}))}function s(){const{nextEl:e,prevEl:n}=t.navigation;if(t.params.loop)return l(n,!1),void l(e,!1);l(n,t.isBeginning&&!t.params.rewind),l(e,t.isEnd&&!t.params.rewind)}function o(e){e.preventDefault(),(!t.isBeginning||t.params.loop||t.params.rewind)&&(t.slidePrev(),i("navigationPrev"))}function u(e){e.preventDefault(),(!t.isEnd||t.params.loop||t.params.rewind)&&(t.slideNext(),i("navigationNext"))}function c(){const e=t.params.navigation;if(t.params.navigation=Re(t,t.originalParams.navigation,t.params.navigation,{nextEl:"swiper-button-next",prevEl:"swiper-button-prev"}),!e.nextEl&&!e.prevEl)return;let n=a(e.nextEl),r=a(e.prevEl);Object.assign(t.navigation,{nextEl:n,prevEl:r}),n=F(n),r=F(r);const i=(n,r)=>{n&&n.addEventListener("click","next"===r?u:o),!t.enabled&&n&&n.classList.add(...e.lockClass.split(" "))};n.forEach((e=>i(e,"next"))),r.forEach((e=>i(e,"prev")))}function d(){let{nextEl:e,prevEl:n}=t.navigation;e=F(e),n=F(n);const r=(e,n)=>{e.removeEventListener("click","next"===n?u:o),e.classList.remove(...t.params.navigation.disabledClass.split(" "))};e.forEach((e=>r(e,"next"))),n.forEach((e=>r(e,"prev")))}n({navigation:{nextEl:null,prevEl:null,hideOnClick:!1,disabledClass:"swiper-button-disabled",hiddenClass:"swiper-button-hidden",lockClass:"swiper-button-lock",navigationDisabledClass:"swiper-navigation-disabled"}}),t.navigation={nextEl:null,prevEl:null},r("init",(()=>{!1===t.params.navigation.enabled?p():(c(),s())})),r("toEdge fromEdge lock unlock",(()=>{s()})),r("destroy",(()=>{d()})),r("enable disable",(()=>{let{nextEl:e,prevEl:n}=t.navigation;e=F(e),n=F(n),t.enabled?s():[...e,...n].filter((e=>!!e)).forEach((e=>e.classList.add(t.params.navigation.lockClass)))})),r("click",((e,n)=>{let{nextEl:r,prevEl:a}=t.navigation;r=F(r),a=F(a);const l=n.target;let s=a.includes(l)||r.includes(l);if(t.isElement&&!s){const e=n.path||n.composedPath&&n.composedPath();e&&(s=e.find((e=>r.includes(e)||a.includes(e))))}if(t.params.navigation.hideOnClick&&!s){if(t.pagination&&t.params.pagination&&t.params.pagination.clickable&&(t.pagination.el===l||t.pagination.el.contains(l)))return;let e;r.length?e=r[0].classList.contains(t.params.navigation.hiddenClass):a.length&&(e=a[0].classList.contains(t.params.navigation.hiddenClass)),i(!0===e?"navigationShow":"navigationHide"),[...r,...a].filter((e=>!!e)).forEach((e=>e.classList.toggle(t.params.navigation.hiddenClass)))}}));const p=()=>{t.el.classList.add(...t.params.navigation.navigationDisabledClass.split(" ")),d()};Object.assign(t.navigation,{enable:()=>{t.el.classList.remove(...t.params.navigation.navigationDisabledClass.split(" ")),c(),s()},disable:p,update:s,init:c,destroy:d})}function Ge(e){return void 0===e&&(e=""),`.${e.trim().replace(/([\.:!+\/])/g,"\\$1").replace(/ /g,".")}`}function Ye(e){let{swiper:t,extendParams:n,on:r,emit:i}=e;const a="swiper-pagination";let l;n({pagination:{el:null,bulletElement:"span",clickable:!1,hideOnClick:!1,renderBullet:null,renderProgressbar:null,renderFraction:null,renderCustom:null,progressbarOpposite:!1,type:"bullets",dynamicBullets:!1,dynamicMainBullets:1,formatFractionCurrent:e=>e,formatFractionTotal:e=>e,bulletClass:`${a}-bullet`,bulletActiveClass:`${a}-bullet-active`,modifierClass:`${a}-`,currentClass:`${a}-current`,totalClass:`${a}-total`,hiddenClass:`${a}-hidden`,progressbarFillClass:`${a}-progressbar-fill`,progressbarOppositeClass:`${a}-progressbar-opposite`,clickableClass:`${a}-clickable`,lockClass:`${a}-lock`,horizontalClass:`${a}-horizontal`,verticalClass:`${a}-vertical`,paginationDisabledClass:`${a}-disabled`}}),t.pagination={el:null,bullets:[]};let s=0;function o(){return!t.params.pagination.el||!t.pagination.el||Array.isArray(t.pagination.el)&&0===t.pagination.el.length}function u(e,n){const{bulletActiveClass:r}=t.params.pagination;e&&(e=e[("prev"===n?"previous":"next")+"ElementSibling"])&&(e.classList.add(`${r}-${n}`),(e=e[("prev"===n?"previous":"next")+"ElementSibling"])&&e.classList.add(`${r}-${n}-${n}`))}function c(e){const n=e.target.closest(Ge(t.params.pagination.bulletClass));if(!n)return;e.preventDefault();const r=N(n)*t.params.slidesPerGroup;if(t.params.loop){if(t.realIndex===r)return;const e=(i=t.realIndex,a=r,(a%=l=t.slides.length)==1+(i%=l)?"next":a===i-1?"previous":void 0);"next"===e?t.slideNext():"previous"===e?t.slidePrev():t.slideToLoop(r)}else t.slideTo(r);var i,a,l}function d(){const e=t.rtl,n=t.params.pagination;if(o())return;let r,a,c=t.pagination.el;c=F(c);const d=t.virtual&&t.params.virtual.enabled?t.virtual.slides.length:t.slides.length,p=t.params.loop?Math.ceil(d/t.params.slidesPerGroup):t.snapGrid.length;if(t.params.loop?(a=t.previousRealIndex||0,r=t.params.slidesPerGroup>1?Math.floor(t.realIndex/t.params.slidesPerGroup):t.realIndex):void 0!==t.snapIndex?(r=t.snapIndex,a=t.previousSnapIndex):(a=t.previousIndex||0,r=t.activeIndex||0),"bullets"===n.type&&t.pagination.bullets&&t.pagination.bullets.length>0){const i=t.pagination.bullets;let o,d,p;if(n.dynamicBullets&&(l=D(i[0],t.isHorizontal()?"width":"height",!0),c.forEach((e=>{e.style[t.isHorizontal()?"width":"height"]=l*(n.dynamicMainBullets+4)+"px"})),n.dynamicMainBullets>1&&void 0!==a&&(s+=r-(a||0),s>n.dynamicMainBullets-1?s=n.dynamicMainBullets-1:s<0&&(s=0)),o=Math.max(r-s,0),d=o+(Math.min(i.length,n.dynamicMainBullets)-1),p=(d+o)/2),i.forEach((e=>{const t=[...["","-next","-next-next","-prev","-prev-prev","-main"].map((e=>`${n.bulletActiveClass}${e}`))].map((e=>"string"==typeof e&&e.includes(" ")?e.split(" "):e)).flat();e.classList.remove(...t)})),c.length>1)i.forEach((e=>{const i=N(e);i===r?e.classList.add(...n.bulletActiveClass.split(" ")):t.isElement&&e.setAttribute("part","bullet"),n.dynamicBullets&&(i>=o&&i<=d&&e.classList.add(...`${n.bulletActiveClass}-main`.split(" ")),i===o&&u(e,"prev"),i===d&&u(e,"next"))}));else{const e=i[r];if(e&&e.classList.add(...n.bulletActiveClass.split(" ")),t.isElement&&i.forEach(((e,t)=>{e.setAttribute("part",t===r?"bullet-active":"bullet")})),n.dynamicBullets){const e=i[o],t=i[d];for(let e=o;e<=d;e+=1)i[e]&&i[e].classList.add(...`${n.bulletActiveClass}-main`.split(" "));u(e,"prev"),u(t,"next")}}if(n.dynamicBullets){const r=Math.min(i.length,n.dynamicMainBullets+4),a=(l*r-l)/2-p*l,s=e?"right":"left";i.forEach((e=>{e.style[t.isHorizontal()?s:"top"]=`${a}px`}))}}c.forEach(((e,a)=>{if("fraction"===n.type&&(e.querySelectorAll(Ge(n.currentClass)).forEach((e=>{e.textContent=n.formatFractionCurrent(r+1)})),e.querySelectorAll(Ge(n.totalClass)).forEach((e=>{e.textContent=n.formatFractionTotal(p)}))),"progressbar"===n.type){let i;i=n.progressbarOpposite?t.isHorizontal()?"vertical":"horizontal":t.isHorizontal()?"horizontal":"vertical";const a=(r+1)/p;let l=1,s=1;"horizontal"===i?l=a:s=a,e.querySelectorAll(Ge(n.progressbarFillClass)).forEach((e=>{e.style.transform=`translate3d(0,0,0) scaleX(${l}) scaleY(${s})`,e.style.transitionDuration=`${t.params.speed}ms`}))}"custom"===n.type&&n.renderCustom?(e.innerHTML=n.renderCustom(t,r+1,p),0===a&&i("paginationRender",e)):(0===a&&i("paginationRender",e),i("paginationUpdate",e)),t.params.watchOverflow&&t.enabled&&e.classList[t.isLocked?"add":"remove"](n.lockClass)}))}function p(){const e=t.params.pagination;if(o())return;const n=t.virtual&&t.params.virtual.enabled?t.virtual.slides.length:t.grid&&t.params.grid.rows>1?t.slides.length/Math.ceil(t.params.grid.rows):t.slides.length;let r=t.pagination.el;r=F(r);let a="";if("bullets"===e.type){let r=t.params.loop?Math.ceil(n/t.params.slidesPerGroup):t.snapGrid.length;t.params.freeMode&&t.params.freeMode.enabled&&r>n&&(r=n);for(let n=0;n<r;n+=1)e.renderBullet?a+=e.renderBullet.call(t,n,e.bulletClass):a+=`<${e.bulletElement} ${t.isElement?'part="bullet"':""} class="${e.bulletClass}"></${e.bulletElement}>`}"fraction"===e.type&&(a=e.renderFraction?e.renderFraction.call(t,e.currentClass,e.totalClass):`<span class="${e.currentClass}"></span> / <span class="${e.totalClass}"></span>`),"progressbar"===e.type&&(a=e.renderProgressbar?e.renderProgressbar.call(t,e.progressbarFillClass):`<span class="${e.progressbarFillClass}"></span>`),t.pagination.bullets=[],r.forEach((n=>{"custom"!==e.type&&(n.innerHTML=a||""),"bullets"===e.type&&t.pagination.bullets.push(...n.querySelectorAll(Ge(e.bulletClass)))})),"custom"!==e.type&&i("paginationRender",r[0])}function f(){t.params.pagination=Re(t,t.originalParams.pagination,t.params.pagination,{el:"swiper-pagination"});const e=t.params.pagination;if(!e.el)return;let n;"string"==typeof e.el&&t.isElement&&(n=t.el.querySelector(e.el)),n||"string"!=typeof e.el||(n=[...document.querySelectorAll(e.el)]),n||(n=e.el),n&&0!==n.length&&(t.params.uniqueNavElements&&"string"==typeof e.el&&Array.isArray(n)&&n.length>1&&(n=[...t.el.querySelectorAll(e.el)],n.length>1&&(n=n.filter((e=>I(e,".swiper")[0]===t.el))[0])),Array.isArray(n)&&1===n.length&&(n=n[0]),Object.assign(t.pagination,{el:n}),n=F(n),n.forEach((n=>{"bullets"===e.type&&e.clickable&&n.classList.add(...(e.clickableClass||"").split(" ")),n.classList.add(e.modifierClass+e.type),n.classList.add(t.isHorizontal()?e.horizontalClass:e.verticalClass),"bullets"===e.type&&e.dynamicBullets&&(n.classList.add(`${e.modifierClass}${e.type}-dynamic`),s=0,e.dynamicMainBullets<1&&(e.dynamicMainBullets=1)),"progressbar"===e.type&&e.progressbarOpposite&&n.classList.add(e.progressbarOppositeClass),e.clickable&&n.addEventListener("click",c),t.enabled||n.classList.add(e.lockClass)})))}function h(){const e=t.params.pagination;if(o())return;let n=t.pagination.el;n&&(n=F(n),n.forEach((n=>{n.classList.remove(e.hiddenClass),n.classList.remove(e.modifierClass+e.type),n.classList.remove(t.isHorizontal()?e.horizontalClass:e.verticalClass),e.clickable&&(n.classList.remove(...(e.clickableClass||"").split(" ")),n.removeEventListener("click",c))}))),t.pagination.bullets&&t.pagination.bullets.forEach((t=>t.classList.remove(...e.bulletActiveClass.split(" "))))}r("changeDirection",(()=>{if(!t.pagination||!t.pagination.el)return;const e=t.params.pagination;let{el:n}=t.pagination;n=F(n),n.forEach((n=>{n.classList.remove(e.horizontalClass,e.verticalClass),n.classList.add(t.isHorizontal()?e.horizontalClass:e.verticalClass)}))})),r("init",(()=>{!1===t.params.pagination.enabled?m():(f(),p(),d())})),r("activeIndexChange",(()=>{void 0===t.snapIndex&&d()})),r("snapIndexChange",(()=>{d()})),r("snapGridLengthChange",(()=>{p(),d()})),r("destroy",(()=>{h()})),r("enable disable",(()=>{let{el:e}=t.pagination;e&&(e=F(e),e.forEach((e=>e.classList[t.enabled?"remove":"add"](t.params.pagination.lockClass))))})),r("lock unlock",(()=>{d()})),r("click",((e,n)=>{const r=n.target,a=F(t.pagination.el);if(t.params.pagination.el&&t.params.pagination.hideOnClick&&a&&a.length>0&&!r.classList.contains(t.params.pagination.bulletClass)){if(t.navigation&&(t.navigation.nextEl&&r===t.navigation.nextEl||t.navigation.prevEl&&r===t.navigation.prevEl))return;const e=a[0].classList.contains(t.params.pagination.hiddenClass);i(!0===e?"paginationShow":"paginationHide"),a.forEach((e=>e.classList.toggle(t.params.pagination.hiddenClass)))}}));const m=()=>{t.el.classList.add(t.params.pagination.paginationDisabledClass);let{el:e}=t.pagination;e&&(e=F(e),e.forEach((e=>e.classList.add(t.params.pagination.paginationDisabledClass)))),h()};Object.assign(t.pagination,{enable:()=>{t.el.classList.remove(t.params.pagination.paginationDisabledClass);let{el:e}=t.pagination;e&&(e=F(e),e.forEach((e=>e.classList.remove(t.params.pagination.paginationDisabledClass)))),f(),p(),d()},disable:m,render:p,update:d,init:f,destroy:h})}var Ue;function $e(){return $e=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)({}).hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},$e.apply(null,arguments)}Fe.displayName="SwiperSlide";const Ve=function(e){return r.createElement("svg",$e({xmlns:"http://www.w3.org/2000/svg",width:10,height:14,fill:"none"},e),Ue||(Ue=r.createElement("path",{d:"M8.5.75 2.25 7l6.25 6.25"})))};var He=n(69),We={};We.styleTagTransform=g(),We.setAttributes=p(),We.insert=c().bind(null,"head"),We.domAPI=o(),We.insertStyleElement=h(),l()(He.A,We),He.A&&He.A.locals&&He.A.locals;var qe=[{sort:0,name:"Кино СССР",interval:{start:1960,end:1977},slides:[{name:"1960",description:"Начало десятилетия, закладываются основы жанров."},{name:"1963",description:"Пик популярности фильмов Леонида Гайдая."},{name:"1966",description:"Появление новых режиссёров и актеров."},{name:"1970",description:"Фильмы Андрея Тарковского, влияние на мировое кино."},{name:"1974",description:"Завершение периода расцвета советского кино."}]},{sort:1,name:"Рок-музыка",interval:{start:1970,end:1979},slides:[{name:"1970",description:"Pink Floyd, Genesis, Yes.  Более сложные композиции и концептуальные альбомы."},{name:"1970",description:"Led Zeppelin, Deep Purple, Black Sabbath.  Более тяжелое звучание и мощная энергетика."},{name:"1975",description:"Ramones, Sex Pistols.  Протестное и бунтарское настроение."},{name:"1983",description:"The Police, Talking Heads.  Эксперименты со стилями и звучанием."}]},{sort:2,name:"Космическая гонка",interval:{start:1957,end:1975},slides:[{name:"1957",description:"Первый спутник (СССР), полёт Гагарина (СССР)."},{name:"1961",description:"Развитие космических программ в СССР и США."},{name:"1966",description:'Программа "Аполлон" (США), высадка человека на Луну.'},{name:"1970",description:"Новые космические станции и проекты."},{name:"1973",description:"Начало сотрудничества между СССР и США в космосе."}]},{sort:3,name:"Видеоигры",interval:{start:1972,end:1989},slides:[{name:"1972",description:"Pong, Space Invaders.  Зарождение индустрии."},{name:"1977",description:"Pac-Man, Donkey Kong, Space Invaders."},{name:"1982",description:"NES, Sega Master System.  Домашние игровые консоли."},{name:"1986",description:"Появление новых жанров и игровых механик."}]},{sort:4,name:"Персональные компьютеры",interval:{start:1975,end:1990},slides:[{name:"1975",description:"Altair 8800, Apple II.  Начало персональной эры."},{name:"1980",description:"Распространение IBM PC и клонов.  Стандартизация."},{name:"1985",description:"Развитие графического интерфейса и операционных систем."},{name:"1990",description:"Появление новых технологий и архитектур."}]},{sort:5,name:"Мобильная связь",interval:{start:1973,end:2e3},slides:[{name:"1970",description:"Развитие первых сотовых сетей.  Аналоговые системы."},{name:"1980",description:"Повсеместное внедрение аналоговых сотовых телефонов."},{name:"1990",description:"Появление цифровых сетей GSM. Новые стандарты связи."}]}];function Qe(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Xe(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}var Ke,Ze,Je,et,tt,nt,rt,it,at,lt,st,ot,ut,ct,dt,pt,ft,ht={autoSleep:120,force3D:"auto",nullTargetWarn:1,units:{lineHeight:""}},mt={duration:.5,overwrite:!1,delay:0},gt=1e8,vt=1e-8,At=2*Math.PI,yt=At/4,bt=0,wt=Math.sqrt,_t=Math.cos,Ct=Math.sin,xt=function(e){return"string"==typeof e},Et=function(e){return"function"==typeof e},St=function(e){return"number"==typeof e},kt=function(e){return void 0===e},Tt=function(e){return"object"==typeof e},Pt=function(e){return!1!==e},Bt=function(){return"undefined"!=typeof window},Mt=function(e){return Et(e)||xt(e)},zt="function"==typeof ArrayBuffer&&ArrayBuffer.isView||function(){},Ot=Array.isArray,Lt=/(?:-?\.?\d|\.)+/gi,Nt=/[-+=.]*\d+[.e\-+]*\d*[e\-+]*\d*/g,It=/[-+=.]*\d+[.e-]*\d*[a-z%]*/g,Dt=/[-+=.]*\d+\.?\d*(?:e-|e\+)?\d*/gi,Ft=/[+-]=-?[.\d]+/,Rt=/[^,'"\[\]\s]+/gi,jt=/^[+\-=e\s\d]*\d+[.\d]*([a-z]*|%)\s*$/i,Gt={},Yt={},Ut=function(e){return(Yt=yn(e,Gt))&&yi},$t=function(e,t){return console.warn("Invalid property",e,"set to",t,"Missing plugin? gsap.registerPlugin()")},Vt=function(e,t){return!t&&console.warn(e)},Ht=function(e,t){return e&&(Gt[e]=t)&&Yt&&(Yt[e]=t)||Gt},Wt=function(){return 0},qt={suppressEvents:!0,isStart:!0,kill:!1},Qt={suppressEvents:!0,kill:!1},Xt={suppressEvents:!0},Kt={},Zt=[],Jt={},en={},tn={},nn=30,rn=[],an="",ln=function(e){var t,n,r=e[0];if(Tt(r)||Et(r)||(e=[e]),!(t=(r._gsap||{}).harness)){for(n=rn.length;n--&&!rn[n].targetTest(r););t=rn[n]}for(n=e.length;n--;)e[n]&&(e[n]._gsap||(e[n]._gsap=new Or(e[n],t)))||e.splice(n,1);return e},sn=function(e){return e._gsap||ln(Xn(e))[0]._gsap},on=function(e,t,n){return(n=e[t])&&Et(n)?e[t]():kt(n)&&e.getAttribute&&e.getAttribute(t)||n},un=function(e,t){return(e=e.split(",")).forEach(t)||e},cn=function(e){return Math.round(1e5*e)/1e5||0},dn=function(e){return Math.round(1e7*e)/1e7||0},pn=function(e,t){var n=t.charAt(0),r=parseFloat(t.substr(2));return e=parseFloat(e),"+"===n?e+r:"-"===n?e-r:"*"===n?e*r:e/r},fn=function(e,t){for(var n=t.length,r=0;e.indexOf(t[r])<0&&++r<n;);return r<n},hn=function(){var e,t,n=Zt.length,r=Zt.slice(0);for(Jt={},Zt.length=0,e=0;e<n;e++)(t=r[e])&&t._lazy&&(t.render(t._lazy[0],t._lazy[1],!0)._lazy=0)},mn=function(e,t,n,r){Zt.length&&!Ze&&hn(),e.render(t,n,r||Ze&&t<0&&(e._initted||e._startAt)),Zt.length&&!Ze&&hn()},gn=function(e){var t=parseFloat(e);return(t||0===t)&&(e+"").match(Rt).length<2?t:xt(e)?e.trim():e},vn=function(e){return e},An=function(e,t){for(var n in t)n in e||(e[n]=t[n]);return e},yn=function(e,t){for(var n in t)e[n]=t[n];return e},bn=function e(t,n){for(var r in n)"__proto__"!==r&&"constructor"!==r&&"prototype"!==r&&(t[r]=Tt(n[r])?e(t[r]||(t[r]={}),n[r]):n[r]);return t},wn=function(e,t){var n,r={};for(n in e)n in t||(r[n]=e[n]);return r},_n=function(e){var t,n=e.parent||et,r=e.keyframes?(t=Ot(e.keyframes),function(e,n){for(var r in n)r in e||"duration"===r&&t||"ease"===r||(e[r]=n[r])}):An;if(Pt(e.inherit))for(;n;)r(e,n.vars.defaults),n=n.parent||n._dp;return e},Cn=function(e,t,n,r,i){void 0===n&&(n="_first"),void 0===r&&(r="_last");var a,l=e[r];if(i)for(a=t[i];l&&l[i]>a;)l=l._prev;return l?(t._next=l._next,l._next=t):(t._next=e[n],e[n]=t),t._next?t._next._prev=t:e[r]=t,t._prev=l,t.parent=t._dp=e,t},xn=function(e,t,n,r){void 0===n&&(n="_first"),void 0===r&&(r="_last");var i=t._prev,a=t._next;i?i._next=a:e[n]===t&&(e[n]=a),a?a._prev=i:e[r]===t&&(e[r]=i),t._next=t._prev=t.parent=null},En=function(e,t){e.parent&&(!t||e.parent.autoRemoveChildren)&&e.parent.remove&&e.parent.remove(e),e._act=0},Sn=function(e,t){if(e&&(!t||t._end>e._dur||t._start<0))for(var n=e;n;)n._dirty=1,n=n.parent;return e},kn=function(e,t,n,r){return e._startAt&&(Ze?e._startAt.revert(Qt):e.vars.immediateRender&&!e.vars.autoRevert||e._startAt.render(t,!0,r))},Tn=function e(t){return!t||t._ts&&e(t.parent)},Pn=function(e){return e._repeat?Bn(e._tTime,e=e.duration()+e._rDelay)*e:0},Bn=function(e,t){var n=Math.floor(e/=t);return e&&n===e?n-1:n},Mn=function(e,t){return(e-t._start)*t._ts+(t._ts>=0?0:t._dirty?t.totalDuration():t._tDur)},zn=function(e){return e._end=dn(e._start+(e._tDur/Math.abs(e._ts||e._rts||vt)||0))},On=function(e,t){var n=e._dp;return n&&n.smoothChildTiming&&e._ts&&(e._start=dn(n._time-(e._ts>0?t/e._ts:((e._dirty?e.totalDuration():e._tDur)-t)/-e._ts)),zn(e),n._dirty||Sn(n,e)),e},Ln=function(e,t){var n;if((t._time||!t._dur&&t._initted||t._start<e._time&&(t._dur||!t.add))&&(n=Mn(e.rawTime(),t),(!t._dur||Hn(0,t.totalDuration(),n)-t._tTime>vt)&&t.render(n,!0)),Sn(e,t)._dp&&e._initted&&e._time>=e._dur&&e._ts){if(e._dur<e.duration())for(n=e;n._dp;)n.rawTime()>=0&&n.totalTime(n._tTime),n=n._dp;e._zTime=-1e-8}},Nn=function(e,t,n,r){return t.parent&&En(t),t._start=dn((St(n)?n:n||e!==et?Un(e,n,t):e._time)+t._delay),t._end=dn(t._start+(t.totalDuration()/Math.abs(t.timeScale())||0)),Cn(e,t,"_first","_last",e._sort?"_start":0),Rn(t)||(e._recent=t),r||Ln(e,t),e._ts<0&&On(e,e._tTime),e},In=function(e,t){return(Gt.ScrollTrigger||$t("scrollTrigger",t))&&Gt.ScrollTrigger.create(t,e)},Dn=function(e,t,n,r,i){return Gr(e,t,i),e._initted?!n&&e._pt&&!Ze&&(e._dur&&!1!==e.vars.lazy||!e._dur&&e.vars.lazy)&&at!==br.frame?(Zt.push(e),e._lazy=[i,r],1):void 0:1},Fn=function e(t){var n=t.parent;return n&&n._ts&&n._initted&&!n._lock&&(n.rawTime()<0||e(n))},Rn=function(e){var t=e.data;return"isFromStart"===t||"isStart"===t},jn=function(e,t,n,r){var i=e._repeat,a=dn(t)||0,l=e._tTime/e._tDur;return l&&!r&&(e._time*=a/e._dur),e._dur=a,e._tDur=i?i<0?1e10:dn(a*(i+1)+e._rDelay*i):a,l>0&&!r&&On(e,e._tTime=e._tDur*l),e.parent&&zn(e),n||Sn(e.parent,e),e},Gn=function(e){return e instanceof Nr?Sn(e):jn(e,e._dur)},Yn={_start:0,endTime:Wt,totalDuration:Wt},Un=function e(t,n,r){var i,a,l,s=t.labels,o=t._recent||Yn,u=t.duration()>=gt?o.endTime(!1):t._dur;return xt(n)&&(isNaN(n)||n in s)?(a=n.charAt(0),l="%"===n.substr(-1),i=n.indexOf("="),"<"===a||">"===a?(i>=0&&(n=n.replace(/=/,"")),("<"===a?o._start:o.endTime(o._repeat>=0))+(parseFloat(n.substr(1))||0)*(l?(i<0?o:r).totalDuration()/100:1)):i<0?(n in s||(s[n]=u),s[n]):(a=parseFloat(n.charAt(i-1)+n.substr(i+1)),l&&r&&(a=a/100*(Ot(r)?r[0]:r).totalDuration()),i>1?e(t,n.substr(0,i-1),r)+a:u+a)):null==n?u:+n},$n=function(e,t,n){var r,i,a=St(t[1]),l=(a?2:1)+(e<2?0:1),s=t[l];if(a&&(s.duration=t[1]),s.parent=n,e){for(r=s,i=n;i&&!("immediateRender"in r);)r=i.vars.defaults||{},i=Pt(i.vars.inherit)&&i.parent;s.immediateRender=Pt(r.immediateRender),e<2?s.runBackwards=1:s.startAt=t[l-1]}return new Hr(t[0],s,t[l+1])},Vn=function(e,t){return e||0===e?t(e):t},Hn=function(e,t,n){return n<e?e:n>t?t:n},Wn=function(e,t){return xt(e)&&(t=jt.exec(e))?t[1]:""},qn=[].slice,Qn=function(e,t){return e&&Tt(e)&&"length"in e&&(!t&&!e.length||e.length-1 in e&&Tt(e[0]))&&!e.nodeType&&e!==tt},Xn=function(e,t,n){return Je&&!t&&Je.selector?Je.selector(e):!xt(e)||n||!nt&&wr()?Ot(e)?function(e,t,n){return void 0===n&&(n=[]),e.forEach((function(e){var r;return xt(e)&&!t||Qn(e,1)?(r=n).push.apply(r,Xn(e)):n.push(e)}))||n}(e,n):Qn(e)?qn.call(e,0):e?[e]:[]:qn.call((t||rt).querySelectorAll(e),0)},Kn=function(e){return e=Xn(e)[0]||Vt("Invalid scope")||{},function(t){var n=e.current||e.nativeElement||e;return Xn(t,n.querySelectorAll?n:n===e?Vt("Invalid scope")||rt.createElement("div"):e)}},Zn=function(e){return e.sort((function(){return.5-Math.random()}))},Jn=function(e){if(Et(e))return e;var t=Tt(e)?e:{each:e},n=Tr(t.ease),r=t.from||0,i=parseFloat(t.base)||0,a={},l=r>0&&r<1,s=isNaN(r)||l,o=t.axis,u=r,c=r;return xt(r)?u=c={center:.5,edges:.5,end:1}[r]||0:!l&&s&&(u=r[0],c=r[1]),function(e,l,d){var p,f,h,m,g,v,A,y,b,w=(d||t).length,_=a[w];if(!_){if(!(b="auto"===t.grid?0:(t.grid||[1,gt])[1])){for(A=-gt;A<(A=d[b++].getBoundingClientRect().left)&&b<w;);b<w&&b--}for(_=a[w]=[],p=s?Math.min(b,w)*u-.5:r%b,f=b===gt?0:s?w*c/b-.5:r/b|0,A=0,y=gt,v=0;v<w;v++)h=v%b-p,m=f-(v/b|0),_[v]=g=o?Math.abs("y"===o?m:h):wt(h*h+m*m),g>A&&(A=g),g<y&&(y=g);"random"===r&&Zn(_),_.max=A-y,_.min=y,_.v=w=(parseFloat(t.amount)||parseFloat(t.each)*(b>w?w-1:o?"y"===o?w/b:b:Math.max(b,w/b))||0)*("edges"===r?-1:1),_.b=w<0?i-w:i,_.u=Wn(t.amount||t.each)||0,n=n&&w<0?Sr(n):n}return w=(_[e]-_.min)/_.max||0,dn(_.b+(n?n(w):w)*_.v)+_.u}},er=function(e){var t=Math.pow(10,((e+"").split(".")[1]||"").length);return function(n){var r=dn(Math.round(parseFloat(n)/e)*e*t);return(r-r%1)/t+(St(n)?0:Wn(n))}},tr=function(e,t){var n,r,i=Ot(e);return!i&&Tt(e)&&(n=i=e.radius||gt,e.values?(e=Xn(e.values),(r=!St(e[0]))&&(n*=n)):e=er(e.increment)),Vn(t,i?Et(e)?function(t){return r=e(t),Math.abs(r-t)<=n?r:t}:function(t){for(var i,a,l=parseFloat(r?t.x:t),s=parseFloat(r?t.y:0),o=gt,u=0,c=e.length;c--;)(i=r?(i=e[c].x-l)*i+(a=e[c].y-s)*a:Math.abs(e[c]-l))<o&&(o=i,u=c);return u=!n||o<=n?e[u]:t,r||u===t||St(t)?u:u+Wn(t)}:er(e))},nr=function(e,t,n,r){return Vn(Ot(e)?!t:!0===n?!!(n=0):!r,(function(){return Ot(e)?e[~~(Math.random()*e.length)]:(n=n||1e-5)&&(r=n<1?Math.pow(10,(n+"").length-2):1)&&Math.floor(Math.round((e-n/2+Math.random()*(t-e+.99*n))/n)*n*r)/r}))},rr=function(e,t,n){return Vn(n,(function(n){return e[~~t(n)]}))},ir=function(e){for(var t,n,r,i,a=0,l="";~(t=e.indexOf("random(",a));)r=e.indexOf(")",t),i="["===e.charAt(t+7),n=e.substr(t+7,r-t-7).match(i?Rt:Lt),l+=e.substr(a,t-a)+nr(i?n:+n[0],i?0:+n[1],+n[2]||1e-5),a=r+1;return l+e.substr(a,e.length-a)},ar=function(e,t,n,r,i){var a=t-e,l=r-n;return Vn(i,(function(t){return n+((t-e)/a*l||0)}))},lr=function(e,t,n){var r,i,a,l=e.labels,s=gt;for(r in l)(i=l[r]-t)<0==!!n&&i&&s>(i=Math.abs(i))&&(a=r,s=i);return a},sr=function(e,t,n){var r,i,a,l=e.vars,s=l[t],o=Je,u=e._ctx;if(s)return r=l[t+"Params"],i=l.callbackScope||e,n&&Zt.length&&hn(),u&&(Je=u),a=r?s.apply(i,r):s.call(i),Je=o,a},or=function(e){return En(e),e.scrollTrigger&&e.scrollTrigger.kill(!!Ze),e.progress()<1&&sr(e,"onInterrupt"),e},ur=[],cr=function(e){if(e)if(e=!e.name&&e.default||e,Bt()||e.headless){var t=e.name,n=Et(e),r=t&&!n&&e.init?function(){this._props=[]}:e,i={init:Wt,render:ti,add:Rr,kill:ri,modifier:ni,rawVars:0},a={targetTest:0,get:0,getSetter:Kr,aliases:{},register:0};if(wr(),e!==r){if(en[t])return;An(r,An(wn(e,i),a)),yn(r.prototype,yn(i,wn(e,a))),en[r.prop=t]=r,e.targetTest&&(rn.push(r),Kt[t]=1),t=("css"===t?"CSS":t.charAt(0).toUpperCase()+t.substr(1))+"Plugin"}Ht(t,r),e.register&&e.register(yi,r,li)}else ur.push(e)},dr=255,pr={aqua:[0,dr,dr],lime:[0,dr,0],silver:[192,192,192],black:[0,0,0],maroon:[128,0,0],teal:[0,128,128],blue:[0,0,dr],navy:[0,0,128],white:[dr,dr,dr],olive:[128,128,0],yellow:[dr,dr,0],orange:[dr,165,0],gray:[128,128,128],purple:[128,0,128],green:[0,128,0],red:[dr,0,0],pink:[dr,192,203],cyan:[0,dr,dr],transparent:[dr,dr,dr,0]},fr=function(e,t,n){return(6*(e+=e<0?1:e>1?-1:0)<1?t+(n-t)*e*6:e<.5?n:3*e<2?t+(n-t)*(2/3-e)*6:t)*dr+.5|0},hr=function(e,t,n){var r,i,a,l,s,o,u,c,d,p,f=e?St(e)?[e>>16,e>>8&dr,e&dr]:0:pr.black;if(!f){if(","===e.substr(-1)&&(e=e.substr(0,e.length-1)),pr[e])f=pr[e];else if("#"===e.charAt(0)){if(e.length<6&&(r=e.charAt(1),i=e.charAt(2),a=e.charAt(3),e="#"+r+r+i+i+a+a+(5===e.length?e.charAt(4)+e.charAt(4):"")),9===e.length)return[(f=parseInt(e.substr(1,6),16))>>16,f>>8&dr,f&dr,parseInt(e.substr(7),16)/255];f=[(e=parseInt(e.substr(1),16))>>16,e>>8&dr,e&dr]}else if("hsl"===e.substr(0,3))if(f=p=e.match(Lt),t){if(~e.indexOf("="))return f=e.match(Nt),n&&f.length<4&&(f[3]=1),f}else l=+f[0]%360/360,s=+f[1]/100,r=2*(o=+f[2]/100)-(i=o<=.5?o*(s+1):o+s-o*s),f.length>3&&(f[3]*=1),f[0]=fr(l+1/3,r,i),f[1]=fr(l,r,i),f[2]=fr(l-1/3,r,i);else f=e.match(Lt)||pr.transparent;f=f.map(Number)}return t&&!p&&(r=f[0]/dr,i=f[1]/dr,a=f[2]/dr,o=((u=Math.max(r,i,a))+(c=Math.min(r,i,a)))/2,u===c?l=s=0:(d=u-c,s=o>.5?d/(2-u-c):d/(u+c),l=u===r?(i-a)/d+(i<a?6:0):u===i?(a-r)/d+2:(r-i)/d+4,l*=60),f[0]=~~(l+.5),f[1]=~~(100*s+.5),f[2]=~~(100*o+.5)),n&&f.length<4&&(f[3]=1),f},mr=function(e){var t=[],n=[],r=-1;return e.split(vr).forEach((function(e){var i=e.match(It)||[];t.push.apply(t,i),n.push(r+=i.length+1)})),t.c=n,t},gr=function(e,t,n){var r,i,a,l,s="",o=(e+s).match(vr),u=t?"hsla(":"rgba(",c=0;if(!o)return e;if(o=o.map((function(e){return(e=hr(e,t,1))&&u+(t?e[0]+","+e[1]+"%,"+e[2]+"%,"+e[3]:e.join(","))+")"})),n&&(a=mr(e),(r=n.c).join(s)!==a.c.join(s)))for(l=(i=e.replace(vr,"1").split(It)).length-1;c<l;c++)s+=i[c]+(~r.indexOf(c)?o.shift()||u+"0,0,0,0)":(a.length?a:o.length?o:n).shift());if(!i)for(l=(i=e.split(vr)).length-1;c<l;c++)s+=i[c]+o[c];return s+i[l]},vr=function(){var e,t="(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#(?:[0-9a-f]{3,4}){1,2}\\b";for(e in pr)t+="|"+e+"\\b";return new RegExp(t+")","gi")}(),Ar=/hsl[a]?\(/,yr=function(e){var t,n=e.join(" ");if(vr.lastIndex=0,vr.test(n))return t=Ar.test(n),e[1]=gr(e[1],t),e[0]=gr(e[0],t,mr(e[1])),!0},br=function(){var e,t,n,r,i,a,l=Date.now,s=500,o=33,u=l(),c=u,d=1e3/240,p=d,f=[],h=function n(h){var m,g,v,A,y=l()-c,b=!0===h;if((y>s||y<0)&&(u+=y-o),((m=(v=(c+=y)-u)-p)>0||b)&&(A=++r.frame,i=v-1e3*r.time,r.time=v/=1e3,p+=m+(m>=d?4:d-m),g=1),b||(e=t(n)),g)for(a=0;a<f.length;a++)f[a](v,i,A,h)};return r={time:0,frame:0,tick:function(){h(!0)},deltaRatio:function(e){return i/(1e3/(e||60))},wake:function(){it&&(!nt&&Bt()&&(tt=nt=window,rt=tt.document||{},Gt.gsap=yi,(tt.gsapVersions||(tt.gsapVersions=[])).push(yi.version),Ut(Yt||tt.GreenSockGlobals||!tt.gsap&&tt||{}),ur.forEach(cr)),n="undefined"!=typeof requestAnimationFrame&&requestAnimationFrame,e&&r.sleep(),t=n||function(e){return setTimeout(e,p-1e3*r.time+1|0)},st=1,h(2))},sleep:function(){(n?cancelAnimationFrame:clearTimeout)(e),st=0,t=Wt},lagSmoothing:function(e,t){s=e||1/0,o=Math.min(t||33,s)},fps:function(e){d=1e3/(e||240),p=1e3*r.time+d},add:function(e,t,n){var i=t?function(t,n,a,l){e(t,n,a,l),r.remove(i)}:e;return r.remove(e),f[n?"unshift":"push"](i),wr(),i},remove:function(e,t){~(t=f.indexOf(e))&&f.splice(t,1)&&a>=t&&a--},_listeners:f}}(),wr=function(){return!st&&br.wake()},_r={},Cr=/^[\d.\-M][\d.\-,\s]/,xr=/["']/g,Er=function(e){for(var t,n,r,i={},a=e.substr(1,e.length-3).split(":"),l=a[0],s=1,o=a.length;s<o;s++)n=a[s],t=s!==o-1?n.lastIndexOf(","):n.length,r=n.substr(0,t),i[l]=isNaN(r)?r.replace(xr,"").trim():+r,l=n.substr(t+1).trim();return i},Sr=function(e){return function(t){return 1-e(1-t)}},kr=function e(t,n){for(var r,i=t._first;i;)i instanceof Nr?e(i,n):!i.vars.yoyoEase||i._yoyo&&i._repeat||i._yoyo===n||(i.timeline?e(i.timeline,n):(r=i._ease,i._ease=i._yEase,i._yEase=r,i._yoyo=n)),i=i._next},Tr=function(e,t){return e&&(Et(e)?e:_r[e]||function(e){var t,n,r,i,a=(e+"").split("("),l=_r[a[0]];return l&&a.length>1&&l.config?l.config.apply(null,~e.indexOf("{")?[Er(a[1])]:(t=e,n=t.indexOf("(")+1,r=t.indexOf(")"),i=t.indexOf("(",n),t.substring(n,~i&&i<r?t.indexOf(")",r+1):r)).split(",").map(gn)):_r._CE&&Cr.test(e)?_r._CE("",e):l}(e))||t},Pr=function(e,t,n,r){void 0===n&&(n=function(e){return 1-t(1-e)}),void 0===r&&(r=function(e){return e<.5?t(2*e)/2:1-t(2*(1-e))/2});var i,a={easeIn:t,easeOut:n,easeInOut:r};return un(e,(function(e){for(var t in _r[e]=Gt[e]=a,_r[i=e.toLowerCase()]=n,a)_r[i+("easeIn"===t?".in":"easeOut"===t?".out":".inOut")]=_r[e+"."+t]=a[t]})),a},Br=function(e){return function(t){return t<.5?(1-e(1-2*t))/2:.5+e(2*(t-.5))/2}},Mr=function e(t,n,r){var i=n>=1?n:1,a=(r||(t?.3:.45))/(n<1?n:1),l=a/At*(Math.asin(1/i)||0),s=function(e){return 1===e?1:i*Math.pow(2,-10*e)*Ct((e-l)*a)+1},o="out"===t?s:"in"===t?function(e){return 1-s(1-e)}:Br(s);return a=At/a,o.config=function(n,r){return e(t,n,r)},o},zr=function e(t,n){void 0===n&&(n=1.70158);var r=function(e){return e?--e*e*((n+1)*e+n)+1:0},i="out"===t?r:"in"===t?function(e){return 1-r(1-e)}:Br(r);return i.config=function(n){return e(t,n)},i};un("Linear,Quad,Cubic,Quart,Quint,Strong",(function(e,t){var n=t<5?t+1:t;Pr(e+",Power"+(n-1),t?function(e){return Math.pow(e,n)}:function(e){return e},(function(e){return 1-Math.pow(1-e,n)}),(function(e){return e<.5?Math.pow(2*e,n)/2:1-Math.pow(2*(1-e),n)/2}))})),_r.Linear.easeNone=_r.none=_r.Linear.easeIn,Pr("Elastic",Mr("in"),Mr("out"),Mr()),ot=7.5625,dt=2*(ct=1/(ut=2.75)),pt=2.5*ct,Pr("Bounce",(function(e){return 1-ft(1-e)}),ft=function(e){return e<ct?ot*e*e:e<dt?ot*Math.pow(e-1.5/ut,2)+.75:e<pt?ot*(e-=2.25/ut)*e+.9375:ot*Math.pow(e-2.625/ut,2)+.984375}),Pr("Expo",(function(e){return e?Math.pow(2,10*(e-1)):0})),Pr("Circ",(function(e){return-(wt(1-e*e)-1)})),Pr("Sine",(function(e){return 1===e?1:1-_t(e*yt)})),Pr("Back",zr("in"),zr("out"),zr()),_r.SteppedEase=_r.steps=Gt.SteppedEase={config:function(e,t){void 0===e&&(e=1);var n=1/e,r=e+(t?0:1),i=t?1:0;return function(e){return((r*Hn(0,.99999999,e)|0)+i)*n}}},mt.ease=_r["quad.out"],un("onComplete,onUpdate,onStart,onRepeat,onReverseComplete,onInterrupt",(function(e){return an+=e+","+e+"Params,"}));var Or=function(e,t){this.id=bt++,e._gsap=this,this.target=e,this.harness=t,this.get=t?t.get:on,this.set=t?t.getSetter:Kr},Lr=function(){function e(e){this.vars=e,this._delay=+e.delay||0,(this._repeat=e.repeat===1/0?-2:e.repeat||0)&&(this._rDelay=e.repeatDelay||0,this._yoyo=!!e.yoyo||!!e.yoyoEase),this._ts=1,jn(this,+e.duration,1,1),this.data=e.data,Je&&(this._ctx=Je,Je.data.push(this)),st||br.wake()}var t=e.prototype;return t.delay=function(e){return e||0===e?(this.parent&&this.parent.smoothChildTiming&&this.startTime(this._start+e-this._delay),this._delay=e,this):this._delay},t.duration=function(e){return arguments.length?this.totalDuration(this._repeat>0?e+(e+this._rDelay)*this._repeat:e):this.totalDuration()&&this._dur},t.totalDuration=function(e){return arguments.length?(this._dirty=0,jn(this,this._repeat<0?e:(e-this._repeat*this._rDelay)/(this._repeat+1))):this._tDur},t.totalTime=function(e,t){if(wr(),!arguments.length)return this._tTime;var n=this._dp;if(n&&n.smoothChildTiming&&this._ts){for(On(this,e),!n._dp||n.parent||Ln(n,this);n&&n.parent;)n.parent._time!==n._start+(n._ts>=0?n._tTime/n._ts:(n.totalDuration()-n._tTime)/-n._ts)&&n.totalTime(n._tTime,!0),n=n.parent;!this.parent&&this._dp.autoRemoveChildren&&(this._ts>0&&e<this._tDur||this._ts<0&&e>0||!this._tDur&&!e)&&Nn(this._dp,this,this._start-this._delay)}return(this._tTime!==e||!this._dur&&!t||this._initted&&Math.abs(this._zTime)===vt||!e&&!this._initted&&(this.add||this._ptLookup))&&(this._ts||(this._pTime=e),mn(this,e,t)),this},t.time=function(e,t){return arguments.length?this.totalTime(Math.min(this.totalDuration(),e+Pn(this))%(this._dur+this._rDelay)||(e?this._dur:0),t):this._time},t.totalProgress=function(e,t){return arguments.length?this.totalTime(this.totalDuration()*e,t):this.totalDuration()?Math.min(1,this._tTime/this._tDur):this.rawTime()>0?1:0},t.progress=function(e,t){return arguments.length?this.totalTime(this.duration()*(!this._yoyo||1&this.iteration()?e:1-e)+Pn(this),t):this.duration()?Math.min(1,this._time/this._dur):this.rawTime()>0?1:0},t.iteration=function(e,t){var n=this.duration()+this._rDelay;return arguments.length?this.totalTime(this._time+(e-1)*n,t):this._repeat?Bn(this._tTime,n)+1:1},t.timeScale=function(e,t){if(!arguments.length)return-1e-8===this._rts?0:this._rts;if(this._rts===e)return this;var n=this.parent&&this._ts?Mn(this.parent._time,this):this._tTime;return this._rts=+e||0,this._ts=this._ps||-1e-8===e?0:this._rts,this.totalTime(Hn(-Math.abs(this._delay),this._tDur,n),!1!==t),zn(this),function(e){for(var t=e.parent;t&&t.parent;)t._dirty=1,t.totalDuration(),t=t.parent;return e}(this)},t.paused=function(e){return arguments.length?(this._ps!==e&&(this._ps=e,e?(this._pTime=this._tTime||Math.max(-this._delay,this.rawTime()),this._ts=this._act=0):(wr(),this._ts=this._rts,this.totalTime(this.parent&&!this.parent.smoothChildTiming?this.rawTime():this._tTime||this._pTime,1===this.progress()&&Math.abs(this._zTime)!==vt&&(this._tTime-=vt)))),this):this._ps},t.startTime=function(e){if(arguments.length){this._start=e;var t=this.parent||this._dp;return t&&(t._sort||!this.parent)&&Nn(t,this,e-this._delay),this}return this._start},t.endTime=function(e){return this._start+(Pt(e)?this.totalDuration():this.duration())/Math.abs(this._ts||1)},t.rawTime=function(e){var t=this.parent||this._dp;return t?e&&(!this._ts||this._repeat&&this._time&&this.totalProgress()<1)?this._tTime%(this._dur+this._rDelay):this._ts?Mn(t.rawTime(e),this):this._tTime:this._tTime},t.revert=function(e){void 0===e&&(e=Xt);var t=Ze;return Ze=e,(this._initted||this._startAt)&&(this.timeline&&this.timeline.revert(e),this.totalTime(-.01,e.suppressEvents)),"nested"!==this.data&&!1!==e.kill&&this.kill(),Ze=t,this},t.globalTime=function(e){for(var t=this,n=arguments.length?e:t.rawTime();t;)n=t._start+n/(Math.abs(t._ts)||1),t=t._dp;return!this.parent&&this._sat?this._sat.globalTime(e):n},t.repeat=function(e){return arguments.length?(this._repeat=e===1/0?-2:e,Gn(this)):-2===this._repeat?1/0:this._repeat},t.repeatDelay=function(e){if(arguments.length){var t=this._time;return this._rDelay=e,Gn(this),t?this.time(t):this}return this._rDelay},t.yoyo=function(e){return arguments.length?(this._yoyo=e,this):this._yoyo},t.seek=function(e,t){return this.totalTime(Un(this,e),Pt(t))},t.restart=function(e,t){return this.play().totalTime(e?-this._delay:0,Pt(t))},t.play=function(e,t){return null!=e&&this.seek(e,t),this.reversed(!1).paused(!1)},t.reverse=function(e,t){return null!=e&&this.seek(e||this.totalDuration(),t),this.reversed(!0).paused(!1)},t.pause=function(e,t){return null!=e&&this.seek(e,t),this.paused(!0)},t.resume=function(){return this.paused(!1)},t.reversed=function(e){return arguments.length?(!!e!==this.reversed()&&this.timeScale(-this._rts||(e?-1e-8:0)),this):this._rts<0},t.invalidate=function(){return this._initted=this._act=0,this._zTime=-1e-8,this},t.isActive=function(){var e,t=this.parent||this._dp,n=this._start;return!(t&&!(this._ts&&this._initted&&t.isActive()&&(e=t.rawTime(!0))>=n&&e<this.endTime(!0)-vt))},t.eventCallback=function(e,t,n){var r=this.vars;return arguments.length>1?(t?(r[e]=t,n&&(r[e+"Params"]=n),"onUpdate"===e&&(this._onUpdate=t)):delete r[e],this):r[e]},t.then=function(e){var t=this;return new Promise((function(n){var r=Et(e)?e:vn,i=function(){var e=t.then;t.then=null,Et(r)&&(r=r(t))&&(r.then||r===t)&&(t.then=e),n(r),t.then=e};t._initted&&1===t.totalProgress()&&t._ts>=0||!t._tTime&&t._ts<0?i():t._prom=i}))},t.kill=function(){or(this)},e}();An(Lr.prototype,{_time:0,_start:0,_end:0,_tTime:0,_tDur:0,_dirty:0,_repeat:0,_yoyo:!1,parent:null,_initted:!1,_rDelay:0,_ts:1,_dp:0,ratio:0,_zTime:-1e-8,_prom:0,_ps:!1,_rts:1});var Nr=function(e){function t(t,n){var r;return void 0===t&&(t={}),(r=e.call(this,t)||this).labels={},r.smoothChildTiming=!!t.smoothChildTiming,r.autoRemoveChildren=!!t.autoRemoveChildren,r._sort=Pt(t.sortChildren),et&&Nn(t.parent||et,Qe(r),n),t.reversed&&r.reverse(),t.paused&&r.paused(!0),t.scrollTrigger&&In(Qe(r),t.scrollTrigger),r}Xe(t,e);var n=t.prototype;return n.to=function(e,t,n){return $n(0,arguments,this),this},n.from=function(e,t,n){return $n(1,arguments,this),this},n.fromTo=function(e,t,n,r){return $n(2,arguments,this),this},n.set=function(e,t,n){return t.duration=0,t.parent=this,_n(t).repeatDelay||(t.repeat=0),t.immediateRender=!!t.immediateRender,new Hr(e,t,Un(this,n),1),this},n.call=function(e,t,n){return Nn(this,Hr.delayedCall(0,e,t),n)},n.staggerTo=function(e,t,n,r,i,a,l){return n.duration=t,n.stagger=n.stagger||r,n.onComplete=a,n.onCompleteParams=l,n.parent=this,new Hr(e,n,Un(this,i)),this},n.staggerFrom=function(e,t,n,r,i,a,l){return n.runBackwards=1,_n(n).immediateRender=Pt(n.immediateRender),this.staggerTo(e,t,n,r,i,a,l)},n.staggerFromTo=function(e,t,n,r,i,a,l,s){return r.startAt=n,_n(r).immediateRender=Pt(r.immediateRender),this.staggerTo(e,t,r,i,a,l,s)},n.render=function(e,t,n){var r,i,a,l,s,o,u,c,d,p,f,h,m=this._time,g=this._dirty?this.totalDuration():this._tDur,v=this._dur,A=e<=0?0:dn(e),y=this._zTime<0!=e<0&&(this._initted||!v);if(this!==et&&A>g&&e>=0&&(A=g),A!==this._tTime||n||y){if(m!==this._time&&v&&(A+=this._time-m,e+=this._time-m),r=A,d=this._start,o=!(c=this._ts),y&&(v||(m=this._zTime),(e||!t)&&(this._zTime=e)),this._repeat){if(f=this._yoyo,s=v+this._rDelay,this._repeat<-1&&e<0)return this.totalTime(100*s+e,t,n);if(r=dn(A%s),A===g?(l=this._repeat,r=v):((l=~~(A/s))&&l===A/s&&(r=v,l--),r>v&&(r=v)),p=Bn(this._tTime,s),!m&&this._tTime&&p!==l&&this._tTime-p*s-this._dur<=0&&(p=l),f&&1&l&&(r=v-r,h=1),l!==p&&!this._lock){var b=f&&1&p,w=b===(f&&1&l);if(l<p&&(b=!b),m=b?0:A%v?v:A,this._lock=1,this.render(m||(h?0:dn(l*s)),t,!v)._lock=0,this._tTime=A,!t&&this.parent&&sr(this,"onRepeat"),this.vars.repeatRefresh&&!h&&(this.invalidate()._lock=1),m&&m!==this._time||o!==!this._ts||this.vars.onRepeat&&!this.parent&&!this._act)return this;if(v=this._dur,g=this._tDur,w&&(this._lock=2,m=b?v:-1e-4,this.render(m,!0),this.vars.repeatRefresh&&!h&&this.invalidate()),this._lock=0,!this._ts&&!o)return this;kr(this,h)}}if(this._hasPause&&!this._forcing&&this._lock<2&&(u=function(e,t,n){var r;if(n>t)for(r=e._first;r&&r._start<=n;){if("isPause"===r.data&&r._start>t)return r;r=r._next}else for(r=e._last;r&&r._start>=n;){if("isPause"===r.data&&r._start<t)return r;r=r._prev}}(this,dn(m),dn(r)),u&&(A-=r-(r=u._start))),this._tTime=A,this._time=r,this._act=!c,this._initted||(this._onUpdate=this.vars.onUpdate,this._initted=1,this._zTime=e,m=0),!m&&r&&!t&&!l&&(sr(this,"onStart"),this._tTime!==A))return this;if(r>=m&&e>=0)for(i=this._first;i;){if(a=i._next,(i._act||r>=i._start)&&i._ts&&u!==i){if(i.parent!==this)return this.render(e,t,n);if(i.render(i._ts>0?(r-i._start)*i._ts:(i._dirty?i.totalDuration():i._tDur)+(r-i._start)*i._ts,t,n),r!==this._time||!this._ts&&!o){u=0,a&&(A+=this._zTime=-1e-8);break}}i=a}else{i=this._last;for(var _=e<0?e:r;i;){if(a=i._prev,(i._act||_<=i._end)&&i._ts&&u!==i){if(i.parent!==this)return this.render(e,t,n);if(i.render(i._ts>0?(_-i._start)*i._ts:(i._dirty?i.totalDuration():i._tDur)+(_-i._start)*i._ts,t,n||Ze&&(i._initted||i._startAt)),r!==this._time||!this._ts&&!o){u=0,a&&(A+=this._zTime=_?-1e-8:vt);break}}i=a}}if(u&&!t&&(this.pause(),u.render(r>=m?0:-1e-8)._zTime=r>=m?1:-1,this._ts))return this._start=d,zn(this),this.render(e,t,n);this._onUpdate&&!t&&sr(this,"onUpdate",!0),(A===g&&this._tTime>=this.totalDuration()||!A&&m)&&(d!==this._start&&Math.abs(c)===Math.abs(this._ts)||this._lock||((e||!v)&&(A===g&&this._ts>0||!A&&this._ts<0)&&En(this,1),t||e<0&&!m||!A&&!m&&g||(sr(this,A===g&&e>=0?"onComplete":"onReverseComplete",!0),this._prom&&!(A<g&&this.timeScale()>0)&&this._prom())))}return this},n.add=function(e,t){var n=this;if(St(t)||(t=Un(this,t,e)),!(e instanceof Lr)){if(Ot(e))return e.forEach((function(e){return n.add(e,t)})),this;if(xt(e))return this.addLabel(e,t);if(!Et(e))return this;e=Hr.delayedCall(0,e)}return this!==e?Nn(this,e,t):this},n.getChildren=function(e,t,n,r){void 0===e&&(e=!0),void 0===t&&(t=!0),void 0===n&&(n=!0),void 0===r&&(r=-gt);for(var i=[],a=this._first;a;)a._start>=r&&(a instanceof Hr?t&&i.push(a):(n&&i.push(a),e&&i.push.apply(i,a.getChildren(!0,t,n)))),a=a._next;return i},n.getById=function(e){for(var t=this.getChildren(1,1,1),n=t.length;n--;)if(t[n].vars.id===e)return t[n]},n.remove=function(e){return xt(e)?this.removeLabel(e):Et(e)?this.killTweensOf(e):(xn(this,e),e===this._recent&&(this._recent=this._last),Sn(this))},n.totalTime=function(t,n){return arguments.length?(this._forcing=1,!this._dp&&this._ts&&(this._start=dn(br.time-(this._ts>0?t/this._ts:(this.totalDuration()-t)/-this._ts))),e.prototype.totalTime.call(this,t,n),this._forcing=0,this):this._tTime},n.addLabel=function(e,t){return this.labels[e]=Un(this,t),this},n.removeLabel=function(e){return delete this.labels[e],this},n.addPause=function(e,t,n){var r=Hr.delayedCall(0,t||Wt,n);return r.data="isPause",this._hasPause=1,Nn(this,r,Un(this,e))},n.removePause=function(e){var t=this._first;for(e=Un(this,e);t;)t._start===e&&"isPause"===t.data&&En(t),t=t._next},n.killTweensOf=function(e,t,n){for(var r=this.getTweensOf(e,n),i=r.length;i--;)Ir!==r[i]&&r[i].kill(e,t);return this},n.getTweensOf=function(e,t){for(var n,r=[],i=Xn(e),a=this._first,l=St(t);a;)a instanceof Hr?fn(a._targets,i)&&(l?(!Ir||a._initted&&a._ts)&&a.globalTime(0)<=t&&a.globalTime(a.totalDuration())>t:!t||a.isActive())&&r.push(a):(n=a.getTweensOf(i,t)).length&&r.push.apply(r,n),a=a._next;return r},n.tweenTo=function(e,t){t=t||{};var n,r=this,i=Un(r,e),a=t,l=a.startAt,s=a.onStart,o=a.onStartParams,u=a.immediateRender,c=Hr.to(r,An({ease:t.ease||"none",lazy:!1,immediateRender:!1,time:i,overwrite:"auto",duration:t.duration||Math.abs((i-(l&&"time"in l?l.time:r._time))/r.timeScale())||vt,onStart:function(){if(r.pause(),!n){var e=t.duration||Math.abs((i-(l&&"time"in l?l.time:r._time))/r.timeScale());c._dur!==e&&jn(c,e,0,1).render(c._time,!0,!0),n=1}s&&s.apply(c,o||[])}},t));return u?c.render(0):c},n.tweenFromTo=function(e,t,n){return this.tweenTo(t,An({startAt:{time:Un(this,e)}},n))},n.recent=function(){return this._recent},n.nextLabel=function(e){return void 0===e&&(e=this._time),lr(this,Un(this,e))},n.previousLabel=function(e){return void 0===e&&(e=this._time),lr(this,Un(this,e),1)},n.currentLabel=function(e){return arguments.length?this.seek(e,!0):this.previousLabel(this._time+vt)},n.shiftChildren=function(e,t,n){void 0===n&&(n=0);for(var r,i=this._first,a=this.labels;i;)i._start>=n&&(i._start+=e,i._end+=e),i=i._next;if(t)for(r in a)a[r]>=n&&(a[r]+=e);return Sn(this)},n.invalidate=function(t){var n=this._first;for(this._lock=0;n;)n.invalidate(t),n=n._next;return e.prototype.invalidate.call(this,t)},n.clear=function(e){void 0===e&&(e=!0);for(var t,n=this._first;n;)t=n._next,this.remove(n),n=t;return this._dp&&(this._time=this._tTime=this._pTime=0),e&&(this.labels={}),Sn(this)},n.totalDuration=function(e){var t,n,r,i=0,a=this,l=a._last,s=gt;if(arguments.length)return a.timeScale((a._repeat<0?a.duration():a.totalDuration())/(a.reversed()?-e:e));if(a._dirty){for(r=a.parent;l;)t=l._prev,l._dirty&&l.totalDuration(),(n=l._start)>s&&a._sort&&l._ts&&!a._lock?(a._lock=1,Nn(a,l,n-l._delay,1)._lock=0):s=n,n<0&&l._ts&&(i-=n,(!r&&!a._dp||r&&r.smoothChildTiming)&&(a._start+=n/a._ts,a._time-=n,a._tTime-=n),a.shiftChildren(-n,!1,-Infinity),s=0),l._end>i&&l._ts&&(i=l._end),l=t;jn(a,a===et&&a._time>i?a._time:i,1,1),a._dirty=0}return a._tDur},t.updateRoot=function(e){if(et._ts&&(mn(et,Mn(e,et)),at=br.frame),br.frame>=nn){nn+=ht.autoSleep||120;var t=et._first;if((!t||!t._ts)&&ht.autoSleep&&br._listeners.length<2){for(;t&&!t._ts;)t=t._next;t||br.sleep()}}},t}(Lr);An(Nr.prototype,{_lock:0,_hasPause:0,_forcing:0});var Ir,Dr,Fr=function(e,t,n,r,i,a,l){var s,o,u,c,d,p,f,h,m=new li(this._pt,e,t,0,1,ei,null,i),g=0,v=0;for(m.b=n,m.e=r,n+="",(f=~(r+="").indexOf("random("))&&(r=ir(r)),a&&(a(h=[n,r],e,t),n=h[0],r=h[1]),o=n.match(Dt)||[];s=Dt.exec(r);)c=s[0],d=r.substring(g,s.index),u?u=(u+1)%5:"rgba("===d.substr(-5)&&(u=1),c!==o[v++]&&(p=parseFloat(o[v-1])||0,m._pt={_next:m._pt,p:d||1===v?d:",",s:p,c:"="===c.charAt(1)?pn(p,c)-p:parseFloat(c)-p,m:u&&u<4?Math.round:0},g=Dt.lastIndex);return m.c=g<r.length?r.substring(g,r.length):"",m.fp=l,(Ft.test(r)||f)&&(m.e=0),this._pt=m,m},Rr=function(e,t,n,r,i,a,l,s,o,u){Et(r)&&(r=r(i||0,e,a));var c,d=e[t],p="get"!==n?n:Et(d)?o?e[t.indexOf("set")||!Et(e["get"+t.substr(3)])?t:"get"+t.substr(3)](o):e[t]():d,f=Et(d)?o?Qr:qr:Wr;if(xt(r)&&(~r.indexOf("random(")&&(r=ir(r)),"="===r.charAt(1)&&((c=pn(p,r)+(Wn(p)||0))||0===c)&&(r=c)),!u||p!==r||Dr)return isNaN(p*r)||""===r?(!d&&!(t in e)&&$t(t,r),Fr.call(this,e,t,p,r,f,s||ht.stringFilter,o)):(c=new li(this._pt,e,t,+p||0,r-(p||0),"boolean"==typeof d?Jr:Zr,0,f),o&&(c.fp=o),l&&c.modifier(l,this,e),this._pt=c)},jr=function(e,t,n,r,i,a){var l,s,o,u;if(en[e]&&!1!==(l=new en[e]).init(i,l.rawVars?t[e]:function(e,t,n,r,i){if(Et(e)&&(e=Ur(e,i,t,n,r)),!Tt(e)||e.style&&e.nodeType||Ot(e)||zt(e))return xt(e)?Ur(e,i,t,n,r):e;var a,l={};for(a in e)l[a]=Ur(e[a],i,t,n,r);return l}(t[e],r,i,a,n),n,r,a)&&(n._pt=s=new li(n._pt,i,e,0,1,l.render,l,0,l.priority),n!==lt))for(o=n._ptLookup[n._targets.indexOf(i)],u=l._props.length;u--;)o[l._props[u]]=s;return l},Gr=function e(t,n,r){var i,a,l,s,o,u,c,d,p,f,h,m,g,v=t.vars,A=v.ease,y=v.startAt,b=v.immediateRender,w=v.lazy,_=v.onUpdate,C=v.runBackwards,x=v.yoyoEase,E=v.keyframes,S=v.autoRevert,k=t._dur,T=t._startAt,P=t._targets,B=t.parent,M=B&&"nested"===B.data?B.vars.targets:P,z="auto"===t._overwrite&&!Ke,O=t.timeline;if(O&&(!E||!A)&&(A="none"),t._ease=Tr(A,mt.ease),t._yEase=x?Sr(Tr(!0===x?A:x,mt.ease)):0,x&&t._yoyo&&!t._repeat&&(x=t._yEase,t._yEase=t._ease,t._ease=x),t._from=!O&&!!v.runBackwards,!O||E&&!v.stagger){if(m=(d=P[0]?sn(P[0]).harness:0)&&v[d.prop],i=wn(v,Kt),T&&(T._zTime<0&&T.progress(1),n<0&&C&&b&&!S?T.render(-1,!0):T.revert(C&&k?Qt:qt),T._lazy=0),y){if(En(t._startAt=Hr.set(P,An({data:"isStart",overwrite:!1,parent:B,immediateRender:!0,lazy:!T&&Pt(w),startAt:null,delay:0,onUpdate:_&&function(){return sr(t,"onUpdate")},stagger:0},y))),t._startAt._dp=0,t._startAt._sat=t,n<0&&(Ze||!b&&!S)&&t._startAt.revert(Qt),b&&k&&n<=0&&r<=0)return void(n&&(t._zTime=n))}else if(C&&k&&!T)if(n&&(b=!1),l=An({overwrite:!1,data:"isFromStart",lazy:b&&!T&&Pt(w),immediateRender:b,stagger:0,parent:B},i),m&&(l[d.prop]=m),En(t._startAt=Hr.set(P,l)),t._startAt._dp=0,t._startAt._sat=t,n<0&&(Ze?t._startAt.revert(Qt):t._startAt.render(-1,!0)),t._zTime=n,b){if(!n)return}else e(t._startAt,vt,vt);for(t._pt=t._ptCache=0,w=k&&Pt(w)||w&&!k,a=0;a<P.length;a++){if(c=(o=P[a])._gsap||ln(P)[a]._gsap,t._ptLookup[a]=f={},Jt[c.id]&&Zt.length&&hn(),h=M===P?a:M.indexOf(o),d&&!1!==(p=new d).init(o,m||i,t,h,M)&&(t._pt=s=new li(t._pt,o,p.name,0,1,p.render,p,0,p.priority),p._props.forEach((function(e){f[e]=s})),p.priority&&(u=1)),!d||m)for(l in i)en[l]&&(p=jr(l,i,t,h,o,M))?p.priority&&(u=1):f[l]=s=Rr.call(t,o,l,"get",i[l],h,M,0,v.stringFilter);t._op&&t._op[a]&&t.kill(o,t._op[a]),z&&t._pt&&(Ir=t,et.killTweensOf(o,f,t.globalTime(n)),g=!t.parent,Ir=0),t._pt&&w&&(Jt[c.id]=1)}u&&ai(t),t._onInit&&t._onInit(t)}t._onUpdate=_,t._initted=(!t._op||t._pt)&&!g,E&&n<=0&&O.render(gt,!0,!0)},Yr=function(e,t,n,r){var i,a,l=t.ease||r||"power1.inOut";if(Ot(t))a=n[e]||(n[e]=[]),t.forEach((function(e,n){return a.push({t:n/(t.length-1)*100,v:e,e:l})}));else for(i in t)a=n[i]||(n[i]=[]),"ease"===i||a.push({t:parseFloat(e),v:t[i],e:l})},Ur=function(e,t,n,r,i){return Et(e)?e.call(t,n,r,i):xt(e)&&~e.indexOf("random(")?ir(e):e},$r=an+"repeat,repeatDelay,yoyo,repeatRefresh,yoyoEase,autoRevert",Vr={};un($r+",id,stagger,delay,duration,paused,scrollTrigger",(function(e){return Vr[e]=1}));var Hr=function(e){function t(t,n,r,i){var a;"number"==typeof n&&(r.duration=n,n=r,r=null);var l,s,o,u,c,d,p,f,h=(a=e.call(this,i?n:_n(n))||this).vars,m=h.duration,g=h.delay,v=h.immediateRender,A=h.stagger,y=h.overwrite,b=h.keyframes,w=h.defaults,_=h.scrollTrigger,C=h.yoyoEase,x=n.parent||et,E=(Ot(t)||zt(t)?St(t[0]):"length"in n)?[t]:Xn(t);if(a._targets=E.length?ln(E):Vt("GSAP target "+t+" not found. https://gsap.com",!ht.nullTargetWarn)||[],a._ptLookup=[],a._overwrite=y,b||A||Mt(m)||Mt(g)){if(n=a.vars,(l=a.timeline=new Nr({data:"nested",defaults:w||{},targets:x&&"nested"===x.data?x.vars.targets:E})).kill(),l.parent=l._dp=Qe(a),l._start=0,A||Mt(m)||Mt(g)){if(u=E.length,p=A&&Jn(A),Tt(A))for(c in A)~$r.indexOf(c)&&(f||(f={}),f[c]=A[c]);for(s=0;s<u;s++)(o=wn(n,Vr)).stagger=0,C&&(o.yoyoEase=C),f&&yn(o,f),d=E[s],o.duration=+Ur(m,Qe(a),s,d,E),o.delay=(+Ur(g,Qe(a),s,d,E)||0)-a._delay,!A&&1===u&&o.delay&&(a._delay=g=o.delay,a._start+=g,o.delay=0),l.to(d,o,p?p(s,d,E):0),l._ease=_r.none;l.duration()?m=g=0:a.timeline=0}else if(b){_n(An(l.vars.defaults,{ease:"none"})),l._ease=Tr(b.ease||n.ease||"none");var S,k,T,P=0;if(Ot(b))b.forEach((function(e){return l.to(E,e,">")})),l.duration();else{for(c in o={},b)"ease"===c||"easeEach"===c||Yr(c,b[c],o,b.easeEach);for(c in o)for(S=o[c].sort((function(e,t){return e.t-t.t})),P=0,s=0;s<S.length;s++)(T={ease:(k=S[s]).e,duration:(k.t-(s?S[s-1].t:0))/100*m})[c]=k.v,l.to(E,T,P),P+=T.duration;l.duration()<m&&l.to({},{duration:m-l.duration()})}}m||a.duration(m=l.duration())}else a.timeline=0;return!0!==y||Ke||(Ir=Qe(a),et.killTweensOf(E),Ir=0),Nn(x,Qe(a),r),n.reversed&&a.reverse(),n.paused&&a.paused(!0),(v||!m&&!b&&a._start===dn(x._time)&&Pt(v)&&Tn(Qe(a))&&"nested"!==x.data)&&(a._tTime=-1e-8,a.render(Math.max(0,-g)||0)),_&&In(Qe(a),_),a}Xe(t,e);var n=t.prototype;return n.render=function(e,t,n){var r,i,a,l,s,o,u,c,d,p=this._time,f=this._tDur,h=this._dur,m=e<0,g=e>f-vt&&!m?f:e<vt?0:e;if(h){if(g!==this._tTime||!e||n||!this._initted&&this._tTime||this._startAt&&this._zTime<0!==m){if(r=g,c=this.timeline,this._repeat){if(l=h+this._rDelay,this._repeat<-1&&m)return this.totalTime(100*l+e,t,n);if(r=dn(g%l),g===f?(a=this._repeat,r=h):((a=~~(g/l))&&a===dn(g/l)&&(r=h,a--),r>h&&(r=h)),(o=this._yoyo&&1&a)&&(d=this._yEase,r=h-r),s=Bn(this._tTime,l),r===p&&!n&&this._initted&&a===s)return this._tTime=g,this;a!==s&&(c&&this._yEase&&kr(c,o),this.vars.repeatRefresh&&!o&&!this._lock&&this._time!==l&&this._initted&&(this._lock=n=1,this.render(dn(l*a),!0).invalidate()._lock=0))}if(!this._initted){if(Dn(this,m?e:r,n,t,g))return this._tTime=0,this;if(!(p===this._time||n&&this.vars.repeatRefresh&&a!==s))return this;if(h!==this._dur)return this.render(e,t,n)}if(this._tTime=g,this._time=r,!this._act&&this._ts&&(this._act=1,this._lazy=0),this.ratio=u=(d||this._ease)(r/h),this._from&&(this.ratio=u=1-u),r&&!p&&!t&&!a&&(sr(this,"onStart"),this._tTime!==g))return this;for(i=this._pt;i;)i.r(u,i.d),i=i._next;c&&c.render(e<0?e:c._dur*c._ease(r/this._dur),t,n)||this._startAt&&(this._zTime=e),this._onUpdate&&!t&&(m&&kn(this,e,0,n),sr(this,"onUpdate")),this._repeat&&a!==s&&this.vars.onRepeat&&!t&&this.parent&&sr(this,"onRepeat"),g!==this._tDur&&g||this._tTime!==g||(m&&!this._onUpdate&&kn(this,e,0,!0),(e||!h)&&(g===this._tDur&&this._ts>0||!g&&this._ts<0)&&En(this,1),t||m&&!p||!(g||p||o)||(sr(this,g===f?"onComplete":"onReverseComplete",!0),this._prom&&!(g<f&&this.timeScale()>0)&&this._prom()))}}else!function(e,t,n,r){var i,a,l,s=e.ratio,o=t<0||!t&&(!e._start&&Fn(e)&&(e._initted||!Rn(e))||(e._ts<0||e._dp._ts<0)&&!Rn(e))?0:1,u=e._rDelay,c=0;if(u&&e._repeat&&(c=Hn(0,e._tDur,t),a=Bn(c,u),e._yoyo&&1&a&&(o=1-o),a!==Bn(e._tTime,u)&&(s=1-o,e.vars.repeatRefresh&&e._initted&&e.invalidate())),o!==s||Ze||r||e._zTime===vt||!t&&e._zTime){if(!e._initted&&Dn(e,t,r,n,c))return;for(l=e._zTime,e._zTime=t||(n?vt:0),n||(n=t&&!l),e.ratio=o,e._from&&(o=1-o),e._time=0,e._tTime=c,i=e._pt;i;)i.r(o,i.d),i=i._next;t<0&&kn(e,t,0,!0),e._onUpdate&&!n&&sr(e,"onUpdate"),c&&e._repeat&&!n&&e.parent&&sr(e,"onRepeat"),(t>=e._tDur||t<0)&&e.ratio===o&&(o&&En(e,1),n||Ze||(sr(e,o?"onComplete":"onReverseComplete",!0),e._prom&&e._prom()))}else e._zTime||(e._zTime=t)}(this,e,t,n);return this},n.targets=function(){return this._targets},n.invalidate=function(t){return(!t||!this.vars.runBackwards)&&(this._startAt=0),this._pt=this._op=this._onUpdate=this._lazy=this.ratio=0,this._ptLookup=[],this.timeline&&this.timeline.invalidate(t),e.prototype.invalidate.call(this,t)},n.resetTo=function(e,t,n,r,i){st||br.wake(),this._ts||this.play();var a=Math.min(this._dur,(this._dp._time-this._start)*this._ts);return this._initted||Gr(this,a),function(e,t,n,r,i,a,l,s){var o,u,c,d,p=(e._pt&&e._ptCache||(e._ptCache={}))[t];if(!p)for(p=e._ptCache[t]=[],c=e._ptLookup,d=e._targets.length;d--;){if((o=c[d][t])&&o.d&&o.d._pt)for(o=o.d._pt;o&&o.p!==t&&o.fp!==t;)o=o._next;if(!o)return Dr=1,e.vars[t]="+=0",Gr(e,l),Dr=0,s?Vt(t+" not eligible for reset"):1;p.push(o)}for(d=p.length;d--;)(o=(u=p[d])._pt||u).s=!r&&0!==r||i?o.s+(r||0)+a*o.c:r,o.c=n-o.s,u.e&&(u.e=cn(n)+Wn(u.e)),u.b&&(u.b=o.s+Wn(u.b))}(this,e,t,n,r,this._ease(a/this._dur),a,i)?this.resetTo(e,t,n,r,1):(On(this,0),this.parent||Cn(this._dp,this,"_first","_last",this._dp._sort?"_start":0),this.render(0))},n.kill=function(e,t){if(void 0===t&&(t="all"),!(e||t&&"all"!==t))return this._lazy=this._pt=0,this.parent?or(this):this;if(this.timeline){var n=this.timeline.totalDuration();return this.timeline.killTweensOf(e,t,Ir&&!0!==Ir.vars.overwrite)._first||or(this),this.parent&&n!==this.timeline.totalDuration()&&jn(this,this._dur*this.timeline._tDur/n,0,1),this}var r,i,a,l,s,o,u,c=this._targets,d=e?Xn(e):c,p=this._ptLookup,f=this._pt;if((!t||"all"===t)&&function(e,t){for(var n=e.length,r=n===t.length;r&&n--&&e[n]===t[n];);return n<0}(c,d))return"all"===t&&(this._pt=0),or(this);for(r=this._op=this._op||[],"all"!==t&&(xt(t)&&(s={},un(t,(function(e){return s[e]=1})),t=s),t=function(e,t){var n,r,i,a,l=e[0]?sn(e[0]).harness:0,s=l&&l.aliases;if(!s)return t;for(r in n=yn({},t),s)if(r in n)for(i=(a=s[r].split(",")).length;i--;)n[a[i]]=n[r];return n}(c,t)),u=c.length;u--;)if(~d.indexOf(c[u]))for(s in i=p[u],"all"===t?(r[u]=t,l=i,a={}):(a=r[u]=r[u]||{},l=t),l)(o=i&&i[s])&&("kill"in o.d&&!0!==o.d.kill(s)||xn(this,o,"_pt"),delete i[s]),"all"!==a&&(a[s]=1);return this._initted&&!this._pt&&f&&or(this),this},t.to=function(e,n){return new t(e,n,arguments[2])},t.from=function(e,t){return $n(1,arguments)},t.delayedCall=function(e,n,r,i){return new t(n,0,{immediateRender:!1,lazy:!1,overwrite:!1,delay:e,onComplete:n,onReverseComplete:n,onCompleteParams:r,onReverseCompleteParams:r,callbackScope:i})},t.fromTo=function(e,t,n){return $n(2,arguments)},t.set=function(e,n){return n.duration=0,n.repeatDelay||(n.repeat=0),new t(e,n)},t.killTweensOf=function(e,t,n){return et.killTweensOf(e,t,n)},t}(Lr);An(Hr.prototype,{_targets:[],_lazy:0,_startAt:0,_op:0,_onInit:0}),un("staggerTo,staggerFrom,staggerFromTo",(function(e){Hr[e]=function(){var t=new Nr,n=qn.call(arguments,0);return n.splice("staggerFromTo"===e?5:4,0,0),t[e].apply(t,n)}}));var Wr=function(e,t,n){return e[t]=n},qr=function(e,t,n){return e[t](n)},Qr=function(e,t,n,r){return e[t](r.fp,n)},Xr=function(e,t,n){return e.setAttribute(t,n)},Kr=function(e,t){return Et(e[t])?qr:kt(e[t])&&e.setAttribute?Xr:Wr},Zr=function(e,t){return t.set(t.t,t.p,Math.round(1e6*(t.s+t.c*e))/1e6,t)},Jr=function(e,t){return t.set(t.t,t.p,!!(t.s+t.c*e),t)},ei=function(e,t){var n=t._pt,r="";if(!e&&t.b)r=t.b;else if(1===e&&t.e)r=t.e;else{for(;n;)r=n.p+(n.m?n.m(n.s+n.c*e):Math.round(1e4*(n.s+n.c*e))/1e4)+r,n=n._next;r+=t.c}t.set(t.t,t.p,r,t)},ti=function(e,t){for(var n=t._pt;n;)n.r(e,n.d),n=n._next},ni=function(e,t,n,r){for(var i,a=this._pt;a;)i=a._next,a.p===r&&a.modifier(e,t,n),a=i},ri=function(e){for(var t,n,r=this._pt;r;)n=r._next,r.p===e&&!r.op||r.op===e?xn(this,r,"_pt"):r.dep||(t=1),r=n;return!t},ii=function(e,t,n,r){r.mSet(e,t,r.m.call(r.tween,n,r.mt),r)},ai=function(e){for(var t,n,r,i,a=e._pt;a;){for(t=a._next,n=r;n&&n.pr>a.pr;)n=n._next;(a._prev=n?n._prev:i)?a._prev._next=a:r=a,(a._next=n)?n._prev=a:i=a,a=t}e._pt=r},li=function(){function e(e,t,n,r,i,a,l,s,o){this.t=t,this.s=r,this.c=i,this.p=n,this.r=a||Zr,this.d=l||this,this.set=s||Wr,this.pr=o||0,this._next=e,e&&(e._prev=this)}return e.prototype.modifier=function(e,t,n){this.mSet=this.mSet||this.set,this.set=ii,this.m=e,this.mt=n,this.tween=t},e}();un(an+"parent,duration,ease,delay,overwrite,runBackwards,startAt,yoyo,immediateRender,repeat,repeatDelay,data,paused,reversed,lazy,callbackScope,stringFilter,id,yoyoEase,stagger,inherit,repeatRefresh,keyframes,autoRevert,scrollTrigger",(function(e){return Kt[e]=1})),Gt.TweenMax=Gt.TweenLite=Hr,Gt.TimelineLite=Gt.TimelineMax=Nr,et=new Nr({sortChildren:!1,defaults:mt,autoRemoveChildren:!0,id:"root",smoothChildTiming:!0}),ht.stringFilter=yr;var si=[],oi={},ui=[],ci=0,di=0,pi=function(e){return(oi[e]||ui).map((function(e){return e()}))},fi=function(){var e=Date.now(),t=[];e-ci>2&&(pi("matchMediaInit"),si.forEach((function(e){var n,r,i,a,l=e.queries,s=e.conditions;for(r in l)(n=tt.matchMedia(l[r]).matches)&&(i=1),n!==s[r]&&(s[r]=n,a=1);a&&(e.revert(),i&&t.push(e))})),pi("matchMediaRevert"),t.forEach((function(e){return e.onMatch(e,(function(t){return e.add(null,t)}))})),ci=e,pi("matchMedia"))},hi=function(){function e(e,t){this.selector=t&&Kn(t),this.data=[],this._r=[],this.isReverted=!1,this.id=di++,e&&this.add(e)}var t=e.prototype;return t.add=function(e,t,n){Et(e)&&(n=t,t=e,e=Et);var r=this,i=function(){var e,i=Je,a=r.selector;return i&&i!==r&&i.data.push(r),n&&(r.selector=Kn(n)),Je=r,e=t.apply(r,arguments),Et(e)&&r._r.push(e),Je=i,r.selector=a,r.isReverted=!1,e};return r.last=i,e===Et?i(r,(function(e){return r.add(null,e)})):e?r[e]=i:i},t.ignore=function(e){var t=Je;Je=null,e(this),Je=t},t.getTweens=function(){var t=[];return this.data.forEach((function(n){return n instanceof e?t.push.apply(t,n.getTweens()):n instanceof Hr&&!(n.parent&&"nested"===n.parent.data)&&t.push(n)})),t},t.clear=function(){this._r.length=this.data.length=0},t.kill=function(e,t){var n=this;if(e?function(){for(var t,r=n.getTweens(),i=n.data.length;i--;)"isFlip"===(t=n.data[i]).data&&(t.revert(),t.getChildren(!0,!0,!1).forEach((function(e){return r.splice(r.indexOf(e),1)})));for(r.map((function(e){return{g:e._dur||e._delay||e._sat&&!e._sat.vars.immediateRender?e.globalTime(0):-1/0,t:e}})).sort((function(e,t){return t.g-e.g||-1/0})).forEach((function(t){return t.t.revert(e)})),i=n.data.length;i--;)(t=n.data[i])instanceof Nr?"nested"!==t.data&&(t.scrollTrigger&&t.scrollTrigger.revert(),t.kill()):!(t instanceof Hr)&&t.revert&&t.revert(e);n._r.forEach((function(t){return t(e,n)})),n.isReverted=!0}():this.data.forEach((function(e){return e.kill&&e.kill()})),this.clear(),t)for(var r=si.length;r--;)si[r].id===this.id&&si.splice(r,1)},t.revert=function(e){this.kill(e||{})},e}(),mi=function(){function e(e){this.contexts=[],this.scope=e,Je&&Je.data.push(this)}var t=e.prototype;return t.add=function(e,t,n){Tt(e)||(e={matches:e});var r,i,a,l=new hi(0,n||this.scope),s=l.conditions={};for(i in Je&&!l.selector&&(l.selector=Je.selector),this.contexts.push(l),t=l.add("onMatch",t),l.queries=e,e)"all"===i?a=1:(r=tt.matchMedia(e[i]))&&(si.indexOf(l)<0&&si.push(l),(s[i]=r.matches)&&(a=1),r.addListener?r.addListener(fi):r.addEventListener("change",fi));return a&&t(l,(function(e){return l.add(null,e)})),this},t.revert=function(e){this.kill(e||{})},t.kill=function(e){this.contexts.forEach((function(t){return t.kill(e,!0)}))},e}(),gi={registerPlugin:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];t.forEach((function(e){return cr(e)}))},timeline:function(e){return new Nr(e)},getTweensOf:function(e,t){return et.getTweensOf(e,t)},getProperty:function(e,t,n,r){xt(e)&&(e=Xn(e)[0]);var i=sn(e||{}).get,a=n?vn:gn;return"native"===n&&(n=""),e?t?a((en[t]&&en[t].get||i)(e,t,n,r)):function(t,n,r){return a((en[t]&&en[t].get||i)(e,t,n,r))}:e},quickSetter:function(e,t,n){if((e=Xn(e)).length>1){var r=e.map((function(e){return yi.quickSetter(e,t,n)})),i=r.length;return function(e){for(var t=i;t--;)r[t](e)}}e=e[0]||{};var a=en[t],l=sn(e),s=l.harness&&(l.harness.aliases||{})[t]||t,o=a?function(t){var r=new a;lt._pt=0,r.init(e,n?t+n:t,lt,0,[e]),r.render(1,r),lt._pt&&ti(1,lt)}:l.set(e,s);return a?o:function(t){return o(e,s,n?t+n:t,l,1)}},quickTo:function(e,t,n){var r,i=yi.to(e,yn(((r={})[t]="+=0.1",r.paused=!0,r),n||{})),a=function(e,n,r){return i.resetTo(t,e,n,r)};return a.tween=i,a},isTweening:function(e){return et.getTweensOf(e,!0).length>0},defaults:function(e){return e&&e.ease&&(e.ease=Tr(e.ease,mt.ease)),bn(mt,e||{})},config:function(e){return bn(ht,e||{})},registerEffect:function(e){var t=e.name,n=e.effect,r=e.plugins,i=e.defaults,a=e.extendTimeline;(r||"").split(",").forEach((function(e){return e&&!en[e]&&!Gt[e]&&Vt(t+" effect requires "+e+" plugin.")})),tn[t]=function(e,t,r){return n(Xn(e),An(t||{},i),r)},a&&(Nr.prototype[t]=function(e,n,r){return this.add(tn[t](e,Tt(n)?n:(r=n)&&{},this),r)})},registerEase:function(e,t){_r[e]=Tr(t)},parseEase:function(e,t){return arguments.length?Tr(e,t):_r},getById:function(e){return et.getById(e)},exportRoot:function(e,t){void 0===e&&(e={});var n,r,i=new Nr(e);for(i.smoothChildTiming=Pt(e.smoothChildTiming),et.remove(i),i._dp=0,i._time=i._tTime=et._time,n=et._first;n;)r=n._next,!t&&!n._dur&&n instanceof Hr&&n.vars.onComplete===n._targets[0]||Nn(i,n,n._start-n._delay),n=r;return Nn(et,i,0),i},context:function(e,t){return e?new hi(e,t):Je},matchMedia:function(e){return new mi(e)},matchMediaRefresh:function(){return si.forEach((function(e){var t,n,r=e.conditions;for(n in r)r[n]&&(r[n]=!1,t=1);t&&e.revert()}))||fi()},addEventListener:function(e,t){var n=oi[e]||(oi[e]=[]);~n.indexOf(t)||n.push(t)},removeEventListener:function(e,t){var n=oi[e],r=n&&n.indexOf(t);r>=0&&n.splice(r,1)},utils:{wrap:function e(t,n,r){var i=n-t;return Ot(t)?rr(t,e(0,t.length),n):Vn(r,(function(e){return(i+(e-t)%i)%i+t}))},wrapYoyo:function e(t,n,r){var i=n-t,a=2*i;return Ot(t)?rr(t,e(0,t.length-1),n):Vn(r,(function(e){return t+((e=(a+(e-t)%a)%a||0)>i?a-e:e)}))},distribute:Jn,random:nr,snap:tr,normalize:function(e,t,n){return ar(e,t,0,1,n)},getUnit:Wn,clamp:function(e,t,n){return Vn(n,(function(n){return Hn(e,t,n)}))},splitColor:hr,toArray:Xn,selector:Kn,mapRange:ar,pipe:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){return t.reduce((function(e,t){return t(e)}),e)}},unitize:function(e,t){return function(n){return e(parseFloat(n))+(t||Wn(n))}},interpolate:function e(t,n,r,i){var a=isNaN(t+n)?0:function(e){return(1-e)*t+e*n};if(!a){var l,s,o,u,c,d=xt(t),p={};if(!0===r&&(i=1)&&(r=null),d)t={p:t},n={p:n};else if(Ot(t)&&!Ot(n)){for(o=[],u=t.length,c=u-2,s=1;s<u;s++)o.push(e(t[s-1],t[s]));u--,a=function(e){e*=u;var t=Math.min(c,~~e);return o[t](e-t)},r=n}else i||(t=yn(Ot(t)?[]:{},t));if(!o){for(l in n)Rr.call(p,t,l,"get",n[l]);a=function(e){return ti(e,p)||(d?t.p:t)}}}return Vn(r,a)},shuffle:Zn},install:Ut,effects:tn,ticker:br,updateRoot:Nr.updateRoot,plugins:en,globalTimeline:et,core:{PropTween:li,globals:Ht,Tween:Hr,Timeline:Nr,Animation:Lr,getCache:sn,_removeLinkedListItem:xn,reverting:function(){return Ze},context:function(e){return e&&Je&&(Je.data.push(e),e._ctx=Je),Je},suppressOverwrites:function(e){return Ke=e}}};un("to,from,fromTo,delayedCall,set,killTweensOf",(function(e){return gi[e]=Hr[e]})),br.add(Nr.updateRoot),lt=gi.to({},{duration:0});var vi=function(e,t){for(var n=e._pt;n&&n.p!==t&&n.op!==t&&n.fp!==t;)n=n._next;return n},Ai=function(e,t){return{name:e,rawVars:1,init:function(e,n,r){r._onInit=function(e){var r,i;if(xt(n)&&(r={},un(n,(function(e){return r[e]=1})),n=r),t){for(i in r={},n)r[i]=t(n[i]);n=r}!function(e,t){var n,r,i,a=e._targets;for(n in t)for(r=a.length;r--;)(i=e._ptLookup[r][n])&&(i=i.d)&&(i._pt&&(i=vi(i,n)),i&&i.modifier&&i.modifier(t[n],e,a[r],n))}(e,n)}}}},yi=gi.registerPlugin({name:"attr",init:function(e,t,n,r,i){var a,l,s;for(a in this.tween=n,t)s=e.getAttribute(a)||"",(l=this.add(e,"setAttribute",(s||0)+"",t[a],r,i,0,0,a)).op=a,l.b=s,this._props.push(a)},render:function(e,t){for(var n=t._pt;n;)Ze?n.set(n.t,n.p,n.b,n):n.r(e,n.d),n=n._next}},{name:"endArray",init:function(e,t){for(var n=t.length;n--;)this.add(e,n,e[n]||0,t[n],0,0,0,0,0,1)}},Ai("roundProps",er),Ai("modifiers"),Ai("snap",tr))||gi;Hr.version=Nr.version=yi.version="3.12.5",it=1,Bt()&&wr(),_r.Power0,_r.Power1,_r.Power2,_r.Power3,_r.Power4,_r.Linear,_r.Quad,_r.Cubic,_r.Quart,_r.Quint,_r.Strong,_r.Elastic,_r.Back,_r.SteppedEase,_r.Bounce,_r.Sine,_r.Expo,_r.Circ;var bi,wi,_i,Ci,xi,Ei,Si,ki,Ti={},Pi=180/Math.PI,Bi=Math.PI/180,Mi=Math.atan2,zi=/([A-Z])/g,Oi=/(left|right|width|margin|padding|x)/i,Li=/[\s,\(]\S/,Ni={autoAlpha:"opacity,visibility",scale:"scaleX,scaleY",alpha:"opacity"},Ii=function(e,t){return t.set(t.t,t.p,Math.round(1e4*(t.s+t.c*e))/1e4+t.u,t)},Di=function(e,t){return t.set(t.t,t.p,1===e?t.e:Math.round(1e4*(t.s+t.c*e))/1e4+t.u,t)},Fi=function(e,t){return t.set(t.t,t.p,e?Math.round(1e4*(t.s+t.c*e))/1e4+t.u:t.b,t)},Ri=function(e,t){var n=t.s+t.c*e;t.set(t.t,t.p,~~(n+(n<0?-.5:.5))+t.u,t)},ji=function(e,t){return t.set(t.t,t.p,e?t.e:t.b,t)},Gi=function(e,t){return t.set(t.t,t.p,1!==e?t.b:t.e,t)},Yi=function(e,t,n){return e.style[t]=n},Ui=function(e,t,n){return e.style.setProperty(t,n)},$i=function(e,t,n){return e._gsap[t]=n},Vi=function(e,t,n){return e._gsap.scaleX=e._gsap.scaleY=n},Hi=function(e,t,n,r,i){var a=e._gsap;a.scaleX=a.scaleY=n,a.renderTransform(i,a)},Wi=function(e,t,n,r,i){var a=e._gsap;a[t]=n,a.renderTransform(i,a)},qi="transform",Qi=qi+"Origin",Xi=function e(t,n){var r=this,i=this.target,a=i.style,l=i._gsap;if(t in Ti&&a){if(this.tfm=this.tfm||{},"transform"===t)return Ni.transform.split(",").forEach((function(t){return e.call(r,t,n)}));if(~(t=Ni[t]||t).indexOf(",")?t.split(",").forEach((function(e){return r.tfm[e]=ha(i,e)})):this.tfm[t]=l.x?l[t]:ha(i,t),t===Qi&&(this.tfm.zOrigin=l.zOrigin),this.props.indexOf(qi)>=0)return;l.svg&&(this.svgo=i.getAttribute("data-svg-origin"),this.props.push(Qi,n,"")),t=qi}(a||n)&&this.props.push(t,n,a[t])},Ki=function(e){e.translate&&(e.removeProperty("translate"),e.removeProperty("scale"),e.removeProperty("rotate"))},Zi=function(){var e,t,n=this.props,r=this.target,i=r.style,a=r._gsap;for(e=0;e<n.length;e+=3)n[e+1]?r[n[e]]=n[e+2]:n[e+2]?i[n[e]]=n[e+2]:i.removeProperty("--"===n[e].substr(0,2)?n[e]:n[e].replace(zi,"-$1").toLowerCase());if(this.tfm){for(t in this.tfm)a[t]=this.tfm[t];a.svg&&(a.renderTransform(),r.setAttribute("data-svg-origin",this.svgo||"")),(e=Si())&&e.isStart||i[qi]||(Ki(i),a.zOrigin&&i[Qi]&&(i[Qi]+=" "+a.zOrigin+"px",a.zOrigin=0,a.renderTransform()),a.uncache=1)}},Ji=function(e,t){var n={target:e,props:[],revert:Zi,save:Xi};return e._gsap||yi.core.getCache(e),t&&t.split(",").forEach((function(e){return n.save(e)})),n},ea=function(e,t){var n=wi.createElementNS?wi.createElementNS((t||"http://www.w3.org/1999/xhtml").replace(/^https/,"http"),e):wi.createElement(e);return n&&n.style?n:wi.createElement(e)},ta=function e(t,n,r){var i=getComputedStyle(t);return i[n]||i.getPropertyValue(n.replace(zi,"-$1").toLowerCase())||i.getPropertyValue(n)||!r&&e(t,ra(n)||n,1)||""},na="O,Moz,ms,Ms,Webkit".split(","),ra=function(e,t,n){var r=(t||xi).style,i=5;if(e in r&&!n)return e;for(e=e.charAt(0).toUpperCase()+e.substr(1);i--&&!(na[i]+e in r););return i<0?null:(3===i?"ms":i>=0?na[i]:"")+e},ia=function(){"undefined"!=typeof window&&window.document&&(bi=window,wi=bi.document,_i=wi.documentElement,xi=ea("div")||{style:{}},ea("div"),qi=ra(qi),Qi=qi+"Origin",xi.style.cssText="border-width:0;line-height:0;position:absolute;padding:0",ki=!!ra("perspective"),Si=yi.core.reverting,Ci=1)},aa=function e(t){var n,r=ea("svg",this.ownerSVGElement&&this.ownerSVGElement.getAttribute("xmlns")||"http://www.w3.org/2000/svg"),i=this.parentNode,a=this.nextSibling,l=this.style.cssText;if(_i.appendChild(r),r.appendChild(this),this.style.display="block",t)try{n=this.getBBox(),this._gsapBBox=this.getBBox,this.getBBox=e}catch(e){}else this._gsapBBox&&(n=this._gsapBBox());return i&&(a?i.insertBefore(this,a):i.appendChild(this)),_i.removeChild(r),this.style.cssText=l,n},la=function(e,t){for(var n=t.length;n--;)if(e.hasAttribute(t[n]))return e.getAttribute(t[n])},sa=function(e){var t;try{t=e.getBBox()}catch(n){t=aa.call(e,!0)}return t&&(t.width||t.height)||e.getBBox===aa||(t=aa.call(e,!0)),!t||t.width||t.x||t.y?t:{x:+la(e,["x","cx","x1"])||0,y:+la(e,["y","cy","y1"])||0,width:0,height:0}},oa=function(e){return!(!e.getCTM||e.parentNode&&!e.ownerSVGElement||!sa(e))},ua=function(e,t){if(t){var n,r=e.style;t in Ti&&t!==Qi&&(t=qi),r.removeProperty?("ms"!==(n=t.substr(0,2))&&"webkit"!==t.substr(0,6)||(t="-"+t),r.removeProperty("--"===n?t:t.replace(zi,"-$1").toLowerCase())):r.removeAttribute(t)}},ca=function(e,t,n,r,i,a){var l=new li(e._pt,t,n,0,1,a?Gi:ji);return e._pt=l,l.b=r,l.e=i,e._props.push(n),l},da={deg:1,rad:1,turn:1},pa={grid:1,flex:1},fa=function e(t,n,r,i){var a,l,s,o,u=parseFloat(r)||0,c=(r+"").trim().substr((u+"").length)||"px",d=xi.style,p=Oi.test(n),f="svg"===t.tagName.toLowerCase(),h=(f?"client":"offset")+(p?"Width":"Height"),m=100,g="px"===i,v="%"===i;if(i===c||!u||da[i]||da[c])return u;if("px"!==c&&!g&&(u=e(t,n,r,"px")),o=t.getCTM&&oa(t),(v||"%"===c)&&(Ti[n]||~n.indexOf("adius")))return a=o?t.getBBox()[p?"width":"height"]:t[h],cn(v?u/a*m:u/100*a);if(d[p?"width":"height"]=m+(g?c:i),l=~n.indexOf("adius")||"em"===i&&t.appendChild&&!f?t:t.parentNode,o&&(l=(t.ownerSVGElement||{}).parentNode),l&&l!==wi&&l.appendChild||(l=wi.body),(s=l._gsap)&&v&&s.width&&p&&s.time===br.time&&!s.uncache)return cn(u/s.width*m);if(!v||"height"!==n&&"width"!==n)(v||"%"===c)&&!pa[ta(l,"display")]&&(d.position=ta(t,"position")),l===t&&(d.position="static"),l.appendChild(xi),a=xi[h],l.removeChild(xi),d.position="absolute";else{var A=t.style[n];t.style[n]=m+i,a=t[h],A?t.style[n]=A:ua(t,n)}return p&&v&&((s=sn(l)).time=br.time,s.width=l[h]),cn(g?a*u/m:a&&u?m/a*u:0)},ha=function(e,t,n,r){var i;return Ci||ia(),t in Ni&&"transform"!==t&&~(t=Ni[t]).indexOf(",")&&(t=t.split(",")[0]),Ti[t]&&"transform"!==t?(i=Ea(e,r),i="transformOrigin"!==t?i[t]:i.svg?i.origin:Sa(ta(e,Qi))+" "+i.zOrigin+"px"):(!(i=e.style[t])||"auto"===i||r||~(i+"").indexOf("calc("))&&(i=Aa[t]&&Aa[t](e,t,n)||ta(e,t)||on(e,t)||("opacity"===t?1:0)),n&&!~(i+"").trim().indexOf(" ")?fa(e,t,i,n)+n:i},ma=function(e,t,n,r){if(!n||"none"===n){var i=ra(t,e,1),a=i&&ta(e,i,1);a&&a!==n?(t=i,n=a):"borderColor"===t&&(n=ta(e,"borderTopColor"))}var l,s,o,u,c,d,p,f,h,m,g,v=new li(this._pt,e.style,t,0,1,ei),A=0,y=0;if(v.b=n,v.e=r,n+="","auto"==(r+="")&&(d=e.style[t],e.style[t]=r,r=ta(e,t)||r,d?e.style[t]=d:ua(e,t)),yr(l=[n,r]),r=l[1],o=(n=l[0]).match(It)||[],(r.match(It)||[]).length){for(;s=It.exec(r);)p=s[0],h=r.substring(A,s.index),c?c=(c+1)%5:"rgba("!==h.substr(-5)&&"hsla("!==h.substr(-5)||(c=1),p!==(d=o[y++]||"")&&(u=parseFloat(d)||0,g=d.substr((u+"").length),"="===p.charAt(1)&&(p=pn(u,p)+g),f=parseFloat(p),m=p.substr((f+"").length),A=It.lastIndex-m.length,m||(m=m||ht.units[t]||g,A===r.length&&(r+=m,v.e+=m)),g!==m&&(u=fa(e,t,d,m)||0),v._pt={_next:v._pt,p:h||1===y?h:",",s:u,c:f-u,m:c&&c<4||"zIndex"===t?Math.round:0});v.c=A<r.length?r.substring(A,r.length):""}else v.r="display"===t&&"none"===r?Gi:ji;return Ft.test(r)&&(v.e=0),this._pt=v,v},ga={top:"0%",bottom:"100%",left:"0%",right:"100%",center:"50%"},va=function(e,t){if(t.tween&&t.tween._time===t.tween._dur){var n,r,i,a=t.t,l=a.style,s=t.u,o=a._gsap;if("all"===s||!0===s)l.cssText="",r=1;else for(i=(s=s.split(",")).length;--i>-1;)n=s[i],Ti[n]&&(r=1,n="transformOrigin"===n?Qi:qi),ua(a,n);r&&(ua(a,qi),o&&(o.svg&&a.removeAttribute("transform"),Ea(a,1),o.uncache=1,Ki(l)))}},Aa={clearProps:function(e,t,n,r,i){if("isFromStart"!==i.data){var a=e._pt=new li(e._pt,t,n,0,0,va);return a.u=r,a.pr=-10,a.tween=i,e._props.push(n),1}}},ya=[1,0,0,1,0,0],ba={},wa=function(e){return"matrix(1, 0, 0, 1, 0, 0)"===e||"none"===e||!e},_a=function(e){var t=ta(e,qi);return wa(t)?ya:t.substr(7).match(Nt).map(cn)},Ca=function(e,t){var n,r,i,a,l=e._gsap||sn(e),s=e.style,o=_a(e);return l.svg&&e.getAttribute("transform")?"1,0,0,1,0,0"===(o=[(i=e.transform.baseVal.consolidate().matrix).a,i.b,i.c,i.d,i.e,i.f]).join(",")?ya:o:(o!==ya||e.offsetParent||e===_i||l.svg||(i=s.display,s.display="block",(n=e.parentNode)&&e.offsetParent||(a=1,r=e.nextElementSibling,_i.appendChild(e)),o=_a(e),i?s.display=i:ua(e,"display"),a&&(r?n.insertBefore(e,r):n?n.appendChild(e):_i.removeChild(e))),t&&o.length>6?[o[0],o[1],o[4],o[5],o[12],o[13]]:o)},xa=function(e,t,n,r,i,a){var l,s,o,u=e._gsap,c=i||Ca(e,!0),d=u.xOrigin||0,p=u.yOrigin||0,f=u.xOffset||0,h=u.yOffset||0,m=c[0],g=c[1],v=c[2],A=c[3],y=c[4],b=c[5],w=t.split(" "),_=parseFloat(w[0])||0,C=parseFloat(w[1])||0;n?c!==ya&&(s=m*A-g*v)&&(o=_*(-g/s)+C*(m/s)-(m*b-g*y)/s,_=_*(A/s)+C*(-v/s)+(v*b-A*y)/s,C=o):(_=(l=sa(e)).x+(~w[0].indexOf("%")?_/100*l.width:_),C=l.y+(~(w[1]||w[0]).indexOf("%")?C/100*l.height:C)),r||!1!==r&&u.smooth?(y=_-d,b=C-p,u.xOffset=f+(y*m+b*v)-y,u.yOffset=h+(y*g+b*A)-b):u.xOffset=u.yOffset=0,u.xOrigin=_,u.yOrigin=C,u.smooth=!!r,u.origin=t,u.originIsAbsolute=!!n,e.style[Qi]="0px 0px",a&&(ca(a,u,"xOrigin",d,_),ca(a,u,"yOrigin",p,C),ca(a,u,"xOffset",f,u.xOffset),ca(a,u,"yOffset",h,u.yOffset)),e.setAttribute("data-svg-origin",_+" "+C)},Ea=function(e,t){var n=e._gsap||new Or(e);if("x"in n&&!t&&!n.uncache)return n;var r,i,a,l,s,o,u,c,d,p,f,h,m,g,v,A,y,b,w,_,C,x,E,S,k,T,P,B,M,z,O,L,N=e.style,I=n.scaleX<0,D="px",F="deg",R=getComputedStyle(e),j=ta(e,Qi)||"0";return r=i=a=o=u=c=d=p=f=0,l=s=1,n.svg=!(!e.getCTM||!oa(e)),R.translate&&("none"===R.translate&&"none"===R.scale&&"none"===R.rotate||(N[qi]=("none"!==R.translate?"translate3d("+(R.translate+" 0 0").split(" ").slice(0,3).join(", ")+") ":"")+("none"!==R.rotate?"rotate("+R.rotate+") ":"")+("none"!==R.scale?"scale("+R.scale.split(" ").join(",")+") ":"")+("none"!==R[qi]?R[qi]:"")),N.scale=N.rotate=N.translate="none"),g=Ca(e,n.svg),n.svg&&(n.uncache?(k=e.getBBox(),j=n.xOrigin-k.x+"px "+(n.yOrigin-k.y)+"px",S=""):S=!t&&e.getAttribute("data-svg-origin"),xa(e,S||j,!!S||n.originIsAbsolute,!1!==n.smooth,g)),h=n.xOrigin||0,m=n.yOrigin||0,g!==ya&&(b=g[0],w=g[1],_=g[2],C=g[3],r=x=g[4],i=E=g[5],6===g.length?(l=Math.sqrt(b*b+w*w),s=Math.sqrt(C*C+_*_),o=b||w?Mi(w,b)*Pi:0,(d=_||C?Mi(_,C)*Pi+o:0)&&(s*=Math.abs(Math.cos(d*Bi))),n.svg&&(r-=h-(h*b+m*_),i-=m-(h*w+m*C))):(L=g[6],z=g[7],P=g[8],B=g[9],M=g[10],O=g[11],r=g[12],i=g[13],a=g[14],u=(v=Mi(L,M))*Pi,v&&(S=x*(A=Math.cos(-v))+P*(y=Math.sin(-v)),k=E*A+B*y,T=L*A+M*y,P=x*-y+P*A,B=E*-y+B*A,M=L*-y+M*A,O=z*-y+O*A,x=S,E=k,L=T),c=(v=Mi(-_,M))*Pi,v&&(A=Math.cos(-v),O=C*(y=Math.sin(-v))+O*A,b=S=b*A-P*y,w=k=w*A-B*y,_=T=_*A-M*y),o=(v=Mi(w,b))*Pi,v&&(S=b*(A=Math.cos(v))+w*(y=Math.sin(v)),k=x*A+E*y,w=w*A-b*y,E=E*A-x*y,b=S,x=k),u&&Math.abs(u)+Math.abs(o)>359.9&&(u=o=0,c=180-c),l=cn(Math.sqrt(b*b+w*w+_*_)),s=cn(Math.sqrt(E*E+L*L)),v=Mi(x,E),d=Math.abs(v)>2e-4?v*Pi:0,f=O?1/(O<0?-O:O):0),n.svg&&(S=e.getAttribute("transform"),n.forceCSS=e.setAttribute("transform","")||!wa(ta(e,qi)),S&&e.setAttribute("transform",S))),Math.abs(d)>90&&Math.abs(d)<270&&(I?(l*=-1,d+=o<=0?180:-180,o+=o<=0?180:-180):(s*=-1,d+=d<=0?180:-180)),t=t||n.uncache,n.x=r-((n.xPercent=r&&(!t&&n.xPercent||(Math.round(e.offsetWidth/2)===Math.round(-r)?-50:0)))?e.offsetWidth*n.xPercent/100:0)+D,n.y=i-((n.yPercent=i&&(!t&&n.yPercent||(Math.round(e.offsetHeight/2)===Math.round(-i)?-50:0)))?e.offsetHeight*n.yPercent/100:0)+D,n.z=a+D,n.scaleX=cn(l),n.scaleY=cn(s),n.rotation=cn(o)+F,n.rotationX=cn(u)+F,n.rotationY=cn(c)+F,n.skewX=d+F,n.skewY=p+F,n.transformPerspective=f+D,(n.zOrigin=parseFloat(j.split(" ")[2])||!t&&n.zOrigin||0)&&(N[Qi]=Sa(j)),n.xOffset=n.yOffset=0,n.force3D=ht.force3D,n.renderTransform=n.svg?Oa:ki?za:Ta,n.uncache=0,n},Sa=function(e){return(e=e.split(" "))[0]+" "+e[1]},ka=function(e,t,n){var r=Wn(t);return cn(parseFloat(t)+parseFloat(fa(e,"x",n+"px",r)))+r},Ta=function(e,t){t.z="0px",t.rotationY=t.rotationX="0deg",t.force3D=0,za(e,t)},Pa="0deg",Ba="0px",Ma=") ",za=function(e,t){var n=t||this,r=n.xPercent,i=n.yPercent,a=n.x,l=n.y,s=n.z,o=n.rotation,u=n.rotationY,c=n.rotationX,d=n.skewX,p=n.skewY,f=n.scaleX,h=n.scaleY,m=n.transformPerspective,g=n.force3D,v=n.target,A=n.zOrigin,y="",b="auto"===g&&e&&1!==e||!0===g;if(A&&(c!==Pa||u!==Pa)){var w,_=parseFloat(u)*Bi,C=Math.sin(_),x=Math.cos(_);_=parseFloat(c)*Bi,w=Math.cos(_),a=ka(v,a,C*w*-A),l=ka(v,l,-Math.sin(_)*-A),s=ka(v,s,x*w*-A+A)}m!==Ba&&(y+="perspective("+m+Ma),(r||i)&&(y+="translate("+r+"%, "+i+"%) "),(b||a!==Ba||l!==Ba||s!==Ba)&&(y+=s!==Ba||b?"translate3d("+a+", "+l+", "+s+") ":"translate("+a+", "+l+Ma),o!==Pa&&(y+="rotate("+o+Ma),u!==Pa&&(y+="rotateY("+u+Ma),c!==Pa&&(y+="rotateX("+c+Ma),d===Pa&&p===Pa||(y+="skew("+d+", "+p+Ma),1===f&&1===h||(y+="scale("+f+", "+h+Ma),v.style[qi]=y||"translate(0, 0)"},Oa=function(e,t){var n,r,i,a,l,s=t||this,o=s.xPercent,u=s.yPercent,c=s.x,d=s.y,p=s.rotation,f=s.skewX,h=s.skewY,m=s.scaleX,g=s.scaleY,v=s.target,A=s.xOrigin,y=s.yOrigin,b=s.xOffset,w=s.yOffset,_=s.forceCSS,C=parseFloat(c),x=parseFloat(d);p=parseFloat(p),f=parseFloat(f),(h=parseFloat(h))&&(f+=h=parseFloat(h),p+=h),p||f?(p*=Bi,f*=Bi,n=Math.cos(p)*m,r=Math.sin(p)*m,i=Math.sin(p-f)*-g,a=Math.cos(p-f)*g,f&&(h*=Bi,l=Math.tan(f-h),i*=l=Math.sqrt(1+l*l),a*=l,h&&(l=Math.tan(h),n*=l=Math.sqrt(1+l*l),r*=l)),n=cn(n),r=cn(r),i=cn(i),a=cn(a)):(n=m,a=g,r=i=0),(C&&!~(c+"").indexOf("px")||x&&!~(d+"").indexOf("px"))&&(C=fa(v,"x",c,"px"),x=fa(v,"y",d,"px")),(A||y||b||w)&&(C=cn(C+A-(A*n+y*i)+b),x=cn(x+y-(A*r+y*a)+w)),(o||u)&&(l=v.getBBox(),C=cn(C+o/100*l.width),x=cn(x+u/100*l.height)),l="matrix("+n+","+r+","+i+","+a+","+C+","+x+")",v.setAttribute("transform",l),_&&(v.style[qi]=l)},La=function(e,t,n,r,i){var a,l,s=360,o=xt(i),u=parseFloat(i)*(o&&~i.indexOf("rad")?Pi:1)-r,c=r+u+"deg";return o&&("short"===(a=i.split("_")[1])&&(u%=s)!=u%180&&(u+=u<0?s:-360),"cw"===a&&u<0?u=(u+36e9)%s-~~(u/s)*s:"ccw"===a&&u>0&&(u=(u-36e9)%s-~~(u/s)*s)),e._pt=l=new li(e._pt,t,n,r,u,Di),l.e=c,l.u="deg",e._props.push(n),l},Na=function(e,t){for(var n in t)e[n]=t[n];return e},Ia=function(e,t,n){var r,i,a,l,s,o,u,c=Na({},n._gsap),d=n.style;for(i in c.svg?(a=n.getAttribute("transform"),n.setAttribute("transform",""),d[qi]=t,r=Ea(n,1),ua(n,qi),n.setAttribute("transform",a)):(a=getComputedStyle(n)[qi],d[qi]=t,r=Ea(n,1),d[qi]=a),Ti)(a=c[i])!==(l=r[i])&&"perspective,force3D,transformOrigin,svgOrigin".indexOf(i)<0&&(s=Wn(a)!==(u=Wn(l))?fa(n,i,a,u):parseFloat(a),o=parseFloat(l),e._pt=new li(e._pt,r,i,s,o-s,Ii),e._pt.u=u||0,e._props.push(i));Na(r,c)};un("padding,margin,Width,Radius",(function(e,t){var n="Top",r="Right",i="Bottom",a="Left",l=(t<3?[n,r,i,a]:[n+a,n+r,i+r,i+a]).map((function(n){return t<2?e+n:"border"+n+e}));Aa[t>1?"border"+e:e]=function(e,t,n,r,i){var a,s;if(arguments.length<4)return a=l.map((function(t){return ha(e,t,n)})),5===(s=a.join(" ")).split(a[0]).length?a[0]:s;a=(r+"").split(" "),s={},l.forEach((function(e,t){return s[e]=a[t]=a[t]||a[(t-1)/2|0]})),e.init(t,s,i)}}));var Da,Fa,Ra={name:"css",register:ia,targetTest:function(e){return e.style&&e.nodeType},init:function(e,t,n,r,i){var a,l,s,o,u,c,d,p,f,h,m,g,v,A,y,b,w,_,C,x,E=this._props,S=e.style,k=n.vars.startAt;for(d in Ci||ia(),this.styles=this.styles||Ji(e),b=this.styles.props,this.tween=n,t)if("autoRound"!==d&&(l=t[d],!en[d]||!jr(d,t,n,r,e,i)))if(u=typeof l,c=Aa[d],"function"===u&&(u=typeof(l=l.call(n,r,e,i))),"string"===u&&~l.indexOf("random(")&&(l=ir(l)),c)c(this,e,d,l,n)&&(y=1);else if("--"===d.substr(0,2))a=(getComputedStyle(e).getPropertyValue(d)+"").trim(),l+="",vr.lastIndex=0,vr.test(a)||(p=Wn(a),f=Wn(l)),f?p!==f&&(a=fa(e,d,a,f)+f):p&&(l+=p),this.add(S,"setProperty",a,l,r,i,0,0,d),E.push(d),b.push(d,0,S[d]);else if("undefined"!==u){if(k&&d in k?(a="function"==typeof k[d]?k[d].call(n,r,e,i):k[d],xt(a)&&~a.indexOf("random(")&&(a=ir(a)),Wn(a+"")||"auto"===a||(a+=ht.units[d]||Wn(ha(e,d))||""),"="===(a+"").charAt(1)&&(a=ha(e,d))):a=ha(e,d),o=parseFloat(a),(h="string"===u&&"="===l.charAt(1)&&l.substr(0,2))&&(l=l.substr(2)),s=parseFloat(l),d in Ni&&("autoAlpha"===d&&(1===o&&"hidden"===ha(e,"visibility")&&s&&(o=0),b.push("visibility",0,S.visibility),ca(this,S,"visibility",o?"inherit":"hidden",s?"inherit":"hidden",!s)),"scale"!==d&&"transform"!==d&&~(d=Ni[d]).indexOf(",")&&(d=d.split(",")[0])),m=d in Ti)if(this.styles.save(d),g||((v=e._gsap).renderTransform&&!t.parseTransform||Ea(e,t.parseTransform),A=!1!==t.smoothOrigin&&v.smooth,(g=this._pt=new li(this._pt,S,qi,0,1,v.renderTransform,v,0,-1)).dep=1),"scale"===d)this._pt=new li(this._pt,v,"scaleY",v.scaleY,(h?pn(v.scaleY,h+s):s)-v.scaleY||0,Ii),this._pt.u=0,E.push("scaleY",d),d+="X";else{if("transformOrigin"===d){b.push(Qi,0,S[Qi]),_=void 0,C=void 0,x=void 0,C=(_=(w=l).split(" "))[0],x=_[1]||"50%","top"!==C&&"bottom"!==C&&"left"!==x&&"right"!==x||(w=C,C=x,x=w),_[0]=ga[C]||C,_[1]=ga[x]||x,l=_.join(" "),v.svg?xa(e,l,0,A,0,this):((f=parseFloat(l.split(" ")[2])||0)!==v.zOrigin&&ca(this,v,"zOrigin",v.zOrigin,f),ca(this,S,d,Sa(a),Sa(l)));continue}if("svgOrigin"===d){xa(e,l,1,A,0,this);continue}if(d in ba){La(this,v,d,o,h?pn(o,h+l):l);continue}if("smoothOrigin"===d){ca(this,v,"smooth",v.smooth,l);continue}if("force3D"===d){v[d]=l;continue}if("transform"===d){Ia(this,l,e);continue}}else d in S||(d=ra(d)||d);if(m||(s||0===s)&&(o||0===o)&&!Li.test(l)&&d in S)s||(s=0),(p=(a+"").substr((o+"").length))!==(f=Wn(l)||(d in ht.units?ht.units[d]:p))&&(o=fa(e,d,a,f)),this._pt=new li(this._pt,m?v:S,d,o,(h?pn(o,h+s):s)-o,m||"px"!==f&&"zIndex"!==d||!1===t.autoRound?Ii:Ri),this._pt.u=f||0,p!==f&&"%"!==f&&(this._pt.b=a,this._pt.r=Fi);else if(d in S)ma.call(this,e,d,a,h?h+l:l);else if(d in e)this.add(e,d,a||e[d],h?h+l:l,r,i);else if("parseTransform"!==d){$t(d,l);continue}m||(d in S?b.push(d,0,S[d]):b.push(d,1,a||e[d])),E.push(d)}y&&ai(this)},render:function(e,t){if(t.tween._time||!Si())for(var n=t._pt;n;)n.r(e,n.d),n=n._next;else t.styles.revert()},get:ha,aliases:Ni,getSetter:function(e,t,n){var r=Ni[t];return r&&r.indexOf(",")<0&&(t=r),t in Ti&&t!==Qi&&(e._gsap.x||ha(e,"x"))?n&&Ei===n?"scale"===t?Vi:$i:(Ei=n||{})&&("scale"===t?Hi:Wi):e.style&&!kt(e.style[t])?Yi:~t.indexOf("-")?Ui:Kr(e,t)},core:{_removeProperty:ua,_getMatrix:Ca}};yi.utils.checkPrefix=ra,yi.core.getStyleSaver=Ji,Fa=un("x,y,z,scale,scaleX,scaleY,xPercent,yPercent"+","+(Da="rotation,rotationX,rotationY,skewX,skewY")+",transform,transformOrigin,svgOrigin,force3D,smoothOrigin,transformPerspective",(function(e){Ti[e]=1})),un(Da,(function(e){ht.units[e]="deg",ba[e]=1})),Ni[Fa[13]]="x,y,z,scale,scaleX,scaleY,xPercent,yPercent,"+Da,un("0:translateX,1:translateY,2:translateZ,8:rotate,8:rotationZ,8:rotateZ,9:rotateX,10:rotateY",(function(e){var t=e.split(":");Ni[t[1]]=Fa[t[0]]})),un("x,y,z,top,right,bottom,left,width,height,fontSize,padding,margin,perspective",(function(e){ht.units[e]="px"})),yi.registerPlugin(Ra);var ja=yi.registerPlugin(Ra)||yi;function Ga(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,i,a,l,s=[],o=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;o=!1}else for(;!(o=(r=a.call(n)).done)&&(s.push(r.value),s.length!==t);o=!0);}catch(e){u=!0,i=e}finally{try{if(!o&&null!=n.return&&(l=n.return(),Object(l)!==l))return}finally{if(u)throw i}}return s}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Ya(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Ya(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Ya(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}ja.core.Tween;const Ua=function(e){var t=e.intervalStart,n=e.intervalEnd,i=e.sliders,a=e.intervalIndex,l=e.setIntervalIndex,s=e.setSliderInAnim,o=Ga(r.useState(1),2),u=o[0],c=o[1],d=Ga(r.useState(Ha(i.length)),2),p=d[0],f=d[1],h=function(e){e!==u&&(c(e),l(e-1),m(e))},m=function(e){var t=(360/i.length*(e-1)-p+540)%360-180,n=p+t+Ha(i.length),r=Math.abs(t),a=Math.max(500,Math.min(2e3,7.5*r));ja.to({angle:p},{angle:n,duration:a/1e3,onUpdate:function(){f(this.targets()[0].angle)},ease:"power1.out"}),s(!0),setTimeout((function(){s(!1)}),a)};return r.useEffect((function(){a+1!==u&&h(a+1)}),[a]),r.createElement(r.Fragment,null,r.createElement("div",{className:"interval-slider_spinner"},r.createElement("div",{className:"interval-slider_spinner__interval"},r.createElement("span",{className:"interval-slider_spinner__interval--start"},t),"  ",r.createElement("span",{className:"interval-slider_spinner__interval--end"},n)),r.createElement("div",{className:"interval-slider_spinner__container"},i&&i.map((function(e,t){return r.createElement(Va,{key:"in-pnt-".concat(t),isActive:t+1===u,pointsCount:i.length,pointTitle:e.name,pointNumber:t+1,pointAngle:p,handleClick:h})})))))};function $a(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}const Va=function(e){var t,n,i=e.isActive,a=e.pointsCount,l=e.pointNumber,s=e.pointTitle,o=e.pointAngle,u=e.handleClick,c=(t=r.useState(360/a*l-o),n=2,function(e){if(Array.isArray(e))return e}(t)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,i,a,l,s=[],o=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;o=!1}else for(;!(o=(r=a.call(n)).done)&&(s.push(r.value),s.length!==t);o=!0);}catch(e){u=!0,i=e}finally{try{if(!o&&null!=n.return&&(l=n.return(),Object(l)!==l))return}finally{if(u)throw i}}return s}}(t,n)||function(e,t){if(e){if("string"==typeof e)return $a(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?$a(e,t):void 0}}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),d=c[0],p=c[1];return r.useEffect((function(){p(360/a*l-o)}),[o,a,l]),r.createElement(r.Fragment,null,r.createElement("div",{className:"interval-slider_spinner__point",style:{transform:"rotate(".concat(d,"deg)")}},r.createElement("div",{className:"interval-slider_spinner__point-wrapper ".concat(i?"--active":""),style:{transform:"rotate(".concat(-d,"deg)")}},r.createElement("div",{className:"interval-slider_spinner__point--index ".concat(i?"--active":""),onClick:function(){return u(l,360/a*l-o)}},l),r.createElement("div",{className:"interval-slider_spinner__point--title ".concat(i?"--active":"")},s))))};var Ha=function(e){return 180/e+(e>=2?0:45)};function Wa(){var e=window;return{width:e.innerWidth,height:e.innerHeight}}function qa(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,i,a,l,s=[],o=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;o=!1}else for(;!(o=(r=a.call(n)).done)&&(s.push(r.value),s.length!==t);o=!0);}catch(e){u=!0,i=e}finally{try{if(!o&&null!=n.return&&(l=n.return(),Object(l)!==l))return}finally{if(u)throw i}}return s}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Qa(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Qa(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Qa(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}const Xa=function(){var e=qa(r.useState(qe),2),t=e[0],n=(e[1],qa(r.useState(0),2)),i=n[0],a=n[1],l=qa(r.useState(t[i].interval.start),2),s=l[0],o=l[1],u=qa(r.useState(t[i].interval.end),2),c=u[0],d=u[1],p=qa(r.useState(t[i].slides),2),f=p[0],h=p[1],m=qa(r.useState(!1),2),g=m[0],v=m[1],A=qa(r.useState(t[i].name),2),y=A[0],b=A[1],w=qa(r.useState(Wa()),2),_=w[0],C=w[1],x=function(e){e<0&&0===i||e>0&&i+1===t.length||a(i+e)};r.useEffect((function(){var e=t[i].interval.start,n=t[i].interval.end,r=s,a=c,l=50-1e3*Math.abs(1-r/e),u=50-1e3*Math.abs(1-a/n),p=setInterval((function(){if(r===e)return clearInterval(p);r<e&&o(++r),r>e&&o(--r)}),l),f=setInterval((function(){if(a===n)return clearInterval(f);a<n&&d(++a),a>n&&d(--a)}),u),m=setTimeout((function(){h(t[i].slides),b(t[i].name),clearTimeout(m)}),100)}),[i]);var E=r.createElement("div",{className:"interval-slider_slider ".concat(g?"--hide":"")},_.width<=768&&r.createElement("div",{className:"interval-slider_slider--title"},y),r.createElement("div",{className:"interval-slider_slider__container"},r.createElement(De,{slidesPerView:3,spaceBetween:80,breakpoints:{0:{slidesPerView:2,spaceBetween:20},768:{slidesPerView:3}},grabCursor:!(_.width<=768),freeMode:_.width<=768,navigation:{prevEl:".interval-slider_slider__arrow.--prev",nextEl:".interval-slider_slider__arrow.--next"},pagination:{el:".interval-slider_pagination",type:"bullets",clickable:!0},modules:[je,Ye]},f.map((function(e,t){return r.createElement(Fe,{className:"interval-slider_slider__slide",key:"in-sl-".concat(t)},r.createElement("div",{className:"interval-slider_slider__slide--title"},e.name),r.createElement("div",{className:"interval-slider_slider__slide--text"},e.description))}))),r.createElement("div",{className:"interval-slider_slider__arrow --prev"},r.createElement(Ve,null)),r.createElement("div",{className:"interval-slider_slider__arrow --next"},r.createElement(Ve,null))));return r.useEffect((function(){return window.addEventListener("resize",(function(){return C(Wa())})),function(){return window.removeEventListener("resize",(function(){return C(Wa())}))}}),[]),r.createElement(r.Fragment,null,r.createElement("div",{className:"interval-slider"},r.createElement("div",{className:"interval-slider__content"},r.createElement("div",{className:"interval-slider__title"},r.createElement("div",{className:"interval-slider__title--text"},"Исторические",r.createElement("br",null),"даты")),r.createElement("div",{className:"interval-slider_wrapper"},r.createElement(Ua,{sliders:t,setIntervalIndex:a,intervalIndex:i,setSliderInAnim:v,intervalStart:s,intervalEnd:c}),_.width<=768&&E),r.createElement("div",{className:"interval-slider_navigation"},r.createElement("div",{className:"interval-slider_navigation__wrapper"},r.createElement("div",{className:"interval-slider_navigation__progress"},("0"+(i+1)).slice(-2),"/","0"+t.length),r.createElement("div",{className:"interval-slider_navigation__controls"},r.createElement("div",{className:"interval-slider_navigation__controls--arrow --prev ".concat(0===i?"--disable":""),onClick:function(){return x(-1)}},r.createElement(Ve,null)),r.createElement("div",{className:"interval-slider_navigation__controls--arrow --next ".concat(i===t.length-1?"--disable":""),onClick:function(){return x(1)}},r.createElement(Ve,null)))),r.createElement("div",{className:"interval-slider_pagination"})),_.width>768&&E)))},Ka=function(){return r.createElement(r.Fragment,null,r.createElement("div",{className:"app-body"},r.createElement(Xa,null)))};var Za=n(935),Ja={};Ja.styleTagTransform=g(),Ja.setAttributes=p(),Ja.insert=c().bind(null,"head"),Ja.domAPI=o(),Ja.insertStyleElement=h(),l()(Za.A,Ja),Za.A&&Za.A.locals&&Za.A.locals,i.createRoot(document.getElementById("root")).render(r.createElement(r.StrictMode,null,r.createElement(Ka,null)))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,